# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.types_settings import TypesSettings  # noqa: E501
from openapi_client.rest import ApiException

class TestTypesSettings(unittest.TestCase):
    """TypesSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TypesSettings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.types_settings.TypesSettings()  # noqa: E501
        if include_optional :
            return TypesSettings(
                access_ca_cert = '', 
                address = '', 
                alerts = openapi_client.models.api/alert_settings.api.AlertSettings(
                    aggregation_period_ms = 56, 
                    security_advisor_webhook = '', ), 
                cert_settings = openapi_client.models.types/cert_settings.types.CertSettings(
                    ca_expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    console_san = [
                        ''
                        ], ), 
                certificate_period_days = 56, 
                check_revocation = True, 
                code_repo_settings = openapi_client.models.shared/code_repo_settings.shared.CodeRepoSettings(
                    specifications = [
                        openapi_client.models.shared/code_repo_specification.shared.CodeRepoSpecification(
                            credential_id = '', 
                            excluded_manifest_paths = [
                                ''
                                ], 
                            explicit_manifest_names = [
                                ''
                                ], 
                            public_only = True, 
                            repositories = [
                                ''
                                ], 
                            target_python_version = '', 
                            type = '[\"github\",\"CI\"]', )
                        ], 
                    webhook_url_suffix = '', ), 
                communication_port = 56, 
                console_ca_cert = '', 
                console_custom_cert = openapi_client.models.common/secret.common.Secret(
                    encrypted = '', 
                    plain = '', ), 
                console_names = [
                    ''
                    ], 
                custom_endpoint = '', 
                custom_endpoint_ca_cert = '', 
                custom_endpoint_credential_id = '', 
                custom_endpoint_enabled = True, 
                custom_labels = openapi_client.models.shared/custom_labels_settings.shared.CustomLabelsSettings(
                    labels = [
                        ''
                        ], ), 
                defender_settings = openapi_client.models.defender/settings.defender.Settings(
                    admission_control_enabled = True, 
                    admission_control_webhook_suffix = '', 
                    automatic_upgrade = True, 
                    disconnect_period_days = 56, 
                    host_custom_compliance_enabled = True, 
                    listening_port = 56, ), 
                enabled = True, 
                forensic = openapi_client.models.shared/forensic_settings.shared.ForensicSettings(
                    collect_network_firewall = True, 
                    collect_network_snapshot = True, 
                    container_disk_usage_mb = 56, 
                    enabled = True, 
                    host_disk_usage_mb = 56, 
                    incident_snapshots_cap = 56, ), 
                has_admin = True, 
                host_auto_deploy = [
                    openapi_client.models.shared/host_auto_deploy_specification.shared.HostAutoDeploySpecification(
                        aws_region_type = '[\"regular\",\"gov\",\"china\",\"all\"]', 
                        collections = [
                            openapi_client.models.collection/collection.collection.Collection(
                                account_ids = [
                                    ''
                                    ], 
                                app_ids = [
                                    ''
                                    ], 
                                clusters = [
                                    ''
                                    ], 
                                code_repos = [
                                    ''
                                    ], 
                                color = '', 
                                containers = [
                                    ''
                                    ], 
                                description = '', 
                                functions = [
                                    ''
                                    ], 
                                hosts = [
                                    ''
                                    ], 
                                images = [
                                    ''
                                    ], 
                                labels = [
                                    ''
                                    ], 
                                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                name = '', 
                                namespaces = [
                                    ''
                                    ], 
                                owner = '', 
                                prisma = True, 
                                system = True, )
                            ], 
                        console_hostname = '', 
                        credential_id = '', 
                        last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', )
                    ], 
                hpkp = openapi_client.models.types/hpkp_settings.types.HPKPSettings(
                    certs = '', 
                    enabled = True, 
                    fingerprints = [
                        ''
                        ], ), 
                identity_settings = openapi_client.models.identity/settings.identity.Settings(
                    ldap = openapi_client.models.identity/ldap_settings.identity.LdapSettings(
                        account_password = openapi_client.models.common/secret.common.Secret(
                            encrypted = '', 
                            plain = '', ), 
                        account_upn = '', 
                        ca_cert = '', 
                        enabled = True, 
                        group_search_base = '', 
                        search_base = '', 
                        type = '', 
                        url = '', 
                        user_search_base = '', 
                        user_search_identifier = '', ), 
                    oauth = openapi_client.models.identity/provider_settings.identity.ProviderSettings(
                        auth_url = '', 
                        cert = '', 
                        client_id = '', 
                        client_secret = openapi_client.models.common/secret.common.Secret(
                            encrypted = '', 
                            plain = '', ), 
                        enabled = True, 
                        group_claim = '', 
                        group_scope = '', 
                        open_id_issues_url = '', 
                        openshift_base_url = '', 
                        provider_alias = '', 
                        provider_name = '[\"github\",\"openshift\"]', 
                        token_url = '', ), 
                    openid = openapi_client.models.identity/provider_settings.identity.ProviderSettings(
                        auth_url = '', 
                        cert = '', 
                        client_id = '', 
                        enabled = True, 
                        group_claim = '', 
                        group_scope = '', 
                        open_id_issues_url = '', 
                        openshift_base_url = '', 
                        provider_alias = '', 
                        token_url = '', ), 
                    saml = openapi_client.models.identity/saml_settings.identity.SamlSettings(
                        app_id = '', 
                        app_secret = openapi_client.models.common/secret.common.Secret(
                            encrypted = '', 
                            plain = '', ), 
                        audience = '', 
                        cert = '', 
                        console_url = '', 
                        enabled = True, 
                        issuer = '', 
                        provider_alias = '', 
                        skip_authn_context = True, 
                        tenant_id = '', 
                        type = '[\"okta\",\"gsuite\",\"ping\",\"shibboleth\",\"azure\",\"adfs\"]', 
                        url = '', ), ), 
                kubernetes_audit = openapi_client.models.shared/kubernetes_audit_settings.shared.KubernetesAuditSettings(
                    credential_id = '', 
                    deployment_type = '[\"default\",\"gke\"]', 
                    last_polling_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    project_ids = [
                        ''
                        ], 
                    stackdriver_filter = '', 
                    webhook_url_suffix = '', ), 
                ldap_enabled = True, 
                license_key = '', 
                logging = openapi_client.models.shared/logging_settings.shared.LoggingSettings(
                    console_address = '', 
                    enable_metrics_collection = True, 
                    include_runtime_link = True, 
                    stdout = openapi_client.models.shared/logger_setting.shared.LoggerSetting(
                        all_proc_events = True, 
                        enabled = True, 
                        verbose_scan = True, ), 
                    syslog = openapi_client.models.shared/syslog_settings.shared.SyslogSettings(
                        addr = '', 
                        all_proc_events = True, 
                        enabled = True, 
                        id = '', 
                        verbose_scan = True, ), ), 
                logon = openapi_client.models.types/logon_settings.types.LogonSettings(
                    basic_auth_disabled = True, 
                    include_tls = True, 
                    session_timeout_sec = 56, 
                    strong_password = True, 
                    use_support_credentials = True, ), 
                oauth_enabled = True, 
                oidc_enabled = True, 
                projects = openapi_client.models.api/project_settings.api.ProjectSettings(
                    master = True, 
                    redirect_url = '', ), 
                proxy = openapi_client.models.common/proxy_settings.common.ProxySettings(
                    ca = '', 
                    http_proxy = '', 
                    no_proxy = '', 
                    password = openapi_client.models.common/secret.common.Secret(
                        encrypted = '', 
                        plain = '', ), 
                    user = '', ), 
                registry = openapi_client.models.shared/registry_settings.shared.RegistrySettings(
                    harbor_scanner_url_suffix = '', 
                    specifications = [
                        openapi_client.models.shared/registry_specification.shared.RegistrySpecification(
                            cap = 56, 
                            collections = [
                                ''
                                ], 
                            credential = openapi_client.models.cred/credential.cred.Credential(
                                _id = '', 
                                account_guid = '', 
                                account_id = '', 
                                api_token = openapi_client.models.common/secret.common.Secret(
                                    encrypted = '', 
                                    plain = '', ), 
                                ca_cert = '', 
                                description = '', 
                                external = True, 
                                last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                owner = '', 
                                role_arn = '', 
                                secret = openapi_client.models.common/secret.common.Secret(
                                    encrypted = '', 
                                    plain = '', ), 
                                tokens = openapi_client.models.cred/temporary_token.cred.TemporaryToken(
                                    aws_access_key_id = '', 
                                    aws_secret_access_key = openapi_client.models.common/secret.common.Secret(
                                        encrypted = '', 
                                        plain = '', ), 
                                    duration = 56, 
                                    expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    token = openapi_client.models.common/secret.common.Secret(
                                        encrypted = '', 
                                        plain = '', ), ), 
                                type = '[\"aws\",\"azure\",\"gcp\",\"ibmCloud\",\"apiToken\",\"githubToken\",\"basic\",\"dtr\",\"kubeconfig\",\"certificate\"]', 
                                use_aws_role = True, ), 
                            credential_id = '', 
                            excluded_repositories = [
                                ''
                                ], 
                            excluded_tags = [
                                ''
                                ], 
                            jfrog_repo_types = [
                                '[\"local\",\"remote\",\"virtual\"]'
                                ], 
                            namespace = '', 
                            os = '[\"linux\",\"windows\"]', 
                            registry = '', 
                            repository = '', 
                            scanners = 56, 
                            tag = '', 
                            version = '', 
                            version_pattern = '', )
                        ], 
                    webhook_url_suffix = '', ), 
                saml_enabled = True, 
                scan = openapi_client.models.shared/scan_settings.shared.ScanSettings(
                    cloud_platforms_scan_period_ms = 56, 
                    code_repos_scan_period_ms = 56, 
                    containers_scan_period_ms = 56, 
                    extract_archive = True, 
                    images_scan_period_ms = 56, 
                    include_js_dependencies = True, 
                    registry_scan_period_ms = 56, 
                    registry_scan_retention_days = 56, 
                    scan_running_images = True, 
                    serverless_scan_period_ms = 56, 
                    show_infra_containers = True, 
                    show_negligible_vulnerabilities = True, 
                    system_scan_period_ms = 56, 
                    tas_droplets_scan_period_ms = 56, 
                    vm_scan_period_ms = 56, ), 
                secrets_stores = openapi_client.models.shared/secrets_stores.shared.SecretsStores(
                    refresh_period_hours = 56, 
                    secrets_stores = [
                        openapi_client.models.shared/secrets_store.shared.SecretsStore(
                            app_id = '', 
                            ca_cert = openapi_client.models.common/secret.common.Secret(
                                encrypted = '', 
                                plain = '', ), 
                            client_cert = openapi_client.models.common/secret.common.Secret(
                                encrypted = '', 
                                plain = '', ), 
                            credential_id = '', 
                            name = '', 
                            region = '', 
                            type = '[\"hashicorp\",\"hashicorp010\",\"cyberark\",\"awsParameterStore\",\"awsSecretsManager\",\"azure\"]', 
                            url = '', )
                        ], ), 
                secured_console_port = 56, 
                serverless_auto_deploy = [
                    openapi_client.models.shared/serverless_auto_deploy_specification.shared.ServerlessAutoDeploySpecification(
                        collections = [
                            openapi_client.models.collection/collection.collection.Collection(
                                account_ids = [
                                    ''
                                    ], 
                                app_ids = [
                                    ''
                                    ], 
                                clusters = [
                                    ''
                                    ], 
                                code_repos = [
                                    ''
                                    ], 
                                color = '', 
                                containers = [
                                    ''
                                    ], 
                                description = '', 
                                functions = [
                                    ''
                                    ], 
                                hosts = [
                                    ''
                                    ], 
                                images = [
                                    ''
                                    ], 
                                labels = [
                                    ''
                                    ], 
                                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                name = '', 
                                namespaces = [
                                    ''
                                    ], 
                                owner = '', 
                                prisma = True, 
                                system = True, )
                            ], 
                        console_addr = '', 
                        credential_id = '', 
                        last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        region = '', 
                        runtimes = [
                            ''
                            ], )
                    ], 
                serverless_scan = [
                    openapi_client.models.shared/serverless_scan_specification.shared.ServerlessScanSpecification(
                        aws_region_type = '[\"regular\",\"gov\",\"china\",\"all\"]', 
                        cap = 56, 
                        credential = openapi_client.models.cred/credential.cred.Credential(
                            _id = '', 
                            account_guid = '', 
                            account_id = '', 
                            api_token = openapi_client.models.common/secret.common.Secret(
                                encrypted = '', 
                                plain = '', ), 
                            ca_cert = '', 
                            description = '', 
                            external = True, 
                            last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            owner = '', 
                            role_arn = '', 
                            secret = openapi_client.models.common/secret.common.Secret(
                                encrypted = '', 
                                plain = '', ), 
                            tokens = openapi_client.models.cred/temporary_token.cred.TemporaryToken(
                                aws_access_key_id = '', 
                                aws_secret_access_key = openapi_client.models.common/secret.common.Secret(
                                    encrypted = '', 
                                    plain = '', ), 
                                duration = 56, 
                                expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                token = openapi_client.models.common/secret.common.Secret(
                                    encrypted = '', 
                                    plain = '', ), ), 
                            type = '[\"aws\",\"azure\",\"gcp\",\"ibmCloud\",\"apiToken\",\"githubToken\",\"basic\",\"dtr\",\"kubeconfig\",\"certificate\"]', 
                            use_aws_role = True, ), 
                        credential_id = '', 
                        provider = '[\"aws\",\"azure\",\"gcp\",\"alibaba\",\"others\"]', 
                        scan_all_versions = True, 
                        scan_layers = True, )
                    ], 
                tas_droplets = [
                    openapi_client.models.shared/tas_droplet_specification.shared.TASDropletSpecification(
                        cap = 56, 
                        cloud_controller_address = '', 
                        hostname = '', 
                        pattern = '', )
                    ], 
                telemetry = openapi_client.models.types/telemetry_settings.types.TelemetrySettings(
                    enabled = True, ), 
                token = '', 
                trusted_certs = [
                    openapi_client.models.shared/trusted_cert_signature.shared.TrustedCertSignature(
                        cn = '', 
                        issuer = '', 
                        not_after1 = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        not_before1 = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        raw = '', )
                    ], 
                trusted_certs_enabled = True, 
                upload_disabled = True, 
                version = '', 
                vms = [
                    openapi_client.models.shared/vm_specification.shared.VMSpecification(
                        cap = 56, 
                        collections = [
                            openapi_client.models.collection/collection.collection.Collection(
                                account_ids = [
                                    ''
                                    ], 
                                app_ids = [
                                    ''
                                    ], 
                                clusters = [
                                    ''
                                    ], 
                                code_repos = [
                                    ''
                                    ], 
                                color = '', 
                                containers = [
                                    ''
                                    ], 
                                description = '', 
                                functions = [
                                    ''
                                    ], 
                                hosts = [
                                    ''
                                    ], 
                                images = [
                                    ''
                                    ], 
                                labels = [
                                    ''
                                    ], 
                                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                name = '', 
                                namespaces = [
                                    ''
                                    ], 
                                owner = '', 
                                prisma = True, 
                                system = True, )
                            ], 
                        console_addr = '', 
                        credential_id = '', 
                        excluded_images = [
                            ''
                            ], 
                        region = '', 
                        scanners = 56, 
                        version = '', )
                    ], 
                wild_fire_settings = openapi_client.models.shared/wild_fire_settings.shared.WildFireSettings(
                    api_key = '', 
                    api_key_expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_error = '', 
                    policy = openapi_client.models.shared/wild_fire_policy.shared.WildFirePolicy(
                        compliance_enabled = True, 
                        grayware_as_malware = True, 
                        region = '', 
                        runtime_enabled = True, 
                        upload_enabled = True, ), ), 
                windows_feed_enabled = True
            )
        else :
            return TypesSettings(
        )

    def testTypesSettings(self):
        """Test TypesSettings"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
