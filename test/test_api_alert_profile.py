# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.api_alert_profile import ApiAlertProfile  # noqa: E501
from openapi_client.rest import ApiException

class TestApiAlertProfile(unittest.TestCase):
    """ApiAlertProfile unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ApiAlertProfile
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.api_alert_profile.ApiAlertProfile()  # noqa: E501
        if include_optional :
            return ApiAlertProfile(
                id = '', 
                console_identifier = '', 
                disabled = True, 
                email = openapi_client.models.api/alert_profile_email_settings.api.AlertProfileEmailSettings(
                    credential_id = '', 
                    enabled = True, 
                    from = '', 
                    labels = [
                        ''
                        ], 
                    port = 56, 
                    recipients = [
                        ''
                        ], 
                    smtp_address = '', 
                    ssl = True, ), 
                gcp_pubsub = openapi_client.models.api/alert_profile_gcp_pubsub_settings.api.AlertProfileGcpPubsubSettings(
                    credential_id = '', 
                    enabled = True, 
                    topic = '', ), 
                jira = openapi_client.models.api/alert_profile_jira_settings.api.AlertProfileJIRASettings(
                    assignee = openapi_client.models.api/jira_dynamic_field.api.JIRADynamicField(
                        id = '', 
                        labels = [
                            ''
                            ], 
                        name = '', ), 
                    base_url = '', 
                    ca_cert = '', 
                    credential_id = '', 
                    enabled = True, 
                    issue_type = '', 
                    labels = openapi_client.models.api/jira_dynamic_labels.api.JIRADynamicLabels(
                        names = [
                            ''
                            ], ), 
                    priority = '', 
                    project_key = openapi_client.models.api/jira_dynamic_field.api.JIRADynamicField(
                        id = '', 
                        name = '', ), ), 
                last_error = '', 
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                name = '', 
                notes = '', 
                owner = '', 
                pagerduty = openapi_client.models.api/alert_profile_pager_duty_settings.api.AlertProfilePagerDutySettings(
                    enabled = True, 
                    routing_key = openapi_client.models.common/secret.common.Secret(
                        encrypted = '', 
                        plain = '', ), 
                    severity = '[\"critical\",\"error\",\"warning\",\"info\"]', 
                    summary = '', ), 
                policy = {
                    'key' : openapi_client.models.api/alert_rule.api.AlertRule(
                        all_rules = True, 
                        enabled = True, 
                        rules = [
                            ''
                            ], )
                    }, 
                previous_name = '', 
                security_advisor = openapi_client.models.api/alert_profile_security_advisor.api.AlertProfileSecurityAdvisor(
                    auto = True, 
                    credential_id = '', 
                    enabled = True, 
                    findings_url = '', 
                    provider_id = '', 
                    token_url = '', ), 
                security_center = openapi_client.models.api/alert_profile_security_center_settings.api.AlertProfileSecurityCenterSettings(
                    credential_id = '', 
                    enabled = True, 
                    source_id = '', ), 
                security_hub = openapi_client.models.api/alert_profile_security_hub_settings.api.AlertProfileSecurityHubSettings(
                    account_id = '', 
                    credential_id = '', 
                    enabled = True, 
                    region = '', ), 
                service_now = openapi_client.models.api/alert_profile_service_now_settings.api.AlertProfileServiceNowSettings(
                    application = '[\"securityIncidentsResponse\",\"vulnerabilityResponse\"]', 
                    assignee = '', 
                    assignment_group = '', 
                    audit_priority = '', 
                    ca_cert = '', 
                    credential_id = '', 
                    enabled = True, 
                    project = '', 
                    security_incident_base_url = '', 
                    vulnerability_endpoint_url = '', ), 
                slack = openapi_client.models.api/alert_profile_slack_settings.api.AlertProfileSlackSettings(
                    channels = [
                        ''
                        ], 
                    enabled = True, 
                    users = [
                        ''
                        ], 
                    webhook_url = '', ), 
                webhook = openapi_client.models.api/alert_profile_webhook_settings.api.AlertProfileWebhookSettings(
                    ca_cert = '', 
                    credential_id = '', 
                    enabled = True, 
                    json = '', 
                    url = '', ), 
                xsoar = openapi_client.models.api/alert_profile_xsoar_settings.api.AlertProfileXSOARSettings(
                    enabled = True, )
            )
        else :
            return ApiAlertProfile(
        )

    def testApiAlertProfile(self):
        """Test ApiAlertProfile"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
