# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.shared_registry_settings import SharedRegistrySettings  # noqa: E501
from openapi_client.rest import ApiException

class TestSharedRegistrySettings(unittest.TestCase):
    """SharedRegistrySettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SharedRegistrySettings
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.shared_registry_settings.SharedRegistrySettings()  # noqa: E501
        if include_optional :
            return SharedRegistrySettings(
                harbor_scanner_url_suffix = '', 
                specifications = [
                    openapi_client.models.shared/registry_specification.shared.RegistrySpecification(
                        cap = 56, 
                        collections = [
                            ''
                            ], 
                        credential = openapi_client.models.cred/credential.cred.Credential(
                            _id = '', 
                            account_guid = '', 
                            account_id = '', 
                            api_token = openapi_client.models.common/secret.common.Secret(
                                encrypted = '', 
                                plain = '', ), 
                            ca_cert = '', 
                            description = '', 
                            external = True, 
                            last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            owner = '', 
                            role_arn = '', 
                            secret = openapi_client.models.common/secret.common.Secret(
                                encrypted = '', 
                                plain = '', ), 
                            tokens = openapi_client.models.cred/temporary_token.cred.TemporaryToken(
                                aws_access_key_id = '', 
                                aws_secret_access_key = openapi_client.models.common/secret.common.Secret(
                                    encrypted = '', 
                                    plain = '', ), 
                                duration = 56, 
                                expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                token = openapi_client.models.common/secret.common.Secret(
                                    encrypted = '', 
                                    plain = '', ), ), 
                            type = '[\"aws\",\"azure\",\"gcp\",\"ibmCloud\",\"apiToken\",\"githubToken\",\"basic\",\"dtr\",\"kubeconfig\",\"certificate\"]', 
                            use_aws_role = True, ), 
                        credential_id = '', 
                        excluded_repositories = [
                            ''
                            ], 
                        excluded_tags = [
                            ''
                            ], 
                        jfrog_repo_types = [
                            '[\"local\",\"remote\",\"virtual\"]'
                            ], 
                        namespace = '', 
                        os = '[\"linux\",\"windows\"]', 
                        registry = '', 
                        repository = '', 
                        scanners = 56, 
                        tag = '', 
                        version = '', 
                        version_pattern = '', )
                    ], 
                webhook_url_suffix = ''
            )
        else :
            return SharedRegistrySettings(
        )

    def testSharedRegistrySettings(self):
        """Test SharedRegistrySettings"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
