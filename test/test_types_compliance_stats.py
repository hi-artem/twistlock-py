# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.types_compliance_stats import TypesComplianceStats  # noqa: E501
from openapi_client.rest import ApiException

class TestTypesComplianceStats(unittest.TestCase):
    """TypesComplianceStats unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TypesComplianceStats
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.types_compliance_stats.TypesComplianceStats()  # noqa: E501
        if include_optional :
            return TypesComplianceStats(
                categories = [
                    openapi_client.models.types/compliance_category_stats.types.ComplianceCategoryStats(
                        failed = 56, 
                        name = '', 
                        total = 56, )
                    ], 
                daily = [
                    openapi_client.models.types/compliance_daily_stats.types.ComplianceDailyStats(
                        _id = '', 
                        distribution = openapi_client.models.vuln/distribution.vuln.Distribution(
                            critical = 56, 
                            high = 56, 
                            low = 56, 
                            medium = 56, 
                            total = 56, ), 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                ids = [
                    openapi_client.models.types/compliance_id_stats.types.ComplianceIDStats(
                        benchmark_id = '', 
                        category = '', 
                        description = '', 
                        failed = 56, 
                        id = 56, 
                        severity = '', 
                        template_title = '', 
                        total = 56, 
                        type = '[\"container\",\"image\",\"host_config\",\"daemon_config\",\"daemon_config_files\",\"security_operations\",\"k8s_master\",\"k8s_worker\",\"k8s_federation\",\"linux\",\"windows\",\"istio\",\"aws\",\"serverless\",\"custom\",\"docker_stig\"]', )
                    ], 
                rules = [
                    openapi_client.models.types/rule_compliance_stats.types.RuleComplianceStats(
                        failed = 56, 
                        name = '', 
                        policy_type = '[\"docker\",\"containerVulnerability\",\"containerCompliance\",\"ciImagesVulnerability\",\"ciImagesCompliance\",\"hostVulnerability\",\"hostCompliance\",\"vmVulnerability\",\"vmCompliance\",\"serverlessCompliance\",\"ciServerlessCompliance\",\"serverlessVulnerability\",\"ciServerlessVulnerability\",\"containerRuntime\",\"appEmbeddedRuntime\",\"containerAppFirewall\",\"hostAppFirewall\",\"appEmbeddedAppFirewall\",\"serverlessAppFirewall\",\"networkFirewall\",\"secrets\",\"hostRuntime\",\"serverlessRuntime\",\"kubernetesAudit\",\"trust\",\"cloud\",\"admission\",\"codeRepoVulnerability\",\"ciCodeRepoVulnerability\",\"codeRepoCompliance\",\"ciCodeRepoCompliance\"]', 
                        total = 56, )
                    ], 
                templates = [
                    openapi_client.models.types/compliance_template_stats.types.ComplianceTemplateStats(
                        failed = 56, 
                        name = '[\"PCI\",\"HIPAA\",\"NIST SP 800-190\",\"GDPR\",\"DISA STIG\"]', 
                        total = 56, )
                    ]
            )
        else :
            return TypesComplianceStats(
        )

    def testTypesComplianceStats(self):
        """Test TypesComplianceStats"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
