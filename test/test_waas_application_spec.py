# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.waas_application_spec import WaasApplicationSpec  # noqa: E501
from openapi_client.rest import ApiException

class TestWaasApplicationSpec(unittest.TestCase):
    """WaasApplicationSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test WaasApplicationSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.waas_application_spec.WaasApplicationSpec()  # noqa: E501
        if include_optional :
            return WaasApplicationSpec(
                api_spec = openapi_client.models.waas/api_spec.waas.APISpec(
                    description = '', 
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    endpoints = [
                        openapi_client.models.waas/endpoint.waas.Endpoint(
                            base_path = '', 
                            exposed_port = 56, 
                            host = '', 
                            http2 = True, 
                            internal_port = 56, 
                            tls = True, )
                        ], 
                    fallback_effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    paths = [
                        openapi_client.models.waas/path.waas.Path(
                            methods = [
                                openapi_client.models.waas/method.waas.Method(
                                    method = '', 
                                    parameters = [
                                        openapi_client.models.waas/param.waas.Param(
                                            allow_empty_value = True, 
                                            array = True, 
                                            explode = True, 
                                            location = '[\"path\",\"query\",\"cookie\",\"header\",\"body\",\"json\",\"formData\",\"multipart\"]', 
                                            max = 1.337, 
                                            min = 1.337, 
                                            name = '', 
                                            required = True, 
                                            style = '[\"simple\",\"spaceDelimited\",\"tabDelimited\",\"pipeDelimited\",\"form\",\"matrix\",\"label\"]', 
                                            type = '[\"integer\",\"number\",\"string\",\"boolean\",\"array\",\"object\"]', )
                                        ], )
                                ], 
                            path = '', )
                        ], 
                    skip_learning = True, ), 
                app_id = '', 
                attack_tools = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                ban_duration_minutes = 56, 
                body = openapi_client.models.waas/body_config.waas.BodyConfig(
                    inspection_size_bytes = 56, 
                    skip = True, ), 
                bot_protection_spec = ERROR_TO_EXAMPLE_VALUE, 
                certificate = openapi_client.models.common/secret.common.Secret(
                    encrypted = '', 
                    plain = '', ), 
                clickjacking_enabled = True, 
                cmdi = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                code_injection = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                csrf_enabled = True, 
                custom_block_response = openapi_client.models.waas/custom_block_response_config.waas.CustomBlockResponseConfig(
                    body = '', 
                    code = 56, 
                    enabled = True, ), 
                custom_rules = [
                    openapi_client.models.customrules/ref.customrules.Ref(
                        _id = 56, 
                        action = '[\"audit\",\"incident\"]', 
                        effect = '[\"block\",\"prevent\",\"alert\",\"allow\",\"ban\",\"disable\"]', )
                    ], 
                dos_config = openapi_client.models.waas/do_s_config.waas.DoSConfig(
                    alert = openapi_client.models.waas/do_s_rates.waas.DoSRates(
                        average = 56, 
                        burst = 56, ), 
                    ban = openapi_client.models.waas/do_s_rates.waas.DoSRates(
                        average = 56, 
                        burst = 56, ), 
                    enabled = True, 
                    excluded_network_lists = [
                        ''
                        ], 
                    match_conditions = [
                        openapi_client.models.waas/do_s_match_condition.waas.DoSMatchCondition(
                            file_types = [
                                ''
                                ], 
                            methods = [
                                ''
                                ], 
                            response_code_ranges = [
                                openapi_client.models.waas/status_code_range.waas.StatusCodeRange(
                                    end = 56, 
                                    start = 56, )
                                ], )
                        ], 
                    track_session = True, ), 
                header_specs = [
                    openapi_client.models.waas/header_spec.waas.HeaderSpec(
                        allow = True, 
                        effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                        name = '', 
                        required = True, 
                        values = [
                            ''
                            ], )
                    ], 
                intel_gathering = openapi_client.models.waas/intel_gathering_config.waas.IntelGatheringConfig(
                    info_leakage_effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    remove_fingerprints_enabled = True, ), 
                lfi = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                malformed_req = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                malicious_upload = openapi_client.models.waas/malicious_upload_config.waas.MaliciousUploadConfig(
                    allowed_extensions = [
                        ''
                        ], 
                    allowed_file_types = [
                        '[\"pdf\",\"officeLegacy\",\"officeOoxml\",\"odf\",\"jpeg\",\"png\",\"gif\",\"bmp\",\"ico\",\"avi\",\"mp4\",\"aac\",\"mp3\",\"wav\",\"zip\",\"gzip\",\"rar\",\"7zip\"]'
                        ], 
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', ), 
                network_controls = openapi_client.models.waas/network_controls.waas.NetworkControls(
                    advanced_protection_effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    countries = openapi_client.models.waas/access_controls.waas.AccessControls(
                        alert = [
                            ''
                            ], 
                        allow = [
                            ''
                            ], 
                        allow_mode = True, 
                        enabled = True, 
                        fallback_effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                        prevent = [
                            ''
                            ], ), 
                    exception_subnets = [
                        ''
                        ], 
                    subnets = openapi_client.models.waas/access_controls.waas.AccessControls(
                        allow_mode = True, 
                        enabled = True, ), ), 
                remote_host_forwarding = openapi_client.models.waas/remote_host_forwarding_config.waas.RemoteHostForwardingConfig(
                    enabled = True, 
                    target = '', ), 
                session_cookie_ban = True, 
                session_cookie_enabled = True, 
                shellshock = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                sqli = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], ), 
                xss = openapi_client.models.waas/protection_config.waas.ProtectionConfig(
                    effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                    exception_fields = [
                        openapi_client.models.waas/exception_field.waas.ExceptionField(
                            key = '', 
                            location = '[\"query\",\"cookie\",\"UserAgentHeader\",\"header\",\"body\",\"XMLPath\",\"JSONPath\"]', )
                        ], )
            )
        else :
            return WaasApplicationSpec(
        )

    def testWaasApplicationSpec(self):
        """Test WaasApplicationSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
