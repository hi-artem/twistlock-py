# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.shared_app_firewall_audit import SharedAppFirewallAudit  # noqa: E501
from openapi_client.rest import ApiException

class TestSharedAppFirewallAudit(unittest.TestCase):
    """SharedAppFirewallAudit unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SharedAppFirewallAudit
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.shared_app_firewall_audit.SharedAppFirewallAudit()  # noqa: E501
        if include_optional :
            return SharedAppFirewallAudit(
                id = '', 
                account_id = '', 
                app_id = '', 
                attack_techniques = [
                    '[\"exploitationForPrivilegeEscalation\",\"exploitPublicFacingApplication\",\"applicationExploitRCE\",\"networkServiceScanning\",\"endpointDenialOfService\",\"exfiltrationGeneral\",\"systemNetworkConfigurationDiscovery\",\"unsecuredCredentials\",\"credentialDumping\",\"systemInformationDiscovery\",\"systemNetworkConnectionDiscovery\",\"systemUserDiscovery\",\"accountDiscovery\",\"cloudInstanceMetadataAPI\",\"accessKubeletMainAPI\",\"queryKubeletReadonlyAPI\",\"accessKubernetesAPIServer\",\"softwareDeploymentTools\",\"ingressToolTransfer\",\"lateralToolTransfer\",\"commandAndControlGeneral\",\"resourceHijacking\",\"manInTheMiddle\",\"nativeBinaryExecution\",\"foreignBinaryExecution\",\"createAccount\",\"accountManipulation\",\"abuseElevationControlMechanisms\",\"supplyChainCompromise\",\"obfuscatedFiles\",\"hijackExecutionFlow\",\"impairDefences\",\"scheduledTaskJob\",\"exploitationOfRemoteServices\",\"eventTriggeredExecution\",\"accountAccessRemoval\",\"privilegedContainer\",\"writableVolumes\",\"execIntoContainer\",\"softwareDiscovery\",\"createContainer\",\"kubernetesSecrets\",\"fileAndDirectoryDiscovery\",\"masquerading\",\"webShell\",\"compileAfterDelivery\"]'
                    ], 
                cluster = '', 
                collections = [
                    ''
                    ], 
                connecting_ips = [
                    ''
                    ], 
                container_id = '', 
                container_name = '', 
                count = 56, 
                country = '', 
                effect = '[\"ban\",\"prevent\",\"alert\",\"allow\",\"disable\",\"reCAPTCHA\"]', 
                fqdn = '', 
                function = '', 
                function_id = '', 
                host = True, 
                hostname = '', 
                image_name = '', 
                labels = {
                    'key' : ''
                    }, 
                method = '', 
                msg = '', 
                ns = [
                    ''
                    ], 
                os = '', 
                profile_id = '', 
                protection = '[\"firewall\",\"dos\",\"bot\",\"custom\",\"accessControl\"]', 
                raw_event = '', 
                region = '', 
                request_header_names = [
                    ''
                    ], 
                request_headers = '', 
                request_host = '', 
                request_id = '', 
                resource = openapi_client.models.common/runtime_resource.common.RuntimeResource(
                    account_ids = [
                        ''
                        ], 
                    app_ids = [
                        ''
                        ], 
                    clusters = [
                        ''
                        ], 
                    code_repos = [
                        ''
                        ], 
                    containers = [
                        ''
                        ], 
                    functions = [
                        ''
                        ], 
                    hosts = [
                        ''
                        ], 
                    images = [
                        ''
                        ], 
                    labels = [
                        ''
                        ], 
                    namespaces = [
                        ''
                        ], ), 
                response_header_names = [
                    ''
                    ], 
                rule_app_id = '', 
                rule_name = '', 
                runtime = '[\"python\",\"python2.7\",\"python3.6\",\"python3.7\",\"python3.8\",\"nodejs10.x\",\"dotnetcore2.1\",\"java8\"]', 
                status_code = 56, 
                subnet = '', 
                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                type = '[\"xss\",\"sqli\",\"cmdi\",\"lfi\",\"codeInjection\",\"deniedIP\",\"deniedCountry\",\"header\",\"violationsExceeded\",\"attackTools\",\"shellshock\",\"disallowedFile\",\"malformedRequest\",\"informationLeak\",\"unexpectedAPI\",\"dos\",\"searchEngineCrawler\",\"businessAnalyticsBot\",\"educationalBot\",\"newsBot\",\"financialBot\",\"contentFeedClient\",\"archivingBot\",\"careerSearchBot\",\"mediaSearchBot\",\"genericBot\",\"webAutomationTool\",\"webScraper\",\"apiLibrary\",\"httpLibrary\",\"sessionValidation\",\"javascriptTimeout\",\"missingCookie\",\"browserImpersonation\",\"botImpersonation\",\"requestAnomalies\",\"userDefinedBot\",\"recaptchaRequired\",\"recaptchaVerificationFailed\",\"customRule\"]', 
                url = '', 
                url_path = '', 
                url_query = '', 
                user_agent_header = '', 
                version = ''
            )
        else :
            return SharedAppFirewallAudit(
        )

    def testSharedAppFirewallAudit(self):
        """Test SharedAppFirewallAudit"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
