# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.runtime_container_policy_rule import RuntimeContainerPolicyRule  # noqa: E501
from openapi_client.rest import ApiException

class TestRuntimeContainerPolicyRule(unittest.TestCase):
    """RuntimeContainerPolicyRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RuntimeContainerPolicyRule
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.runtime_container_policy_rule.RuntimeContainerPolicyRule()  # noqa: E501
        if include_optional :
            return RuntimeContainerPolicyRule(
                advanced_protection = True, 
                cloud_metadata_enforcement = True, 
                collections = [
                    openapi_client.models.collection/collection.collection.Collection(
                        account_ids = [
                            ''
                            ], 
                        app_ids = [
                            ''
                            ], 
                        clusters = [
                            ''
                            ], 
                        code_repos = [
                            ''
                            ], 
                        color = '', 
                        containers = [
                            ''
                            ], 
                        description = '', 
                        functions = [
                            ''
                            ], 
                        hosts = [
                            ''
                            ], 
                        images = [
                            ''
                            ], 
                        labels = [
                            ''
                            ], 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        namespaces = [
                            ''
                            ], 
                        owner = '', 
                        prisma = True, 
                        system = True, )
                    ], 
                custom_rules = [
                    openapi_client.models.customrules/ref.customrules.Ref(
                        _id = 56, 
                        action = '[\"audit\",\"incident\"]', 
                        effect = '[\"block\",\"prevent\",\"alert\",\"allow\",\"ban\",\"disable\"]', )
                    ], 
                disabled = True, 
                dns = openapi_client.models.runtime/dns_rule.runtime.DNSRule(
                    blacklist = [
                        ''
                        ], 
                    effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                    whitelist = [
                        ''
                        ], ), 
                filesystem = openapi_client.models.runtime/filesystem_rule.runtime.FilesystemRule(
                    backdoor_files = True, 
                    blacklist = [
                        ''
                        ], 
                    check_new_files = True, 
                    effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                    skip_encrypted_binaries = True, 
                    suspicious_elf_headers = True, 
                    whitelist = [
                        ''
                        ], ), 
                kubernetes_enforcement = True, 
                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                name = '', 
                network = openapi_client.models.runtime/container_network_rule.runtime.ContainerNetworkRule(
                    blacklist_ips = [
                        ''
                        ], 
                    blacklist_listening_ports = [
                        openapi_client.models.common/port_range.common.PortRange(
                            deny = True, 
                            end = 56, 
                            start = 56, )
                        ], 
                    blacklist_outbound_ports = [
                        openapi_client.models.common/port_range.common.PortRange(
                            deny = True, 
                            end = 56, 
                            start = 56, )
                        ], 
                    detect_port_scan = True, 
                    effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                    skip_modified_proc = True, 
                    skip_raw_sockets = True, 
                    whitelist_ips = [
                        ''
                        ], 
                    whitelist_listening_ports = [
                        openapi_client.models.common/port_range.common.PortRange(
                            deny = True, 
                            end = 56, 
                            start = 56, )
                        ], 
                    whitelist_outbound_ports = [
                        openapi_client.models.common/port_range.common.PortRange(
                            deny = True, 
                            end = 56, 
                            start = 56, )
                        ], ), 
                notes = '', 
                owner = '', 
                previous_name = '', 
                processes = openapi_client.models.runtime/processes_rule.runtime.ProcessesRule(
                    blacklist = [
                        ''
                        ], 
                    block_all_binaries = True, 
                    check_crypto_miners = True, 
                    check_lateral_movement = True, 
                    check_new_binaries = True, 
                    check_parent_child = True, 
                    check_suid_binaries = True, 
                    effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                    skip_modified = True, 
                    skip_reverse_shell = True, 
                    whitelist = [
                        ''
                        ], ), 
                wild_fire_analysis = '[\"block\",\"prevent\",\"alert\",\"disable\"]'
            )
        else :
            return RuntimeContainerPolicyRule(
        )

    def testRuntimeContainerPolicyRule(self):
        """Test RuntimeContainerPolicyRule"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
