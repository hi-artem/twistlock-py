# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.shared_policy import SharedPolicy  # noqa: E501
from openapi_client.rest import ApiException

class TestSharedPolicy(unittest.TestCase):
    """SharedPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SharedPolicy
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.shared_policy.SharedPolicy()  # noqa: E501
        if include_optional :
            return SharedPolicy(
                id = '', 
                policy_type = '[\"docker\",\"containerVulnerability\",\"containerCompliance\",\"ciImagesVulnerability\",\"ciImagesCompliance\",\"hostVulnerability\",\"hostCompliance\",\"vmVulnerability\",\"vmCompliance\",\"serverlessCompliance\",\"ciServerlessCompliance\",\"serverlessVulnerability\",\"ciServerlessVulnerability\",\"containerRuntime\",\"appEmbeddedRuntime\",\"containerAppFirewall\",\"hostAppFirewall\",\"appEmbeddedAppFirewall\",\"serverlessAppFirewall\",\"networkFirewall\",\"secrets\",\"hostRuntime\",\"serverlessRuntime\",\"kubernetesAudit\",\"trust\",\"cloud\",\"admission\",\"codeRepoVulnerability\",\"ciCodeRepoVulnerability\",\"codeRepoCompliance\",\"ciCodeRepoCompliance\"]', 
                rules = [
                    openapi_client.models.shared/policy_rule.shared.PolicyRule(
                        action = [
                            ''
                            ], 
                        alert_threshold = openapi_client.models.shared/alert_threshold.shared.AlertThreshold(
                            disabled = True, 
                            value = 1.337, ), 
                        all_compliance = True, 
                        audit_allowed = True, 
                        block_msg = '', 
                        block_threshold = openapi_client.models.shared/block_threshold.shared.BlockThreshold(
                            enabled = True, 
                            value = 1.337, ), 
                        collections = [
                            openapi_client.models.collection/collection.collection.Collection(
                                account_ids = [
                                    ''
                                    ], 
                                app_ids = [
                                    ''
                                    ], 
                                clusters = [
                                    ''
                                    ], 
                                code_repos = [
                                    ''
                                    ], 
                                color = '', 
                                containers = [
                                    ''
                                    ], 
                                description = '', 
                                functions = [
                                    ''
                                    ], 
                                hosts = [
                                    ''
                                    ], 
                                images = [
                                    ''
                                    ], 
                                labels = [
                                    ''
                                    ], 
                                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                name = '', 
                                namespaces = [
                                    ''
                                    ], 
                                owner = '', 
                                prisma = True, 
                                system = True, )
                            ], 
                        condition = openapi_client.models.shared/conditions.shared.Conditions(
                            device = '', 
                            readonly = True, 
                            vulnerabilities = [
                                openapi_client.models.vuln/condition.vuln.Condition(
                                    block = True, 
                                    id = 56, )
                                ], ), 
                        cve_rules = [
                            openapi_client.models.shared/cve_rule.shared.CVERule(
                                description = '', 
                                effect = '[\"ignore\",\"alert\",\"block\"]', 
                                expiration = openapi_client.models.vuln/expiration_date.vuln.ExpirationDate(
                                    date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    enabled = True, ), 
                                id = '', )
                            ], 
                        disabled = True, 
                        effect = '[\"allow\",\"deny\",\"block\",\"alert\"]', 
                        grace_days = 56, 
                        group = [
                            ''
                            ], 
                        license = openapi_client.models.shared/license_config.shared.LicenseConfig(
                            critical = [
                                ''
                                ], 
                            high = [
                                ''
                                ], 
                            low = [
                                ''
                                ], 
                            medium = [
                                ''
                                ], ), 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        notes = '', 
                        only_fixed = True, 
                        owner = '', 
                        previous_name = '', 
                        principal = [
                            ''
                            ], 
                        tags = [
                            openapi_client.models.shared/tag_rule.shared.TagRule(
                                description = '', 
                                name = '', )
                            ], 
                        verbose = True, )
                    ]
            )
        else :
            return SharedPolicy(
        )

    def testSharedPolicy(self):
        """Test SharedPolicy"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
