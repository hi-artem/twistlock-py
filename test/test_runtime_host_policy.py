# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.runtime_host_policy import RuntimeHostPolicy  # noqa: E501
from openapi_client.rest import ApiException

class TestRuntimeHostPolicy(unittest.TestCase):
    """RuntimeHostPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RuntimeHostPolicy
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.runtime_host_policy.RuntimeHostPolicy()  # noqa: E501
        if include_optional :
            return RuntimeHostPolicy(
                id = '', 
                owner = '', 
                rules = [
                    openapi_client.models.runtime/host_policy_rule.runtime.HostPolicyRule(
                        anti_malware = openapi_client.models.runtime/anti_malware_rule.runtime.AntiMalwareRule(
                            allowed_processes = [
                                ''
                                ], 
                            crypto_miner = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            custom_feed = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            denied_processes = openapi_client.models.runtime/deny_list_rule.runtime.DenyListRule(
                                effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                                paths = [
                                    ''
                                    ], ), 
                            detect_compiler_generated_binary = True, 
                            encrypted_binaries = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            execution_flow_hijack = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            intelligence_feed = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            reverse_shell = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            service_unknown_origin_binary = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            skip_ssh_tracking = True, 
                            suspicious_elf_headers = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            temp_fs_proc = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            user_unknown_origin_binary = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            web_shell = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                            wild_fire_analysis = '[\"block\",\"prevent\",\"alert\",\"disable\"]', ), 
                        collections = [
                            openapi_client.models.collection/collection.collection.Collection(
                                account_ids = [
                                    ''
                                    ], 
                                app_ids = [
                                    ''
                                    ], 
                                clusters = [
                                    ''
                                    ], 
                                code_repos = [
                                    ''
                                    ], 
                                color = '', 
                                containers = [
                                    ''
                                    ], 
                                description = '', 
                                functions = [
                                    ''
                                    ], 
                                hosts = [
                                    ''
                                    ], 
                                images = [
                                    ''
                                    ], 
                                labels = [
                                    ''
                                    ], 
                                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                name = '', 
                                namespaces = [
                                    ''
                                    ], 
                                owner = '', 
                                prisma = True, 
                                system = True, )
                            ], 
                        custom_rules = [
                            openapi_client.models.customrules/ref.customrules.Ref(
                                _id = 56, 
                                action = '[\"audit\",\"incident\"]', )
                            ], 
                        disabled = True, 
                        dns = openapi_client.models.runtime/host_dns_rule.runtime.HostDNSRule(
                            allow = [
                                ''
                                ], 
                            deny = [
                                ''
                                ], 
                            deny_list_effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', ), 
                        file_integrity_rules = [
                            openapi_client.models.runtime/file_integrity_rule.runtime.FileIntegrityRule(
                                dir = True, 
                                exclusions = [
                                    ''
                                    ], 
                                metadata = True, 
                                path = '', 
                                proc_whitelist = [
                                    ''
                                    ], 
                                read = True, 
                                recursive = True, 
                                write = True, )
                            ], 
                        forensic = openapi_client.models.common/host_forensic_settings.common.HostForensicSettings(
                            activities_disabled = True, 
                            docker_enabled = True, 
                            readonly_docker_enabled = True, 
                            service_activities_enabled = True, 
                            sshd_enabled = True, 
                            sudo_enabled = True, ), 
                        log_inspection_rules = [
                            openapi_client.models.runtime/log_inspection_rule.runtime.LogInspectionRule(
                                path = '', 
                                regex = [
                                    ''
                                    ], )
                            ], 
                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        name = '', 
                        network = openapi_client.models.runtime/host_network_rule.runtime.HostNetworkRule(
                            allowed_outbound_ips = [
                                ''
                                ], 
                            denied_listening_ports = [
                                openapi_client.models.common/port_range.common.PortRange(
                                    end = 56, 
                                    start = 56, )
                                ], 
                            denied_outbound_ips = [
                                ''
                                ], 
                            denied_outbound_ports = [
                                openapi_client.models.common/port_range.common.PortRange(
                                    end = 56, 
                                    start = 56, )
                                ], ), 
                        notes = '', 
                        owner = '', 
                        previous_name = '', )
                    ]
            )
        else :
            return RuntimeHostPolicy(
        )

    def testRuntimeHostPolicy(self):
        """Test RuntimeHostPolicy"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
