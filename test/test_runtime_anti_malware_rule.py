# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.runtime_anti_malware_rule import RuntimeAntiMalwareRule  # noqa: E501
from openapi_client.rest import ApiException

class TestRuntimeAntiMalwareRule(unittest.TestCase):
    """RuntimeAntiMalwareRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RuntimeAntiMalwareRule
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.runtime_anti_malware_rule.RuntimeAntiMalwareRule()  # noqa: E501
        if include_optional :
            return RuntimeAntiMalwareRule(
                allowed_processes = [
                    ''
                    ], 
                crypto_miner = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                custom_feed = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                denied_processes = openapi_client.models.runtime/deny_list_rule.runtime.DenyListRule(
                    effect = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                    paths = [
                        ''
                        ], ), 
                detect_compiler_generated_binary = True, 
                encrypted_binaries = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                execution_flow_hijack = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                intelligence_feed = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                reverse_shell = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                service_unknown_origin_binary = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                skip_ssh_tracking = True, 
                suspicious_elf_headers = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                temp_fs_proc = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                user_unknown_origin_binary = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                web_shell = '[\"block\",\"prevent\",\"alert\",\"disable\"]', 
                wild_fire_analysis = '[\"block\",\"prevent\",\"alert\",\"disable\"]'
            )
        else :
            return RuntimeAntiMalwareRule(
        )

    def testRuntimeAntiMalwareRule(self):
        """Test RuntimeAntiMalwareRule"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
