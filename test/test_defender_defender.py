# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.defender_defender import DefenderDefender  # noqa: E501
from openapi_client.rest import ApiException

class TestDefenderDefender(unittest.TestCase):
    """DefenderDefender unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DefenderDefender
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.defender_defender.DefenderDefender()  # noqa: E501
        if include_optional :
            return DefenderDefender(
                category = '[\"container\",\"host\",\"serverless\",\"appEmbedded\"]', 
                certificate_expiration = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                cloud_metadata = openapi_client.models.common/cloud_metadata.common.CloudMetadata(
                    account_id = '', 
                    image = '', 
                    labels = [
                        openapi_client.models.common/external_label.common.ExternalLabel(
                            key = '', 
                            source_name = '', 
                            source_type = '[\"namespace\",\"deployment\",\"aws\",\"azure\",\"gcp\"]', 
                            timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            value = '', )
                        ], 
                    name = '', 
                    provider = '[\"aws\",\"azure\",\"gcp\",\"alibaba\",\"others\"]', 
                    region = '', 
                    resource_id = '', 
                    type = '', ), 
                cluster = '', 
                cluster_id = '', 
                collections = [
                    ''
                    ], 
                compatible_version = True, 
                connected = True, 
                features = openapi_client.models.defender/features.defender.Features(
                    cluster_monitoring = True, 
                    proxy_listener_type = '[\"none\",\"tcp\",\"default\"]', ), 
                firewall_protection = openapi_client.models.waas/protection_status.waas.ProtectionStatus(
                    enabled = True, 
                    supported = True, ), 
                fqdn = '', 
                hostname = '', 
                last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                port = 56, 
                proxy = openapi_client.models.common/proxy_settings.common.ProxySettings(
                    ca = '', 
                    http_proxy = '', 
                    no_proxy = '', 
                    password = openapi_client.models.common/secret.common.Secret(
                        encrypted = '', 
                        plain = '', ), 
                    user = '', ), 
                remote_logging_supported = True, 
                remote_mgmt_supported = True, 
                status = openapi_client.models.defender/status.defender.Status(
                    app_firewall = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    container = openapi_client.models.defender/scan_status.defender.ScanStatus(
                        completed = True, 
                        errors = [
                            ''
                            ], 
                        hostname = '', 
                        scan_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scanning = True, 
                        selective = True, ), 
                    container_network_firewall = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    features = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    filesystem = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    host_custom_compliance = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    host_network_firewall = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    image = openapi_client.models.defender/scan_status.defender.ScanStatus(
                        completed = True, 
                        hostname = '', 
                        scan_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scanning = True, 
                        selective = True, ), 
                    last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    network = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    process = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    registry = openapi_client.models.defender/scan_status.defender.ScanStatus(
                        completed = True, 
                        hostname = '', 
                        scan_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scanning = True, 
                        selective = True, ), 
                    runc = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    runtime = openapi_client.models.defender/feature_status.defender.FeatureStatus(
                        enabled = True, 
                        err,omiztempty = '', 
                        hostname = '', ), 
                    tas_droplets = openapi_client.models.defender/scan_status.defender.ScanStatus(
                        completed = True, 
                        hostname = '', 
                        scan_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        scanning = True, 
                        selective = True, ), 
                    upgrade = openapi_client.models.defender/upgrade_status.defender.UpgradeStatus(
                        err = '', 
                        hostname = '', 
                        last_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        progress = 56, ), ), 
                system_info = openapi_client.models.defender/system_info.defender.SystemInfo(
                    cpu_count = 56, 
                    free_disk_space_gb = 56, 
                    kernel_version = '', 
                    memory_gb = 1.337, 
                    total_disk_space_gb = 56, ), 
                tas_cluster_id = '', 
                type = '[\"none\",\"docker\",\"dockerWindows\",\"swarm\",\"daemonset\",\"serverLinux\",\"serverWindows\",\"cri\",\"fargate\",\"appEmbedded\",\"tas\",\"serverless\",\"ecs\"]', 
                version = ''
            )
        else :
            return DefenderDefender(
        )

    def testDefenderDefender(self):
        """Test DefenderDefender"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
