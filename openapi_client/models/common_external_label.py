# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CommonExternalLabel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'source_name': 'str',
        'source_type': 'CommonExternalLabelSourceType',
        'timestamp': 'datetime',
        'value': 'str'
    }

    attribute_map = {
        'key': 'key',
        'source_name': 'sourceName',
        'source_type': 'sourceType',
        'timestamp': 'timestamp',
        'value': 'value'
    }

    def __init__(self, key=None, source_name=None, source_type=None, timestamp=None, value=None, local_vars_configuration=None):  # noqa: E501
        """CommonExternalLabel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._source_name = None
        self._source_type = None
        self._timestamp = None
        self._value = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if source_name is not None:
            self.source_name = source_name
        if source_type is not None:
            self.source_type = source_type
        if timestamp is not None:
            self.timestamp = timestamp
        if value is not None:
            self.value = value

    @property
    def key(self):
        """Gets the key of this CommonExternalLabel.  # noqa: E501

        Label key.   # noqa: E501

        :return: The key of this CommonExternalLabel.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CommonExternalLabel.

        Label key.   # noqa: E501

        :param key: The key of this CommonExternalLabel.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def source_name(self):
        """Gets the source_name of this CommonExternalLabel.  # noqa: E501

        Source name (e.g., for a namespace, the source name can be 'twistlock').   # noqa: E501

        :return: The source_name of this CommonExternalLabel.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this CommonExternalLabel.

        Source name (e.g., for a namespace, the source name can be 'twistlock').   # noqa: E501

        :param source_name: The source_name of this CommonExternalLabel.  # noqa: E501
        :type source_name: str
        """

        self._source_name = source_name

    @property
    def source_type(self):
        """Gets the source_type of this CommonExternalLabel.  # noqa: E501


        :return: The source_type of this CommonExternalLabel.  # noqa: E501
        :rtype: CommonExternalLabelSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CommonExternalLabel.


        :param source_type: The source_type of this CommonExternalLabel.  # noqa: E501
        :type source_type: CommonExternalLabelSourceType
        """

        self._source_type = source_type

    @property
    def timestamp(self):
        """Gets the timestamp of this CommonExternalLabel.  # noqa: E501

        Time when the label was fetched.   # noqa: E501

        :return: The timestamp of this CommonExternalLabel.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this CommonExternalLabel.

        Time when the label was fetched.   # noqa: E501

        :param timestamp: The timestamp of this CommonExternalLabel.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this CommonExternalLabel.  # noqa: E501

        Value of the label.   # noqa: E501

        :return: The value of this CommonExternalLabel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CommonExternalLabel.

        Value of the label.   # noqa: E501

        :param value: The value of this CommonExternalLabel.  # noqa: E501
        :type value: str
        """

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonExternalLabel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonExternalLabel):
            return True

        return self.to_dict() != other.to_dict()
