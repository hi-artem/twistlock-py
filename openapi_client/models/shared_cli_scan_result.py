# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedCLIScanResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'list[str]',
        'build': 'str',
        'compliance_failure_summary': 'str',
        'entity_info': 'SharedImageScanResult',
        'job_name': 'str',
        '_pass': 'bool',
        'time': 'datetime',
        'version': 'str',
        'vuln_failure_summary': 'str'
    }

    attribute_map = {
        'id': '_id',
        'build': 'build',
        'compliance_failure_summary': 'complianceFailureSummary',
        'entity_info': 'entityInfo',
        'job_name': 'jobName',
        '_pass': 'pass',
        'time': 'time',
        'version': 'version',
        'vuln_failure_summary': 'vulnFailureSummary'
    }

    def __init__(self, id=None, build=None, compliance_failure_summary=None, entity_info=None, job_name=None, _pass=None, time=None, version=None, vuln_failure_summary=None, local_vars_configuration=None):  # noqa: E501
        """SharedCLIScanResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._build = None
        self._compliance_failure_summary = None
        self._entity_info = None
        self._job_name = None
        self.__pass = None
        self._time = None
        self._version = None
        self._vuln_failure_summary = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if build is not None:
            self.build = build
        if compliance_failure_summary is not None:
            self.compliance_failure_summary = compliance_failure_summary
        if entity_info is not None:
            self.entity_info = entity_info
        if job_name is not None:
            self.job_name = job_name
        if _pass is not None:
            self._pass = _pass
        if time is not None:
            self.time = time
        if version is not None:
            self.version = version
        if vuln_failure_summary is not None:
            self.vuln_failure_summary = vuln_failure_summary

    @property
    def id(self):
        """Gets the id of this SharedCLIScanResult.  # noqa: E501

        ID of the scan result.   # noqa: E501

        :return: The id of this SharedCLIScanResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedCLIScanResult.

        ID of the scan result.   # noqa: E501

        :param id: The id of this SharedCLIScanResult.  # noqa: E501
        :type id: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 12):
            raise ValueError("Invalid value for `id`, number of items must be less than or equal to `12`")  # noqa: E501

        self._id = id

    @property
    def build(self):
        """Gets the build of this SharedCLIScanResult.  # noqa: E501

        CI build.   # noqa: E501

        :return: The build of this SharedCLIScanResult.  # noqa: E501
        :rtype: str
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this SharedCLIScanResult.

        CI build.   # noqa: E501

        :param build: The build of this SharedCLIScanResult.  # noqa: E501
        :type build: str
        """

        self._build = build

    @property
    def compliance_failure_summary(self):
        """Gets the compliance_failure_summary of this SharedCLIScanResult.  # noqa: E501

        Scan compliance failure summary.   # noqa: E501

        :return: The compliance_failure_summary of this SharedCLIScanResult.  # noqa: E501
        :rtype: str
        """
        return self._compliance_failure_summary

    @compliance_failure_summary.setter
    def compliance_failure_summary(self, compliance_failure_summary):
        """Sets the compliance_failure_summary of this SharedCLIScanResult.

        Scan compliance failure summary.   # noqa: E501

        :param compliance_failure_summary: The compliance_failure_summary of this SharedCLIScanResult.  # noqa: E501
        :type compliance_failure_summary: str
        """

        self._compliance_failure_summary = compliance_failure_summary

    @property
    def entity_info(self):
        """Gets the entity_info of this SharedCLIScanResult.  # noqa: E501


        :return: The entity_info of this SharedCLIScanResult.  # noqa: E501
        :rtype: SharedImageScanResult
        """
        return self._entity_info

    @entity_info.setter
    def entity_info(self, entity_info):
        """Sets the entity_info of this SharedCLIScanResult.


        :param entity_info: The entity_info of this SharedCLIScanResult.  # noqa: E501
        :type entity_info: SharedImageScanResult
        """

        self._entity_info = entity_info

    @property
    def job_name(self):
        """Gets the job_name of this SharedCLIScanResult.  # noqa: E501

        CI job name.   # noqa: E501

        :return: The job_name of this SharedCLIScanResult.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this SharedCLIScanResult.

        CI job name.   # noqa: E501

        :param job_name: The job_name of this SharedCLIScanResult.  # noqa: E501
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def _pass(self):
        """Gets the _pass of this SharedCLIScanResult.  # noqa: E501

        Indicates if the scan passed (true) or failed (false).   # noqa: E501

        :return: The _pass of this SharedCLIScanResult.  # noqa: E501
        :rtype: bool
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this SharedCLIScanResult.

        Indicates if the scan passed (true) or failed (false).   # noqa: E501

        :param _pass: The _pass of this SharedCLIScanResult.  # noqa: E501
        :type _pass: bool
        """

        self.__pass = _pass

    @property
    def time(self):
        """Gets the time of this SharedCLIScanResult.  # noqa: E501

        Time of the scan.   # noqa: E501

        :return: The time of this SharedCLIScanResult.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedCLIScanResult.

        Time of the scan.   # noqa: E501

        :param time: The time of this SharedCLIScanResult.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def version(self):
        """Gets the version of this SharedCLIScanResult.  # noqa: E501

        Scanner version.   # noqa: E501

        :return: The version of this SharedCLIScanResult.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedCLIScanResult.

        Scanner version.   # noqa: E501

        :param version: The version of this SharedCLIScanResult.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def vuln_failure_summary(self):
        """Gets the vuln_failure_summary of this SharedCLIScanResult.  # noqa: E501

        Scan vulnerability failure summary.   # noqa: E501

        :return: The vuln_failure_summary of this SharedCLIScanResult.  # noqa: E501
        :rtype: str
        """
        return self._vuln_failure_summary

    @vuln_failure_summary.setter
    def vuln_failure_summary(self, vuln_failure_summary):
        """Sets the vuln_failure_summary of this SharedCLIScanResult.

        Scan vulnerability failure summary.   # noqa: E501

        :param vuln_failure_summary: The vuln_failure_summary of this SharedCLIScanResult.  # noqa: E501
        :type vuln_failure_summary: str
        """

        self._vuln_failure_summary = vuln_failure_summary

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedCLIScanResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedCLIScanResult):
            return True

        return self.to_dict() != other.to_dict()
