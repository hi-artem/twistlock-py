# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedLicense(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token': 'str',
        'contract_id': 'str',
        'contract_type': 'SharedLicenseContractType',
        'credits': 'int',
        'customer_id': 'str',
        'defender_details': 'list[SharedDefenderLicenseDetails]',
        'defenders': 'int',
        'expiration_date': 'datetime',
        'issue_date': 'datetime',
        'type': 'SharedLicenseTier',
        'workloads': 'int'
    }

    attribute_map = {
        'access_token': 'access_token',
        'contract_id': 'contract_id',
        'contract_type': 'contract_type',
        'credits': 'credits',
        'customer_id': 'customer_id',
        'defender_details': 'defender_details',
        'defenders': 'defenders',
        'expiration_date': 'expiration_date',
        'issue_date': 'issue_date',
        'type': 'type',
        'workloads': 'workloads'
    }

    def __init__(self, access_token=None, contract_id=None, contract_type=None, credits=None, customer_id=None, defender_details=None, defenders=None, expiration_date=None, issue_date=None, type=None, workloads=None, local_vars_configuration=None):  # noqa: E501
        """SharedLicense - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_token = None
        self._contract_id = None
        self._contract_type = None
        self._credits = None
        self._customer_id = None
        self._defender_details = None
        self._defenders = None
        self._expiration_date = None
        self._issue_date = None
        self._type = None
        self._workloads = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if contract_id is not None:
            self.contract_id = contract_id
        if contract_type is not None:
            self.contract_type = contract_type
        if credits is not None:
            self.credits = credits
        if customer_id is not None:
            self.customer_id = customer_id
        if defender_details is not None:
            self.defender_details = defender_details
        if defenders is not None:
            self.defenders = defenders
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if issue_date is not None:
            self.issue_date = issue_date
        if type is not None:
            self.type = type
        if workloads is not None:
            self.workloads = workloads

    @property
    def access_token(self):
        """Gets the access_token of this SharedLicense.  # noqa: E501

        AccessToken is the customer access token.   # noqa: E501

        :return: The access_token of this SharedLicense.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this SharedLicense.

        AccessToken is the customer access token.   # noqa: E501

        :param access_token: The access_token of this SharedLicense.  # noqa: E501
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def contract_id(self):
        """Gets the contract_id of this SharedLicense.  # noqa: E501

        ContractID is the customer contract ID.   # noqa: E501

        :return: The contract_id of this SharedLicense.  # noqa: E501
        :rtype: str
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this SharedLicense.

        ContractID is the customer contract ID.   # noqa: E501

        :param contract_id: The contract_id of this SharedLicense.  # noqa: E501
        :type contract_id: str
        """

        self._contract_id = contract_id

    @property
    def contract_type(self):
        """Gets the contract_type of this SharedLicense.  # noqa: E501


        :return: The contract_type of this SharedLicense.  # noqa: E501
        :rtype: SharedLicenseContractType
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this SharedLicense.


        :param contract_type: The contract_type of this SharedLicense.  # noqa: E501
        :type contract_type: SharedLicenseContractType
        """

        self._contract_type = contract_type

    @property
    def credits(self):
        """Gets the credits of this SharedLicense.  # noqa: E501

        Credits the total amount of credits purchased by the customer.   # noqa: E501

        :return: The credits of this SharedLicense.  # noqa: E501
        :rtype: int
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this SharedLicense.

        Credits the total amount of credits purchased by the customer.   # noqa: E501

        :param credits: The credits of this SharedLicense.  # noqa: E501
        :type credits: int
        """

        self._credits = credits

    @property
    def customer_id(self):
        """Gets the customer_id of this SharedLicense.  # noqa: E501

        CustomerID is the customer ID.   # noqa: E501

        :return: The customer_id of this SharedLicense.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SharedLicense.

        CustomerID is the customer ID.   # noqa: E501

        :param customer_id: The customer_id of this SharedLicense.  # noqa: E501
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def defender_details(self):
        """Gets the defender_details of this SharedLicense.  # noqa: E501

        DefenderDetails represents the defenders license details.   # noqa: E501

        :return: The defender_details of this SharedLicense.  # noqa: E501
        :rtype: list[SharedDefenderLicenseDetails]
        """
        return self._defender_details

    @defender_details.setter
    def defender_details(self, defender_details):
        """Sets the defender_details of this SharedLicense.

        DefenderDetails represents the defenders license details.   # noqa: E501

        :param defender_details: The defender_details of this SharedLicense.  # noqa: E501
        :type defender_details: list[SharedDefenderLicenseDetails]
        """

        self._defender_details = defender_details

    @property
    def defenders(self):
        """Gets the defenders of this SharedLicense.  # noqa: E501

        Deprecated: Defenders is the maximum number of defender allowed in this license. Use DefenderDetails field instead.   # noqa: E501

        :return: The defenders of this SharedLicense.  # noqa: E501
        :rtype: int
        """
        return self._defenders

    @defenders.setter
    def defenders(self, defenders):
        """Sets the defenders of this SharedLicense.

        Deprecated: Defenders is the maximum number of defender allowed in this license. Use DefenderDetails field instead.   # noqa: E501

        :param defenders: The defenders of this SharedLicense.  # noqa: E501
        :type defenders: int
        """

        self._defenders = defenders

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SharedLicense.  # noqa: E501

        ExpirationDate is the license expiration date.   # noqa: E501

        :return: The expiration_date of this SharedLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SharedLicense.

        ExpirationDate is the license expiration date.   # noqa: E501

        :param expiration_date: The expiration_date of this SharedLicense.  # noqa: E501
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def issue_date(self):
        """Gets the issue_date of this SharedLicense.  # noqa: E501

        IssueDate is the license issue date.   # noqa: E501

        :return: The issue_date of this SharedLicense.  # noqa: E501
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this SharedLicense.

        IssueDate is the license issue date.   # noqa: E501

        :param issue_date: The issue_date of this SharedLicense.  # noqa: E501
        :type issue_date: datetime
        """

        self._issue_date = issue_date

    @property
    def type(self):
        """Gets the type of this SharedLicense.  # noqa: E501


        :return: The type of this SharedLicense.  # noqa: E501
        :rtype: SharedLicenseTier
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedLicense.


        :param type: The type of this SharedLicense.  # noqa: E501
        :type type: SharedLicenseTier
        """

        self._type = type

    @property
    def workloads(self):
        """Gets the workloads of this SharedLicense.  # noqa: E501

        Deprecated: Workloads is the number of workloads per license kept for backward compatibility. Use Credits instead.   # noqa: E501

        :return: The workloads of this SharedLicense.  # noqa: E501
        :rtype: int
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """Sets the workloads of this SharedLicense.

        Deprecated: Workloads is the number of workloads per license kept for backward compatibility. Use Credits instead.   # noqa: E501

        :param workloads: The workloads of this SharedLicense.  # noqa: E501
        :type workloads: int
        """

        self._workloads = workloads

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedLicense):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedLicense):
            return True

        return self.to_dict() != other.to_dict()
