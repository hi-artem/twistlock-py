# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CommonHostForensicSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'activities_disabled': 'bool',
        'docker_enabled': 'bool',
        'readonly_docker_enabled': 'bool',
        'service_activities_enabled': 'bool',
        'sshd_enabled': 'bool',
        'sudo_enabled': 'bool'
    }

    attribute_map = {
        'activities_disabled': 'activitiesDisabled',
        'docker_enabled': 'dockerEnabled',
        'readonly_docker_enabled': 'readonlyDockerEnabled',
        'service_activities_enabled': 'serviceActivitiesEnabled',
        'sshd_enabled': 'sshdEnabled',
        'sudo_enabled': 'sudoEnabled'
    }

    def __init__(self, activities_disabled=None, docker_enabled=None, readonly_docker_enabled=None, service_activities_enabled=None, sshd_enabled=None, sudo_enabled=None, local_vars_configuration=None):  # noqa: E501
        """CommonHostForensicSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._activities_disabled = None
        self._docker_enabled = None
        self._readonly_docker_enabled = None
        self._service_activities_enabled = None
        self._sshd_enabled = None
        self._sudo_enabled = None
        self.discriminator = None

        if activities_disabled is not None:
            self.activities_disabled = activities_disabled
        if docker_enabled is not None:
            self.docker_enabled = docker_enabled
        if readonly_docker_enabled is not None:
            self.readonly_docker_enabled = readonly_docker_enabled
        if service_activities_enabled is not None:
            self.service_activities_enabled = service_activities_enabled
        if sshd_enabled is not None:
            self.sshd_enabled = sshd_enabled
        if sudo_enabled is not None:
            self.sudo_enabled = sudo_enabled

    @property
    def activities_disabled(self):
        """Gets the activities_disabled of this CommonHostForensicSettings.  # noqa: E501

        ActivitiesDisabled indicates if the host activity collection is enabled/disabled.   # noqa: E501

        :return: The activities_disabled of this CommonHostForensicSettings.  # noqa: E501
        :rtype: bool
        """
        return self._activities_disabled

    @activities_disabled.setter
    def activities_disabled(self, activities_disabled):
        """Sets the activities_disabled of this CommonHostForensicSettings.

        ActivitiesDisabled indicates if the host activity collection is enabled/disabled.   # noqa: E501

        :param activities_disabled: The activities_disabled of this CommonHostForensicSettings.  # noqa: E501
        :type activities_disabled: bool
        """

        self._activities_disabled = activities_disabled

    @property
    def docker_enabled(self):
        """Gets the docker_enabled of this CommonHostForensicSettings.  # noqa: E501

        DockerEnabled indicates whether docker commands are collected.   # noqa: E501

        :return: The docker_enabled of this CommonHostForensicSettings.  # noqa: E501
        :rtype: bool
        """
        return self._docker_enabled

    @docker_enabled.setter
    def docker_enabled(self, docker_enabled):
        """Sets the docker_enabled of this CommonHostForensicSettings.

        DockerEnabled indicates whether docker commands are collected.   # noqa: E501

        :param docker_enabled: The docker_enabled of this CommonHostForensicSettings.  # noqa: E501
        :type docker_enabled: bool
        """

        self._docker_enabled = docker_enabled

    @property
    def readonly_docker_enabled(self):
        """Gets the readonly_docker_enabled of this CommonHostForensicSettings.  # noqa: E501

        ReadonlyDockerEnabled indicates whether docker readonly commands are collected.   # noqa: E501

        :return: The readonly_docker_enabled of this CommonHostForensicSettings.  # noqa: E501
        :rtype: bool
        """
        return self._readonly_docker_enabled

    @readonly_docker_enabled.setter
    def readonly_docker_enabled(self, readonly_docker_enabled):
        """Sets the readonly_docker_enabled of this CommonHostForensicSettings.

        ReadonlyDockerEnabled indicates whether docker readonly commands are collected.   # noqa: E501

        :param readonly_docker_enabled: The readonly_docker_enabled of this CommonHostForensicSettings.  # noqa: E501
        :type readonly_docker_enabled: bool
        """

        self._readonly_docker_enabled = readonly_docker_enabled

    @property
    def service_activities_enabled(self):
        """Gets the service_activities_enabled of this CommonHostForensicSettings.  # noqa: E501

        ServiceActivitiesEnabled indicates whether activities from services are collected.   # noqa: E501

        :return: The service_activities_enabled of this CommonHostForensicSettings.  # noqa: E501
        :rtype: bool
        """
        return self._service_activities_enabled

    @service_activities_enabled.setter
    def service_activities_enabled(self, service_activities_enabled):
        """Sets the service_activities_enabled of this CommonHostForensicSettings.

        ServiceActivitiesEnabled indicates whether activities from services are collected.   # noqa: E501

        :param service_activities_enabled: The service_activities_enabled of this CommonHostForensicSettings.  # noqa: E501
        :type service_activities_enabled: bool
        """

        self._service_activities_enabled = service_activities_enabled

    @property
    def sshd_enabled(self):
        """Gets the sshd_enabled of this CommonHostForensicSettings.  # noqa: E501

        SshdEnabled indicates whether ssh commands are collected.   # noqa: E501

        :return: The sshd_enabled of this CommonHostForensicSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sshd_enabled

    @sshd_enabled.setter
    def sshd_enabled(self, sshd_enabled):
        """Sets the sshd_enabled of this CommonHostForensicSettings.

        SshdEnabled indicates whether ssh commands are collected.   # noqa: E501

        :param sshd_enabled: The sshd_enabled of this CommonHostForensicSettings.  # noqa: E501
        :type sshd_enabled: bool
        """

        self._sshd_enabled = sshd_enabled

    @property
    def sudo_enabled(self):
        """Gets the sudo_enabled of this CommonHostForensicSettings.  # noqa: E501

        SudoEnabled indicates whether sudo commands are collected.   # noqa: E501

        :return: The sudo_enabled of this CommonHostForensicSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sudo_enabled

    @sudo_enabled.setter
    def sudo_enabled(self, sudo_enabled):
        """Sets the sudo_enabled of this CommonHostForensicSettings.

        SudoEnabled indicates whether sudo commands are collected.   # noqa: E501

        :param sudo_enabled: The sudo_enabled of this CommonHostForensicSettings.  # noqa: E501
        :type sudo_enabled: bool
        """

        self._sudo_enabled = sudo_enabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonHostForensicSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonHostForensicSettings):
            return True

        return self.to_dict() != other.to_dict()
