# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedTrustedCertSignature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cn': 'str',
        'issuer': 'str',
        'not_after1': 'datetime',
        'not_before1': 'datetime',
        'raw': 'str'
    }

    attribute_map = {
        'cn': 'cn',
        'issuer': 'issuer',
        'not_after1': 'notAfter1',
        'not_before1': 'notBefore1',
        'raw': 'raw'
    }

    def __init__(self, cn=None, issuer=None, not_after1=None, not_before1=None, raw=None, local_vars_configuration=None):  # noqa: E501
        """SharedTrustedCertSignature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cn = None
        self._issuer = None
        self._not_after1 = None
        self._not_before1 = None
        self._raw = None
        self.discriminator = None

        if cn is not None:
            self.cn = cn
        if issuer is not None:
            self.issuer = issuer
        if not_after1 is not None:
            self.not_after1 = not_after1
        if not_before1 is not None:
            self.not_before1 = not_before1
        if raw is not None:
            self.raw = raw

    @property
    def cn(self):
        """Gets the cn of this SharedTrustedCertSignature.  # noqa: E501

        CN is the certificate common name.   # noqa: E501

        :return: The cn of this SharedTrustedCertSignature.  # noqa: E501
        :rtype: str
        """
        return self._cn

    @cn.setter
    def cn(self, cn):
        """Sets the cn of this SharedTrustedCertSignature.

        CN is the certificate common name.   # noqa: E501

        :param cn: The cn of this SharedTrustedCertSignature.  # noqa: E501
        :type cn: str
        """

        self._cn = cn

    @property
    def issuer(self):
        """Gets the issuer of this SharedTrustedCertSignature.  # noqa: E501

        Issuer is the certificate issuer.   # noqa: E501

        :return: The issuer of this SharedTrustedCertSignature.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SharedTrustedCertSignature.

        Issuer is the certificate issuer.   # noqa: E501

        :param issuer: The issuer of this SharedTrustedCertSignature.  # noqa: E501
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def not_after1(self):
        """Gets the not_after1 of this SharedTrustedCertSignature.  # noqa: E501

        NotAfter is the certificate expiration time Remark: the 1 suffix required for backward compatibility (previous values were strings and cannot be serialized).   # noqa: E501

        :return: The not_after1 of this SharedTrustedCertSignature.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after1

    @not_after1.setter
    def not_after1(self, not_after1):
        """Sets the not_after1 of this SharedTrustedCertSignature.

        NotAfter is the certificate expiration time Remark: the 1 suffix required for backward compatibility (previous values were strings and cannot be serialized).   # noqa: E501

        :param not_after1: The not_after1 of this SharedTrustedCertSignature.  # noqa: E501
        :type not_after1: datetime
        """

        self._not_after1 = not_after1

    @property
    def not_before1(self):
        """Gets the not_before1 of this SharedTrustedCertSignature.  # noqa: E501

        NotBefore is the minimum time for which the cert is valid Remark: the 1 suffix required for backward compatibility (previous values were strings and cannot be serialized).   # noqa: E501

        :return: The not_before1 of this SharedTrustedCertSignature.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before1

    @not_before1.setter
    def not_before1(self, not_before1):
        """Sets the not_before1 of this SharedTrustedCertSignature.

        NotBefore is the minimum time for which the cert is valid Remark: the 1 suffix required for backward compatibility (previous values were strings and cannot be serialized).   # noqa: E501

        :param not_before1: The not_before1 of this SharedTrustedCertSignature.  # noqa: E501
        :type not_before1: datetime
        """

        self._not_before1 = not_before1

    @property
    def raw(self):
        """Gets the raw of this SharedTrustedCertSignature.  # noqa: E501

        Raw is the raw certificate (in PEM format).   # noqa: E501

        :return: The raw of this SharedTrustedCertSignature.  # noqa: E501
        :rtype: str
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this SharedTrustedCertSignature.

        Raw is the raw certificate (in PEM format).   # noqa: E501

        :param raw: The raw of this SharedTrustedCertSignature.  # noqa: E501
        :type raw: str
        """

        self._raw = raw

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedTrustedCertSignature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedTrustedCertSignature):
            return True

        return self.to_dict() != other.to_dict()
