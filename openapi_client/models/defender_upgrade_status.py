# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class DefenderUpgradeStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'err': 'str',
        'hostname': 'str',
        'last_modified': 'datetime',
        'progress': 'int'
    }

    attribute_map = {
        'err': 'err',
        'hostname': 'hostname',
        'last_modified': 'lastModified',
        'progress': 'progress'
    }

    def __init__(self, err=None, hostname=None, last_modified=None, progress=None, local_vars_configuration=None):  # noqa: E501
        """DefenderUpgradeStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._err = None
        self._hostname = None
        self._last_modified = None
        self._progress = None
        self.discriminator = None

        if err is not None:
            self.err = err
        if hostname is not None:
            self.hostname = hostname
        if last_modified is not None:
            self.last_modified = last_modified
        if progress is not None:
            self.progress = progress

    @property
    def err(self):
        """Gets the err of this DefenderUpgradeStatus.  # noqa: E501

        Error string, if an error occurred.   # noqa: E501

        :return: The err of this DefenderUpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this DefenderUpgradeStatus.

        Error string, if an error occurred.   # noqa: E501

        :param err: The err of this DefenderUpgradeStatus.  # noqa: E501
        :type err: str
        """

        self._err = err

    @property
    def hostname(self):
        """Gets the hostname of this DefenderUpgradeStatus.  # noqa: E501

        Name of the host where Defender runs.   # noqa: E501

        :return: The hostname of this DefenderUpgradeStatus.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DefenderUpgradeStatus.

        Name of the host where Defender runs.   # noqa: E501

        :param hostname: The hostname of this DefenderUpgradeStatus.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def last_modified(self):
        """Gets the last_modified of this DefenderUpgradeStatus.  # noqa: E501

        Datetime of the last upgrade.   # noqa: E501

        :return: The last_modified of this DefenderUpgradeStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DefenderUpgradeStatus.

        Datetime of the last upgrade.   # noqa: E501

        :param last_modified: The last_modified of this DefenderUpgradeStatus.  # noqa: E501
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def progress(self):
        """Gets the progress of this DefenderUpgradeStatus.  # noqa: E501

        Upgrade progress.   # noqa: E501

        :return: The progress of this DefenderUpgradeStatus.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DefenderUpgradeStatus.

        Upgrade progress.   # noqa: E501

        :param progress: The progress of this DefenderUpgradeStatus.  # noqa: E501
        :type progress: int
        """

        self._progress = progress

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefenderUpgradeStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefenderUpgradeStatus):
            return True

        return self.to_dict() != other.to_dict()
