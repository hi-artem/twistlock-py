# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CodereposScanResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'collections': 'list[str]',
        'compliance_risk_score': 'float',
        'files': 'list[CodereposManifestFile]',
        '_pass': 'bool',
        'repository': 'CodereposRepository',
        'scan_time': 'datetime',
        'type': 'SharedCodeRepoProviderType',
        'update_time': 'datetime',
        'vuln_info': 'SharedImageInfo',
        'vulnerability_risk_score': 'float',
        'vulnerable_files': 'int'
    }

    attribute_map = {
        'id': '_id',
        'collections': 'collections',
        'compliance_risk_score': 'complianceRiskScore',
        'files': 'files',
        '_pass': 'pass',
        'repository': 'repository',
        'scan_time': 'scanTime',
        'type': 'type',
        'update_time': 'updateTime',
        'vuln_info': 'vulnInfo',
        'vulnerability_risk_score': 'vulnerabilityRiskScore',
        'vulnerable_files': 'vulnerableFiles'
    }

    def __init__(self, id=None, collections=None, compliance_risk_score=None, files=None, _pass=None, repository=None, scan_time=None, type=None, update_time=None, vuln_info=None, vulnerability_risk_score=None, vulnerable_files=None, local_vars_configuration=None):  # noqa: E501
        """CodereposScanResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._collections = None
        self._compliance_risk_score = None
        self._files = None
        self.__pass = None
        self._repository = None
        self._scan_time = None
        self._type = None
        self._update_time = None
        self._vuln_info = None
        self._vulnerability_risk_score = None
        self._vulnerable_files = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if collections is not None:
            self.collections = collections
        if compliance_risk_score is not None:
            self.compliance_risk_score = compliance_risk_score
        if files is not None:
            self.files = files
        if _pass is not None:
            self._pass = _pass
        if repository is not None:
            self.repository = repository
        if scan_time is not None:
            self.scan_time = scan_time
        if type is not None:
            self.type = type
        if update_time is not None:
            self.update_time = update_time
        if vuln_info is not None:
            self.vuln_info = vuln_info
        if vulnerability_risk_score is not None:
            self.vulnerability_risk_score = vulnerability_risk_score
        if vulnerable_files is not None:
            self.vulnerable_files = vulnerable_files

    @property
    def id(self):
        """Gets the id of this CodereposScanResult.  # noqa: E501

        Scan report ID in the database.   # noqa: E501

        :return: The id of this CodereposScanResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodereposScanResult.

        Scan report ID in the database.   # noqa: E501

        :param id: The id of this CodereposScanResult.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def collections(self):
        """Gets the collections of this CodereposScanResult.  # noqa: E501

        List of matching code repo collections.   # noqa: E501

        :return: The collections of this CodereposScanResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this CodereposScanResult.

        List of matching code repo collections.   # noqa: E501

        :param collections: The collections of this CodereposScanResult.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def compliance_risk_score(self):
        """Gets the compliance_risk_score of this CodereposScanResult.  # noqa: E501

        Code repository's compliance risk score. Used for sorting.   # noqa: E501

        :return: The compliance_risk_score of this CodereposScanResult.  # noqa: E501
        :rtype: float
        """
        return self._compliance_risk_score

    @compliance_risk_score.setter
    def compliance_risk_score(self, compliance_risk_score):
        """Sets the compliance_risk_score of this CodereposScanResult.

        Code repository's compliance risk score. Used for sorting.   # noqa: E501

        :param compliance_risk_score: The compliance_risk_score of this CodereposScanResult.  # noqa: E501
        :type compliance_risk_score: float
        """

        self._compliance_risk_score = compliance_risk_score

    @property
    def files(self):
        """Gets the files of this CodereposScanResult.  # noqa: E501

        Scan result for each manifest file in the repository.   # noqa: E501

        :return: The files of this CodereposScanResult.  # noqa: E501
        :rtype: list[CodereposManifestFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this CodereposScanResult.

        Scan result for each manifest file in the repository.   # noqa: E501

        :param files: The files of this CodereposScanResult.  # noqa: E501
        :type files: list[CodereposManifestFile]
        """

        self._files = files

    @property
    def _pass(self):
        """Gets the _pass of this CodereposScanResult.  # noqa: E501

        Indicates whether the scan passed or failed.   # noqa: E501

        :return: The _pass of this CodereposScanResult.  # noqa: E501
        :rtype: bool
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this CodereposScanResult.

        Indicates whether the scan passed or failed.   # noqa: E501

        :param _pass: The _pass of this CodereposScanResult.  # noqa: E501
        :type _pass: bool
        """

        self.__pass = _pass

    @property
    def repository(self):
        """Gets the repository of this CodereposScanResult.  # noqa: E501


        :return: The repository of this CodereposScanResult.  # noqa: E501
        :rtype: CodereposRepository
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CodereposScanResult.


        :param repository: The repository of this CodereposScanResult.  # noqa: E501
        :type repository: CodereposRepository
        """

        self._repository = repository

    @property
    def scan_time(self):
        """Gets the scan_time of this CodereposScanResult.  # noqa: E501

        Date/time when this repository was last scanned. The results might be from the DB and not updated if the repository contents have not changed.   # noqa: E501

        :return: The scan_time of this CodereposScanResult.  # noqa: E501
        :rtype: datetime
        """
        return self._scan_time

    @scan_time.setter
    def scan_time(self, scan_time):
        """Sets the scan_time of this CodereposScanResult.

        Date/time when this repository was last scanned. The results might be from the DB and not updated if the repository contents have not changed.   # noqa: E501

        :param scan_time: The scan_time of this CodereposScanResult.  # noqa: E501
        :type scan_time: datetime
        """

        self._scan_time = scan_time

    @property
    def type(self):
        """Gets the type of this CodereposScanResult.  # noqa: E501


        :return: The type of this CodereposScanResult.  # noqa: E501
        :rtype: SharedCodeRepoProviderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CodereposScanResult.


        :param type: The type of this CodereposScanResult.  # noqa: E501
        :type type: SharedCodeRepoProviderType
        """

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this CodereposScanResult.  # noqa: E501

        Date/time when this repository was last updated.   # noqa: E501

        :return: The update_time of this CodereposScanResult.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CodereposScanResult.

        Date/time when this repository was last updated.   # noqa: E501

        :param update_time: The update_time of this CodereposScanResult.  # noqa: E501
        :type update_time: datetime
        """

        self._update_time = update_time

    @property
    def vuln_info(self):
        """Gets the vuln_info of this CodereposScanResult.  # noqa: E501


        :return: The vuln_info of this CodereposScanResult.  # noqa: E501
        :rtype: SharedImageInfo
        """
        return self._vuln_info

    @vuln_info.setter
    def vuln_info(self, vuln_info):
        """Sets the vuln_info of this CodereposScanResult.


        :param vuln_info: The vuln_info of this CodereposScanResult.  # noqa: E501
        :type vuln_info: SharedImageInfo
        """

        self._vuln_info = vuln_info

    @property
    def vulnerability_risk_score(self):
        """Gets the vulnerability_risk_score of this CodereposScanResult.  # noqa: E501

        Code repository's CVE risk score. Used for sorting.   # noqa: E501

        :return: The vulnerability_risk_score of this CodereposScanResult.  # noqa: E501
        :rtype: float
        """
        return self._vulnerability_risk_score

    @vulnerability_risk_score.setter
    def vulnerability_risk_score(self, vulnerability_risk_score):
        """Sets the vulnerability_risk_score of this CodereposScanResult.

        Code repository's CVE risk score. Used for sorting.   # noqa: E501

        :param vulnerability_risk_score: The vulnerability_risk_score of this CodereposScanResult.  # noqa: E501
        :type vulnerability_risk_score: float
        """

        self._vulnerability_risk_score = vulnerability_risk_score

    @property
    def vulnerable_files(self):
        """Gets the vulnerable_files of this CodereposScanResult.  # noqa: E501

        Counts how many files have vulnerabilities. Vulnerability info is calculated on demand.   # noqa: E501

        :return: The vulnerable_files of this CodereposScanResult.  # noqa: E501
        :rtype: int
        """
        return self._vulnerable_files

    @vulnerable_files.setter
    def vulnerable_files(self, vulnerable_files):
        """Sets the vulnerable_files of this CodereposScanResult.

        Counts how many files have vulnerabilities. Vulnerability info is calculated on demand.   # noqa: E501

        :param vulnerable_files: The vulnerable_files of this CodereposScanResult.  # noqa: E501
        :type vulnerable_files: int
        """

        self._vulnerable_files = vulnerable_files

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CodereposScanResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CodereposScanResult):
            return True

        return self.to_dict() != other.to_dict()
