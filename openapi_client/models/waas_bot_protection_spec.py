# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasBotProtectionSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interstitial_page': 'bool',
        'js_injection_spec': 'WaasJSInjectionSpec',
        'known_bot_protections_spec': 'WaasKnownBotProtectionsSpec',
        're_captcha_spec': 'WaasReCAPTCHASpec',
        'session_validation': 'WaasEffect',
        'unknown_bot_protection_spec': 'WaasUnknownBotProtectionSpec',
        'user_defined_bots': 'list[WaasUserDefinedBot]'
    }

    attribute_map = {
        'interstitial_page': 'interstitialPage',
        'js_injection_spec': 'jsInjectionSpec',
        'known_bot_protections_spec': 'knownBotProtectionsSpec',
        're_captcha_spec': 'reCAPTCHASpec',
        'session_validation': 'sessionValidation',
        'unknown_bot_protection_spec': 'unknownBotProtectionSpec',
        'user_defined_bots': 'userDefinedBots'
    }

    def __init__(self, interstitial_page=None, js_injection_spec=None, known_bot_protections_spec=None, re_captcha_spec=None, session_validation=None, unknown_bot_protection_spec=None, user_defined_bots=None, local_vars_configuration=None):  # noqa: E501
        """WaasBotProtectionSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._interstitial_page = None
        self._js_injection_spec = None
        self._known_bot_protections_spec = None
        self._re_captcha_spec = None
        self._session_validation = None
        self._unknown_bot_protection_spec = None
        self._user_defined_bots = None
        self.discriminator = None

        if interstitial_page is not None:
            self.interstitial_page = interstitial_page
        if js_injection_spec is not None:
            self.js_injection_spec = js_injection_spec
        if known_bot_protections_spec is not None:
            self.known_bot_protections_spec = known_bot_protections_spec
        if re_captcha_spec is not None:
            self.re_captcha_spec = re_captcha_spec
        if session_validation is not None:
            self.session_validation = session_validation
        if unknown_bot_protection_spec is not None:
            self.unknown_bot_protection_spec = unknown_bot_protection_spec
        if user_defined_bots is not None:
            self.user_defined_bots = user_defined_bots

    @property
    def interstitial_page(self):
        """Gets the interstitial_page of this WaasBotProtectionSpec.  # noqa: E501

        Indicates if an interstitial page is served (true) or not (false).   # noqa: E501

        :return: The interstitial_page of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: bool
        """
        return self._interstitial_page

    @interstitial_page.setter
    def interstitial_page(self, interstitial_page):
        """Sets the interstitial_page of this WaasBotProtectionSpec.

        Indicates if an interstitial page is served (true) or not (false).   # noqa: E501

        :param interstitial_page: The interstitial_page of this WaasBotProtectionSpec.  # noqa: E501
        :type interstitial_page: bool
        """

        self._interstitial_page = interstitial_page

    @property
    def js_injection_spec(self):
        """Gets the js_injection_spec of this WaasBotProtectionSpec.  # noqa: E501


        :return: The js_injection_spec of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: WaasJSInjectionSpec
        """
        return self._js_injection_spec

    @js_injection_spec.setter
    def js_injection_spec(self, js_injection_spec):
        """Sets the js_injection_spec of this WaasBotProtectionSpec.


        :param js_injection_spec: The js_injection_spec of this WaasBotProtectionSpec.  # noqa: E501
        :type js_injection_spec: WaasJSInjectionSpec
        """

        self._js_injection_spec = js_injection_spec

    @property
    def known_bot_protections_spec(self):
        """Gets the known_bot_protections_spec of this WaasBotProtectionSpec.  # noqa: E501


        :return: The known_bot_protections_spec of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: WaasKnownBotProtectionsSpec
        """
        return self._known_bot_protections_spec

    @known_bot_protections_spec.setter
    def known_bot_protections_spec(self, known_bot_protections_spec):
        """Sets the known_bot_protections_spec of this WaasBotProtectionSpec.


        :param known_bot_protections_spec: The known_bot_protections_spec of this WaasBotProtectionSpec.  # noqa: E501
        :type known_bot_protections_spec: WaasKnownBotProtectionsSpec
        """

        self._known_bot_protections_spec = known_bot_protections_spec

    @property
    def re_captcha_spec(self):
        """Gets the re_captcha_spec of this WaasBotProtectionSpec.  # noqa: E501


        :return: The re_captcha_spec of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: WaasReCAPTCHASpec
        """
        return self._re_captcha_spec

    @re_captcha_spec.setter
    def re_captcha_spec(self, re_captcha_spec):
        """Sets the re_captcha_spec of this WaasBotProtectionSpec.


        :param re_captcha_spec: The re_captcha_spec of this WaasBotProtectionSpec.  # noqa: E501
        :type re_captcha_spec: WaasReCAPTCHASpec
        """

        self._re_captcha_spec = re_captcha_spec

    @property
    def session_validation(self):
        """Gets the session_validation of this WaasBotProtectionSpec.  # noqa: E501


        :return: The session_validation of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._session_validation

    @session_validation.setter
    def session_validation(self, session_validation):
        """Sets the session_validation of this WaasBotProtectionSpec.


        :param session_validation: The session_validation of this WaasBotProtectionSpec.  # noqa: E501
        :type session_validation: WaasEffect
        """

        self._session_validation = session_validation

    @property
    def unknown_bot_protection_spec(self):
        """Gets the unknown_bot_protection_spec of this WaasBotProtectionSpec.  # noqa: E501


        :return: The unknown_bot_protection_spec of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: WaasUnknownBotProtectionSpec
        """
        return self._unknown_bot_protection_spec

    @unknown_bot_protection_spec.setter
    def unknown_bot_protection_spec(self, unknown_bot_protection_spec):
        """Sets the unknown_bot_protection_spec of this WaasBotProtectionSpec.


        :param unknown_bot_protection_spec: The unknown_bot_protection_spec of this WaasBotProtectionSpec.  # noqa: E501
        :type unknown_bot_protection_spec: WaasUnknownBotProtectionSpec
        """

        self._unknown_bot_protection_spec = unknown_bot_protection_spec

    @property
    def user_defined_bots(self):
        """Gets the user_defined_bots of this WaasBotProtectionSpec.  # noqa: E501

        Effects to perform when user-defined bots are detected.   # noqa: E501

        :return: The user_defined_bots of this WaasBotProtectionSpec.  # noqa: E501
        :rtype: list[WaasUserDefinedBot]
        """
        return self._user_defined_bots

    @user_defined_bots.setter
    def user_defined_bots(self, user_defined_bots):
        """Sets the user_defined_bots of this WaasBotProtectionSpec.

        Effects to perform when user-defined bots are detected.   # noqa: E501

        :param user_defined_bots: The user_defined_bots of this WaasBotProtectionSpec.  # noqa: E501
        :type user_defined_bots: list[WaasUserDefinedBot]
        """

        self._user_defined_bots = user_defined_bots

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasBotProtectionSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasBotProtectionSpec):
            return True

        return self.to_dict() != other.to_dict()
