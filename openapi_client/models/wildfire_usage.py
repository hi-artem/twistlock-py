# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WildfireUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bytes': 'int',
        'queries': 'int',
        'uploads': 'int'
    }

    attribute_map = {
        'bytes': 'bytes',
        'queries': 'queries',
        'uploads': 'uploads'
    }

    def __init__(self, bytes=None, queries=None, uploads=None, local_vars_configuration=None):  # noqa: E501
        """WildfireUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bytes = None
        self._queries = None
        self._uploads = None
        self.discriminator = None

        if bytes is not None:
            self.bytes = bytes
        if queries is not None:
            self.queries = queries
        if uploads is not None:
            self.uploads = uploads

    @property
    def bytes(self):
        """Gets the bytes of this WildfireUsage.  # noqa: E501

        Bytes is the total number of bytes uploaded to the WildFire API.   # noqa: E501

        :return: The bytes of this WildfireUsage.  # noqa: E501
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this WildfireUsage.

        Bytes is the total number of bytes uploaded to the WildFire API.   # noqa: E501

        :param bytes: The bytes of this WildfireUsage.  # noqa: E501
        :type bytes: int
        """

        self._bytes = bytes

    @property
    def queries(self):
        """Gets the queries of this WildfireUsage.  # noqa: E501

        Queries is the number of queries to the WildFire API.   # noqa: E501

        :return: The queries of this WildfireUsage.  # noqa: E501
        :rtype: int
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this WildfireUsage.

        Queries is the number of queries to the WildFire API.   # noqa: E501

        :param queries: The queries of this WildfireUsage.  # noqa: E501
        :type queries: int
        """

        self._queries = queries

    @property
    def uploads(self):
        """Gets the uploads of this WildfireUsage.  # noqa: E501

        Uploads is the number of uploads to the WildFire API.   # noqa: E501

        :return: The uploads of this WildfireUsage.  # noqa: E501
        :rtype: int
        """
        return self._uploads

    @uploads.setter
    def uploads(self, uploads):
        """Sets the uploads of this WildfireUsage.

        Uploads is the number of uploads to the WildFire API.   # noqa: E501

        :param uploads: The uploads of this WildfireUsage.  # noqa: E501
        :type uploads: int
        """

        self._uploads = uploads

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WildfireUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WildfireUsage):
            return True

        return self.to_dict() != other.to_dict()
