# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class VulnCustomVulnerability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'max_version_inclusive': 'str',
        'md5': 'str',
        'min_version_inclusive': 'str',
        'name': 'str',
        'package': 'str',
        'type': 'VulnPackageType'
    }

    attribute_map = {
        'id': '_id',
        'max_version_inclusive': 'maxVersionInclusive',
        'md5': 'md5',
        'min_version_inclusive': 'minVersionInclusive',
        'name': 'name',
        'package': 'package',
        'type': 'type'
    }

    def __init__(self, id=None, max_version_inclusive=None, md5=None, min_version_inclusive=None, name=None, package=None, type=None, local_vars_configuration=None):  # noqa: E501
        """VulnCustomVulnerability - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._max_version_inclusive = None
        self._md5 = None
        self._min_version_inclusive = None
        self._name = None
        self._package = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if max_version_inclusive is not None:
            self.max_version_inclusive = max_version_inclusive
        if md5 is not None:
            self.md5 = md5
        if min_version_inclusive is not None:
            self.min_version_inclusive = min_version_inclusive
        if name is not None:
            self.name = name
        if package is not None:
            self.package = package
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this VulnCustomVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The id of this VulnCustomVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VulnCustomVulnerability.

        .   # noqa: E501

        :param id: The id of this VulnCustomVulnerability.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def max_version_inclusive(self):
        """Gets the max_version_inclusive of this VulnCustomVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The max_version_inclusive of this VulnCustomVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._max_version_inclusive

    @max_version_inclusive.setter
    def max_version_inclusive(self, max_version_inclusive):
        """Sets the max_version_inclusive of this VulnCustomVulnerability.

        .   # noqa: E501

        :param max_version_inclusive: The max_version_inclusive of this VulnCustomVulnerability.  # noqa: E501
        :type max_version_inclusive: str
        """

        self._max_version_inclusive = max_version_inclusive

    @property
    def md5(self):
        """Gets the md5 of this VulnCustomVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The md5 of this VulnCustomVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this VulnCustomVulnerability.

        .   # noqa: E501

        :param md5: The md5 of this VulnCustomVulnerability.  # noqa: E501
        :type md5: str
        """

        self._md5 = md5

    @property
    def min_version_inclusive(self):
        """Gets the min_version_inclusive of this VulnCustomVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The min_version_inclusive of this VulnCustomVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._min_version_inclusive

    @min_version_inclusive.setter
    def min_version_inclusive(self, min_version_inclusive):
        """Sets the min_version_inclusive of this VulnCustomVulnerability.

        .   # noqa: E501

        :param min_version_inclusive: The min_version_inclusive of this VulnCustomVulnerability.  # noqa: E501
        :type min_version_inclusive: str
        """

        self._min_version_inclusive = min_version_inclusive

    @property
    def name(self):
        """Gets the name of this VulnCustomVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The name of this VulnCustomVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VulnCustomVulnerability.

        .   # noqa: E501

        :param name: The name of this VulnCustomVulnerability.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def package(self):
        """Gets the package of this VulnCustomVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The package of this VulnCustomVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this VulnCustomVulnerability.

        .   # noqa: E501

        :param package: The package of this VulnCustomVulnerability.  # noqa: E501
        :type package: str
        """

        self._package = package

    @property
    def type(self):
        """Gets the type of this VulnCustomVulnerability.  # noqa: E501


        :return: The type of this VulnCustomVulnerability.  # noqa: E501
        :rtype: VulnPackageType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VulnCustomVulnerability.


        :param type: The type of this VulnCustomVulnerability.  # noqa: E501
        :type type: VulnPackageType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnCustomVulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnCustomVulnerability):
            return True

        return self.to_dict() != other.to_dict()
