# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ServerlessRadarEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'alias': 'bool',
        'application_name': 'str',
        'associated_versions': 'list[ServerlessAssociatedVersion]',
        'collections': 'list[str]',
        'compliance_distribution': 'VulnDistribution',
        'credential_id': 'str',
        'defended': 'bool',
        'description': 'str',
        'incident_count': 'int',
        'last_modified': 'datetime',
        'name': 'str',
        'network_count': 'int',
        'permissions': 'list[ServerlessPermissions]',
        'permissions_boundary': 'list[ServerlessPermissions]',
        'processes_count': 'int',
        'provider': 'CommonCloudProvider',
        'region': 'str',
        'runtime': 'str',
        'scanned': 'bool',
        'tags': 'list[CommonExternalLabel]',
        'triggers': 'list[ServerlessTriggers]',
        'version': 'str',
        'vulnerability_distribution': 'VulnDistribution'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'alias': 'alias',
        'application_name': 'applicationName',
        'associated_versions': 'associatedVersions',
        'collections': 'collections',
        'compliance_distribution': 'complianceDistribution',
        'credential_id': 'credentialId',
        'defended': 'defended',
        'description': 'description',
        'incident_count': 'incidentCount',
        'last_modified': 'lastModified',
        'name': 'name',
        'network_count': 'networkCount',
        'permissions': 'permissions',
        'permissions_boundary': 'permissionsBoundary',
        'processes_count': 'processesCount',
        'provider': 'provider',
        'region': 'region',
        'runtime': 'runtime',
        'scanned': 'scanned',
        'tags': 'tags',
        'triggers': 'triggers',
        'version': 'version',
        'vulnerability_distribution': 'vulnerabilityDistribution'
    }

    def __init__(self, id=None, account_id=None, alias=None, application_name=None, associated_versions=None, collections=None, compliance_distribution=None, credential_id=None, defended=None, description=None, incident_count=None, last_modified=None, name=None, network_count=None, permissions=None, permissions_boundary=None, processes_count=None, provider=None, region=None, runtime=None, scanned=None, tags=None, triggers=None, version=None, vulnerability_distribution=None, local_vars_configuration=None):  # noqa: E501
        """ServerlessRadarEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._alias = None
        self._application_name = None
        self._associated_versions = None
        self._collections = None
        self._compliance_distribution = None
        self._credential_id = None
        self._defended = None
        self._description = None
        self._incident_count = None
        self._last_modified = None
        self._name = None
        self._network_count = None
        self._permissions = None
        self._permissions_boundary = None
        self._processes_count = None
        self._provider = None
        self._region = None
        self._runtime = None
        self._scanned = None
        self._tags = None
        self._triggers = None
        self._version = None
        self._vulnerability_distribution = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if alias is not None:
            self.alias = alias
        if application_name is not None:
            self.application_name = application_name
        if associated_versions is not None:
            self.associated_versions = associated_versions
        if collections is not None:
            self.collections = collections
        if compliance_distribution is not None:
            self.compliance_distribution = compliance_distribution
        if credential_id is not None:
            self.credential_id = credential_id
        if defended is not None:
            self.defended = defended
        if description is not None:
            self.description = description
        if incident_count is not None:
            self.incident_count = incident_count
        if last_modified is not None:
            self.last_modified = last_modified
        if name is not None:
            self.name = name
        if network_count is not None:
            self.network_count = network_count
        if permissions is not None:
            self.permissions = permissions
        if permissions_boundary is not None:
            self.permissions_boundary = permissions_boundary
        if processes_count is not None:
            self.processes_count = processes_count
        if provider is not None:
            self.provider = provider
        if region is not None:
            self.region = region
        if runtime is not None:
            self.runtime = runtime
        if scanned is not None:
            self.scanned = scanned
        if tags is not None:
            self.tags = tags
        if triggers is not None:
            self.triggers = triggers
        if version is not None:
            self.version = version
        if vulnerability_distribution is not None:
            self.vulnerability_distribution = vulnerability_distribution

    @property
    def id(self):
        """Gets the id of this ServerlessRadarEntity.  # noqa: E501

        ID is unique identifier of the function (for AWS - ARN).   # noqa: E501

        :return: The id of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerlessRadarEntity.

        ID is unique identifier of the function (for AWS - ARN).   # noqa: E501

        :param id: The id of this ServerlessRadarEntity.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this ServerlessRadarEntity.  # noqa: E501

        AccountID is the cloud account ID.   # noqa: E501

        :return: The account_id of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ServerlessRadarEntity.

        AccountID is the cloud account ID.   # noqa: E501

        :param account_id: The account_id of this ServerlessRadarEntity.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def alias(self):
        """Gets the alias of this ServerlessRadarEntity.  # noqa: E501

        Alias states that the current entity is an alias of the function.   # noqa: E501

        :return: The alias of this ServerlessRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ServerlessRadarEntity.

        Alias states that the current entity is an alias of the function.   # noqa: E501

        :param alias: The alias of this ServerlessRadarEntity.  # noqa: E501
        :type alias: bool
        """

        self._alias = alias

    @property
    def application_name(self):
        """Gets the application_name of this ServerlessRadarEntity.  # noqa: E501

        ApplicationName is the name of the application the function is associated with.   # noqa: E501

        :return: The application_name of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ServerlessRadarEntity.

        ApplicationName is the name of the application the function is associated with.   # noqa: E501

        :param application_name: The application_name of this ServerlessRadarEntity.  # noqa: E501
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def associated_versions(self):
        """Gets the associated_versions of this ServerlessRadarEntity.  # noqa: E501

        AssociatedVersions contain the alias associated versions, or empty if the entity isn't an alias.   # noqa: E501

        :return: The associated_versions of this ServerlessRadarEntity.  # noqa: E501
        :rtype: list[ServerlessAssociatedVersion]
        """
        return self._associated_versions

    @associated_versions.setter
    def associated_versions(self, associated_versions):
        """Sets the associated_versions of this ServerlessRadarEntity.

        AssociatedVersions contain the alias associated versions, or empty if the entity isn't an alias.   # noqa: E501

        :param associated_versions: The associated_versions of this ServerlessRadarEntity.  # noqa: E501
        :type associated_versions: list[ServerlessAssociatedVersion]
        """

        self._associated_versions = associated_versions

    @property
    def collections(self):
        """Gets the collections of this ServerlessRadarEntity.  # noqa: E501

        Collections are the matched function collections.   # noqa: E501

        :return: The collections of this ServerlessRadarEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this ServerlessRadarEntity.

        Collections are the matched function collections.   # noqa: E501

        :param collections: The collections of this ServerlessRadarEntity.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def compliance_distribution(self):
        """Gets the compliance_distribution of this ServerlessRadarEntity.  # noqa: E501


        :return: The compliance_distribution of this ServerlessRadarEntity.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._compliance_distribution

    @compliance_distribution.setter
    def compliance_distribution(self, compliance_distribution):
        """Sets the compliance_distribution of this ServerlessRadarEntity.


        :param compliance_distribution: The compliance_distribution of this ServerlessRadarEntity.  # noqa: E501
        :type compliance_distribution: VulnDistribution
        """

        self._compliance_distribution = compliance_distribution

    @property
    def credential_id(self):
        """Gets the credential_id of this ServerlessRadarEntity.  # noqa: E501

        CredentialID is the id reference of the credential used.   # noqa: E501

        :return: The credential_id of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this ServerlessRadarEntity.

        CredentialID is the id reference of the credential used.   # noqa: E501

        :param credential_id: The credential_id of this ServerlessRadarEntity.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def defended(self):
        """Gets the defended of this ServerlessRadarEntity.  # noqa: E501

        Defended denotes weather the function is defended by a serverless defender.   # noqa: E501

        :return: The defended of this ServerlessRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._defended

    @defended.setter
    def defended(self, defended):
        """Sets the defended of this ServerlessRadarEntity.

        Defended denotes weather the function is defended by a serverless defender.   # noqa: E501

        :param defended: The defended of this ServerlessRadarEntity.  # noqa: E501
        :type defended: bool
        """

        self._defended = defended

    @property
    def description(self):
        """Gets the description of this ServerlessRadarEntity.  # noqa: E501

        Description is the user provided description of the function.   # noqa: E501

        :return: The description of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServerlessRadarEntity.

        Description is the user provided description of the function.   # noqa: E501

        :param description: The description of this ServerlessRadarEntity.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def incident_count(self):
        """Gets the incident_count of this ServerlessRadarEntity.  # noqa: E501

        IncidentCount is the number of incidents.   # noqa: E501

        :return: The incident_count of this ServerlessRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._incident_count

    @incident_count.setter
    def incident_count(self, incident_count):
        """Sets the incident_count of this ServerlessRadarEntity.

        IncidentCount is the number of incidents.   # noqa: E501

        :param incident_count: The incident_count of this ServerlessRadarEntity.  # noqa: E501
        :type incident_count: int
        """

        self._incident_count = incident_count

    @property
    def last_modified(self):
        """Gets the last_modified of this ServerlessRadarEntity.  # noqa: E501

        LastModified is the modification time of the function.   # noqa: E501

        :return: The last_modified of this ServerlessRadarEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ServerlessRadarEntity.

        LastModified is the modification time of the function.   # noqa: E501

        :param last_modified: The last_modified of this ServerlessRadarEntity.  # noqa: E501
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this ServerlessRadarEntity.  # noqa: E501

        Name is the name of the function.   # noqa: E501

        :return: The name of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerlessRadarEntity.

        Name is the name of the function.   # noqa: E501

        :param name: The name of this ServerlessRadarEntity.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def network_count(self):
        """Gets the network_count of this ServerlessRadarEntity.  # noqa: E501

        NetworkCount contain the runtime network events count.   # noqa: E501

        :return: The network_count of this ServerlessRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._network_count

    @network_count.setter
    def network_count(self, network_count):
        """Sets the network_count of this ServerlessRadarEntity.

        NetworkCount contain the runtime network events count.   # noqa: E501

        :param network_count: The network_count of this ServerlessRadarEntity.  # noqa: E501
        :type network_count: int
        """

        self._network_count = network_count

    @property
    def permissions(self):
        """Gets the permissions of this ServerlessRadarEntity.  # noqa: E501

        Permissions are the function permissions.   # noqa: E501

        :return: The permissions of this ServerlessRadarEntity.  # noqa: E501
        :rtype: list[ServerlessPermissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ServerlessRadarEntity.

        Permissions are the function permissions.   # noqa: E501

        :param permissions: The permissions of this ServerlessRadarEntity.  # noqa: E501
        :type permissions: list[ServerlessPermissions]
        """

        self._permissions = permissions

    @property
    def permissions_boundary(self):
        """Gets the permissions_boundary of this ServerlessRadarEntity.  # noqa: E501

        PermissionsBoundary are limitations of the permissions, acting as AND.   # noqa: E501

        :return: The permissions_boundary of this ServerlessRadarEntity.  # noqa: E501
        :rtype: list[ServerlessPermissions]
        """
        return self._permissions_boundary

    @permissions_boundary.setter
    def permissions_boundary(self, permissions_boundary):
        """Sets the permissions_boundary of this ServerlessRadarEntity.

        PermissionsBoundary are limitations of the permissions, acting as AND.   # noqa: E501

        :param permissions_boundary: The permissions_boundary of this ServerlessRadarEntity.  # noqa: E501
        :type permissions_boundary: list[ServerlessPermissions]
        """

        self._permissions_boundary = permissions_boundary

    @property
    def processes_count(self):
        """Gets the processes_count of this ServerlessRadarEntity.  # noqa: E501

        ProcessesCount contain the runtime processes events count.   # noqa: E501

        :return: The processes_count of this ServerlessRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._processes_count

    @processes_count.setter
    def processes_count(self, processes_count):
        """Sets the processes_count of this ServerlessRadarEntity.

        ProcessesCount contain the runtime processes events count.   # noqa: E501

        :param processes_count: The processes_count of this ServerlessRadarEntity.  # noqa: E501
        :type processes_count: int
        """

        self._processes_count = processes_count

    @property
    def provider(self):
        """Gets the provider of this ServerlessRadarEntity.  # noqa: E501


        :return: The provider of this ServerlessRadarEntity.  # noqa: E501
        :rtype: CommonCloudProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ServerlessRadarEntity.


        :param provider: The provider of this ServerlessRadarEntity.  # noqa: E501
        :type provider: CommonCloudProvider
        """

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this ServerlessRadarEntity.  # noqa: E501

        Region is the region that was scanned, for example: GCP - \"us-east-1\", Azure - \"westus\".   # noqa: E501

        :return: The region of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ServerlessRadarEntity.

        Region is the region that was scanned, for example: GCP - \"us-east-1\", Azure - \"westus\".   # noqa: E501

        :param region: The region of this ServerlessRadarEntity.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def runtime(self):
        """Gets the runtime of this ServerlessRadarEntity.  # noqa: E501

        Runtime is runtime environment for the function, i.e. nodejs.   # noqa: E501

        :return: The runtime of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this ServerlessRadarEntity.

        Runtime is runtime environment for the function, i.e. nodejs.   # noqa: E501

        :param runtime: The runtime of this ServerlessRadarEntity.  # noqa: E501
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def scanned(self):
        """Gets the scanned of this ServerlessRadarEntity.  # noqa: E501

        Scanned indicates if the function was scanned for vulnerabilities and compliance.   # noqa: E501

        :return: The scanned of this ServerlessRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._scanned

    @scanned.setter
    def scanned(self, scanned):
        """Sets the scanned of this ServerlessRadarEntity.

        Scanned indicates if the function was scanned for vulnerabilities and compliance.   # noqa: E501

        :param scanned: The scanned of this ServerlessRadarEntity.  # noqa: E501
        :type scanned: bool
        """

        self._scanned = scanned

    @property
    def tags(self):
        """Gets the tags of this ServerlessRadarEntity.  # noqa: E501

        Tags are the cloud provider metadata tags.   # noqa: E501

        :return: The tags of this ServerlessRadarEntity.  # noqa: E501
        :rtype: list[CommonExternalLabel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServerlessRadarEntity.

        Tags are the cloud provider metadata tags.   # noqa: E501

        :param tags: The tags of this ServerlessRadarEntity.  # noqa: E501
        :type tags: list[CommonExternalLabel]
        """

        self._tags = tags

    @property
    def triggers(self):
        """Gets the triggers of this ServerlessRadarEntity.  # noqa: E501

        Triggers contain invocation paths for functions.   # noqa: E501

        :return: The triggers of this ServerlessRadarEntity.  # noqa: E501
        :rtype: list[ServerlessTriggers]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this ServerlessRadarEntity.

        Triggers contain invocation paths for functions.   # noqa: E501

        :param triggers: The triggers of this ServerlessRadarEntity.  # noqa: E501
        :type triggers: list[ServerlessTriggers]
        """

        self._triggers = triggers

    @property
    def version(self):
        """Gets the version of this ServerlessRadarEntity.  # noqa: E501

        Version is the version of the function, or the alias name if it's an alias.   # noqa: E501

        :return: The version of this ServerlessRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServerlessRadarEntity.

        Version is the version of the function, or the alias name if it's an alias.   # noqa: E501

        :param version: The version of this ServerlessRadarEntity.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def vulnerability_distribution(self):
        """Gets the vulnerability_distribution of this ServerlessRadarEntity.  # noqa: E501


        :return: The vulnerability_distribution of this ServerlessRadarEntity.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._vulnerability_distribution

    @vulnerability_distribution.setter
    def vulnerability_distribution(self, vulnerability_distribution):
        """Sets the vulnerability_distribution of this ServerlessRadarEntity.


        :param vulnerability_distribution: The vulnerability_distribution of this ServerlessRadarEntity.  # noqa: E501
        :type vulnerability_distribution: VulnDistribution
        """

        self._vulnerability_distribution = vulnerability_distribution

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerlessRadarEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerlessRadarEntity):
            return True

        return self.to_dict() != other.to_dict()
