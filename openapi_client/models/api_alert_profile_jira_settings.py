# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ApiAlertProfileJIRASettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assignee': 'ApiJIRADynamicField',
        'base_url': 'str',
        'ca_cert': 'str',
        'credential_id': 'str',
        'enabled': 'bool',
        'issue_type': 'str',
        'labels': 'ApiJIRADynamicLabels',
        'priority': 'str',
        'project_key': 'ApiJIRADynamicField'
    }

    attribute_map = {
        'assignee': 'assignee',
        'base_url': 'baseUrl',
        'ca_cert': 'caCert',
        'credential_id': 'credentialId',
        'enabled': 'enabled',
        'issue_type': 'issueType',
        'labels': 'labels',
        'priority': 'priority',
        'project_key': 'projectKey'
    }

    def __init__(self, assignee=None, base_url=None, ca_cert=None, credential_id=None, enabled=None, issue_type=None, labels=None, priority=None, project_key=None, local_vars_configuration=None):  # noqa: E501
        """ApiAlertProfileJIRASettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._assignee = None
        self._base_url = None
        self._ca_cert = None
        self._credential_id = None
        self._enabled = None
        self._issue_type = None
        self._labels = None
        self._priority = None
        self._project_key = None
        self.discriminator = None

        if assignee is not None:
            self.assignee = assignee
        if base_url is not None:
            self.base_url = base_url
        if ca_cert is not None:
            self.ca_cert = ca_cert
        if credential_id is not None:
            self.credential_id = credential_id
        if enabled is not None:
            self.enabled = enabled
        if issue_type is not None:
            self.issue_type = issue_type
        if labels is not None:
            self.labels = labels
        if priority is not None:
            self.priority = priority
        if project_key is not None:
            self.project_key = project_key

    @property
    def assignee(self):
        """Gets the assignee of this ApiAlertProfileJIRASettings.  # noqa: E501


        :return: The assignee of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: ApiJIRADynamicField
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this ApiAlertProfileJIRASettings.


        :param assignee: The assignee of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type assignee: ApiJIRADynamicField
        """

        self._assignee = assignee

    @property
    def base_url(self):
        """Gets the base_url of this ApiAlertProfileJIRASettings.  # noqa: E501

        BaseURL is the JIRA address.   # noqa: E501

        :return: The base_url of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ApiAlertProfileJIRASettings.

        BaseURL is the JIRA address.   # noqa: E501

        :param base_url: The base_url of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def ca_cert(self):
        """Gets the ca_cert of this ApiAlertProfileJIRASettings.  # noqa: E501

        CACert is the certificate used to verify the server.   # noqa: E501

        :return: The ca_cert of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this ApiAlertProfileJIRASettings.

        CACert is the certificate used to verify the server.   # noqa: E501

        :param ca_cert: The ca_cert of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type ca_cert: str
        """

        self._ca_cert = ca_cert

    @property
    def credential_id(self):
        """Gets the credential_id of this ApiAlertProfileJIRASettings.  # noqa: E501

        CredentialID is the JIRA authentication credentials id.   # noqa: E501

        :return: The credential_id of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this ApiAlertProfileJIRASettings.

        CredentialID is the JIRA authentication credentials id.   # noqa: E501

        :param credential_id: The credential_id of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def enabled(self):
        """Gets the enabled of this ApiAlertProfileJIRASettings.  # noqa: E501

        Enabled controls whether the rule is enabled.   # noqa: E501

        :return: The enabled of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiAlertProfileJIRASettings.

        Enabled controls whether the rule is enabled.   # noqa: E501

        :param enabled: The enabled of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def issue_type(self):
        """Gets the issue_type of this ApiAlertProfileJIRASettings.  # noqa: E501

        IssueType is the type of the JIRA issue.   # noqa: E501

        :return: The issue_type of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this ApiAlertProfileJIRASettings.

        IssueType is the type of the JIRA issue.   # noqa: E501

        :param issue_type: The issue_type of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type issue_type: str
        """

        self._issue_type = issue_type

    @property
    def labels(self):
        """Gets the labels of this ApiAlertProfileJIRASettings.  # noqa: E501


        :return: The labels of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: ApiJIRADynamicLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApiAlertProfileJIRASettings.


        :param labels: The labels of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type labels: ApiJIRADynamicLabels
        """

        self._labels = labels

    @property
    def priority(self):
        """Gets the priority of this ApiAlertProfileJIRASettings.  # noqa: E501

        Priority is the issue priority.   # noqa: E501

        :return: The priority of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ApiAlertProfileJIRASettings.

        Priority is the issue priority.   # noqa: E501

        :param priority: The priority of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type priority: str
        """

        self._priority = priority

    @property
    def project_key(self):
        """Gets the project_key of this ApiAlertProfileJIRASettings.  # noqa: E501


        :return: The project_key of this ApiAlertProfileJIRASettings.  # noqa: E501
        :rtype: ApiJIRADynamicField
        """
        return self._project_key

    @project_key.setter
    def project_key(self, project_key):
        """Sets the project_key of this ApiAlertProfileJIRASettings.


        :param project_key: The project_key of this ApiAlertProfileJIRASettings.  # noqa: E501
        :type project_key: ApiJIRADynamicField
        """

        self._project_key = project_key

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAlertProfileJIRASettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiAlertProfileJIRASettings):
            return True

        return self.to_dict() != other.to_dict()
