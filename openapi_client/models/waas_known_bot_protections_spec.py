# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasKnownBotProtectionsSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'archiving': 'WaasEffect',
        'business_analytics': 'WaasEffect',
        'career_search': 'WaasEffect',
        'content_feed_clients': 'WaasEffect',
        'educational': 'WaasEffect',
        'financial': 'WaasEffect',
        'media_search': 'WaasEffect',
        'news': 'WaasEffect',
        'search_engine_crawlers': 'WaasEffect'
    }

    attribute_map = {
        'archiving': 'archiving',
        'business_analytics': 'businessAnalytics',
        'career_search': 'careerSearch',
        'content_feed_clients': 'contentFeedClients',
        'educational': 'educational',
        'financial': 'financial',
        'media_search': 'mediaSearch',
        'news': 'news',
        'search_engine_crawlers': 'searchEngineCrawlers'
    }

    def __init__(self, archiving=None, business_analytics=None, career_search=None, content_feed_clients=None, educational=None, financial=None, media_search=None, news=None, search_engine_crawlers=None, local_vars_configuration=None):  # noqa: E501
        """WaasKnownBotProtectionsSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._archiving = None
        self._business_analytics = None
        self._career_search = None
        self._content_feed_clients = None
        self._educational = None
        self._financial = None
        self._media_search = None
        self._news = None
        self._search_engine_crawlers = None
        self.discriminator = None

        if archiving is not None:
            self.archiving = archiving
        if business_analytics is not None:
            self.business_analytics = business_analytics
        if career_search is not None:
            self.career_search = career_search
        if content_feed_clients is not None:
            self.content_feed_clients = content_feed_clients
        if educational is not None:
            self.educational = educational
        if financial is not None:
            self.financial = financial
        if media_search is not None:
            self.media_search = media_search
        if news is not None:
            self.news = news
        if search_engine_crawlers is not None:
            self.search_engine_crawlers = search_engine_crawlers

    @property
    def archiving(self):
        """Gets the archiving of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The archiving of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._archiving

    @archiving.setter
    def archiving(self, archiving):
        """Sets the archiving of this WaasKnownBotProtectionsSpec.


        :param archiving: The archiving of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type archiving: WaasEffect
        """

        self._archiving = archiving

    @property
    def business_analytics(self):
        """Gets the business_analytics of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The business_analytics of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._business_analytics

    @business_analytics.setter
    def business_analytics(self, business_analytics):
        """Sets the business_analytics of this WaasKnownBotProtectionsSpec.


        :param business_analytics: The business_analytics of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type business_analytics: WaasEffect
        """

        self._business_analytics = business_analytics

    @property
    def career_search(self):
        """Gets the career_search of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The career_search of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._career_search

    @career_search.setter
    def career_search(self, career_search):
        """Sets the career_search of this WaasKnownBotProtectionsSpec.


        :param career_search: The career_search of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type career_search: WaasEffect
        """

        self._career_search = career_search

    @property
    def content_feed_clients(self):
        """Gets the content_feed_clients of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The content_feed_clients of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._content_feed_clients

    @content_feed_clients.setter
    def content_feed_clients(self, content_feed_clients):
        """Sets the content_feed_clients of this WaasKnownBotProtectionsSpec.


        :param content_feed_clients: The content_feed_clients of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type content_feed_clients: WaasEffect
        """

        self._content_feed_clients = content_feed_clients

    @property
    def educational(self):
        """Gets the educational of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The educational of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._educational

    @educational.setter
    def educational(self, educational):
        """Sets the educational of this WaasKnownBotProtectionsSpec.


        :param educational: The educational of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type educational: WaasEffect
        """

        self._educational = educational

    @property
    def financial(self):
        """Gets the financial of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The financial of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._financial

    @financial.setter
    def financial(self, financial):
        """Sets the financial of this WaasKnownBotProtectionsSpec.


        :param financial: The financial of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type financial: WaasEffect
        """

        self._financial = financial

    @property
    def media_search(self):
        """Gets the media_search of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The media_search of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._media_search

    @media_search.setter
    def media_search(self, media_search):
        """Sets the media_search of this WaasKnownBotProtectionsSpec.


        :param media_search: The media_search of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type media_search: WaasEffect
        """

        self._media_search = media_search

    @property
    def news(self):
        """Gets the news of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The news of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._news

    @news.setter
    def news(self, news):
        """Sets the news of this WaasKnownBotProtectionsSpec.


        :param news: The news of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type news: WaasEffect
        """

        self._news = news

    @property
    def search_engine_crawlers(self):
        """Gets the search_engine_crawlers of this WaasKnownBotProtectionsSpec.  # noqa: E501


        :return: The search_engine_crawlers of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._search_engine_crawlers

    @search_engine_crawlers.setter
    def search_engine_crawlers(self, search_engine_crawlers):
        """Sets the search_engine_crawlers of this WaasKnownBotProtectionsSpec.


        :param search_engine_crawlers: The search_engine_crawlers of this WaasKnownBotProtectionsSpec.  # noqa: E501
        :type search_engine_crawlers: WaasEffect
        """

        self._search_engine_crawlers = search_engine_crawlers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasKnownBotProtectionsSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasKnownBotProtectionsSpec):
            return True

        return self.to_dict() != other.to_dict()
