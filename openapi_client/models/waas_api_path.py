# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasAPIPath(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hits': 'int',
        'last_seen': 'datetime',
        'path': 'str',
        'request_data': 'dict(str, WaasAPIRequest)'
    }

    attribute_map = {
        'hits': 'hits',
        'last_seen': 'lastSeen',
        'path': 'path',
        'request_data': 'requestData'
    }

    def __init__(self, hits=None, last_seen=None, path=None, request_data=None, local_vars_configuration=None):  # noqa: E501
        """WaasAPIPath - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._hits = None
        self._last_seen = None
        self._path = None
        self._request_data = None
        self.discriminator = None

        if hits is not None:
            self.hits = hits
        if last_seen is not None:
            self.last_seen = last_seen
        if path is not None:
            self.path = path
        if request_data is not None:
            self.request_data = request_data

    @property
    def hits(self):
        """Gets the hits of this WaasAPIPath.  # noqa: E501

        Hits are amount of hits on this path.   # noqa: E501

        :return: The hits of this WaasAPIPath.  # noqa: E501
        :rtype: int
        """
        return self._hits

    @hits.setter
    def hits(self, hits):
        """Sets the hits of this WaasAPIPath.

        Hits are amount of hits on this path.   # noqa: E501

        :param hits: The hits of this WaasAPIPath.  # noqa: E501
        :type hits: int
        """

        self._hits = hits

    @property
    def last_seen(self):
        """Gets the last_seen of this WaasAPIPath.  # noqa: E501

        LastSeen is the date when this path was last seen.   # noqa: E501

        :return: The last_seen of this WaasAPIPath.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this WaasAPIPath.

        LastSeen is the date when this path was last seen.   # noqa: E501

        :param last_seen: The last_seen of this WaasAPIPath.  # noqa: E501
        :type last_seen: datetime
        """

        self._last_seen = last_seen

    @property
    def path(self):
        """Gets the path of this WaasAPIPath.  # noqa: E501

        Path is the API path.   # noqa: E501

        :return: The path of this WaasAPIPath.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this WaasAPIPath.

        Path is the API path.   # noqa: E501

        :param path: The path of this WaasAPIPath.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def request_data(self):
        """Gets the request_data of this WaasAPIPath.  # noqa: E501

        RequestData is the per-method request data for this path.   # noqa: E501

        :return: The request_data of this WaasAPIPath.  # noqa: E501
        :rtype: dict(str, WaasAPIRequest)
        """
        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """Sets the request_data of this WaasAPIPath.

        RequestData is the per-method request data for this path.   # noqa: E501

        :param request_data: The request_data of this WaasAPIPath.  # noqa: E501
        :type request_data: dict(str, WaasAPIRequest)
        """

        self._request_data = request_data

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasAPIPath):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasAPIPath):
            return True

        return self.to_dict() != other.to_dict()
