# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedContainerRuntimeProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_ids': 'list[str]',
        'archived': 'bool',
        'capabilities': 'RuntimeContainerCapabilities',
        'cluster': 'str',
        'collections': 'list[str]',
        'created': 'datetime',
        'entrypoint': 'str',
        'events': 'list[SharedContainerHistoryEvent]',
        'filesystem': 'RuntimeProfileFilesystem',
        'hash': 'int',
        'host_network': 'bool',
        'host_pid': 'bool',
        'image': 'str',
        'image_id': 'str',
        'infra': 'bool',
        'istio': 'bool',
        'k8s': 'SharedProfileKubernetesData',
        'label': 'str',
        'last_update': 'datetime',
        'learned_startup': 'bool',
        'namespace': 'str',
        'network': 'RuntimeProfileNetwork',
        'os': 'str',
        'processes': 'RuntimeProfileProcesses',
        'relearning_cause': 'str',
        'remaining_learning_duration_sec': 'float',
        'state': 'SharedRuntimeProfileState'
    }

    attribute_map = {
        'id': '_id',
        'account_ids': 'accountIDs',
        'archived': 'archived',
        'capabilities': 'capabilities',
        'cluster': 'cluster',
        'collections': 'collections',
        'created': 'created',
        'entrypoint': 'entrypoint',
        'events': 'events',
        'filesystem': 'filesystem',
        'hash': 'hash',
        'host_network': 'hostNetwork',
        'host_pid': 'hostPid',
        'image': 'image',
        'image_id': 'imageID',
        'infra': 'infra',
        'istio': 'istio',
        'k8s': 'k8s',
        'label': 'label',
        'last_update': 'lastUpdate',
        'learned_startup': 'learnedStartup',
        'namespace': 'namespace',
        'network': 'network',
        'os': 'os',
        'processes': 'processes',
        'relearning_cause': 'relearningCause',
        'remaining_learning_duration_sec': 'remainingLearningDurationSec',
        'state': 'state'
    }

    def __init__(self, id=None, account_ids=None, archived=None, capabilities=None, cluster=None, collections=None, created=None, entrypoint=None, events=None, filesystem=None, hash=None, host_network=None, host_pid=None, image=None, image_id=None, infra=None, istio=None, k8s=None, label=None, last_update=None, learned_startup=None, namespace=None, network=None, os=None, processes=None, relearning_cause=None, remaining_learning_duration_sec=None, state=None, local_vars_configuration=None):  # noqa: E501
        """SharedContainerRuntimeProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_ids = None
        self._archived = None
        self._capabilities = None
        self._cluster = None
        self._collections = None
        self._created = None
        self._entrypoint = None
        self._events = None
        self._filesystem = None
        self._hash = None
        self._host_network = None
        self._host_pid = None
        self._image = None
        self._image_id = None
        self._infra = None
        self._istio = None
        self._k8s = None
        self._label = None
        self._last_update = None
        self._learned_startup = None
        self._namespace = None
        self._network = None
        self._os = None
        self._processes = None
        self._relearning_cause = None
        self._remaining_learning_duration_sec = None
        self._state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_ids is not None:
            self.account_ids = account_ids
        if archived is not None:
            self.archived = archived
        if capabilities is not None:
            self.capabilities = capabilities
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if created is not None:
            self.created = created
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if events is not None:
            self.events = events
        if filesystem is not None:
            self.filesystem = filesystem
        if hash is not None:
            self.hash = hash
        if host_network is not None:
            self.host_network = host_network
        if host_pid is not None:
            self.host_pid = host_pid
        if image is not None:
            self.image = image
        if image_id is not None:
            self.image_id = image_id
        if infra is not None:
            self.infra = infra
        if istio is not None:
            self.istio = istio
        if k8s is not None:
            self.k8s = k8s
        if label is not None:
            self.label = label
        if last_update is not None:
            self.last_update = last_update
        if learned_startup is not None:
            self.learned_startup = learned_startup
        if namespace is not None:
            self.namespace = namespace
        if network is not None:
            self.network = network
        if os is not None:
            self.os = os
        if processes is not None:
            self.processes = processes
        if relearning_cause is not None:
            self.relearning_cause = relearning_cause
        if remaining_learning_duration_sec is not None:
            self.remaining_learning_duration_sec = remaining_learning_duration_sec
        if state is not None:
            self.state = state

    @property
    def id(self):
        """Gets the id of this SharedContainerRuntimeProfile.  # noqa: E501

        Id is the profile ID.   # noqa: E501

        :return: The id of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedContainerRuntimeProfile.

        Id is the profile ID.   # noqa: E501

        :param id: The id of this SharedContainerRuntimeProfile.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_ids(self):
        """Gets the account_ids of this SharedContainerRuntimeProfile.  # noqa: E501

        AccountIDs are the cloud account IDs associated with the container runtime profile.   # noqa: E501

        :return: The account_ids of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this SharedContainerRuntimeProfile.

        AccountIDs are the cloud account IDs associated with the container runtime profile.   # noqa: E501

        :param account_ids: The account_ids of this SharedContainerRuntimeProfile.  # noqa: E501
        :type account_ids: list[str]
        """

        self._account_ids = account_ids

    @property
    def archived(self):
        """Gets the archived of this SharedContainerRuntimeProfile.  # noqa: E501

        Archive indicates whether this profile is archived.   # noqa: E501

        :return: The archived of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this SharedContainerRuntimeProfile.

        Archive indicates whether this profile is archived.   # noqa: E501

        :param archived: The archived of this SharedContainerRuntimeProfile.  # noqa: E501
        :type archived: bool
        """

        self._archived = archived

    @property
    def capabilities(self):
        """Gets the capabilities of this SharedContainerRuntimeProfile.  # noqa: E501


        :return: The capabilities of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: RuntimeContainerCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this SharedContainerRuntimeProfile.


        :param capabilities: The capabilities of this SharedContainerRuntimeProfile.  # noqa: E501
        :type capabilities: RuntimeContainerCapabilities
        """

        self._capabilities = capabilities

    @property
    def cluster(self):
        """Gets the cluster of this SharedContainerRuntimeProfile.  # noqa: E501

        Cluster is the provided cluster name.   # noqa: E501

        :return: The cluster of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedContainerRuntimeProfile.

        Cluster is the provided cluster name.   # noqa: E501

        :param cluster: The cluster of this SharedContainerRuntimeProfile.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedContainerRuntimeProfile.  # noqa: E501

        Collections are collections to which this profile applies.   # noqa: E501

        :return: The collections of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedContainerRuntimeProfile.

        Collections are collections to which this profile applies.   # noqa: E501

        :param collections: The collections of this SharedContainerRuntimeProfile.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def created(self):
        """Gets the created of this SharedContainerRuntimeProfile.  # noqa: E501

        Created is the profile creation time.   # noqa: E501

        :return: The created of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SharedContainerRuntimeProfile.

        Created is the profile creation time.   # noqa: E501

        :param created: The created of this SharedContainerRuntimeProfile.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def entrypoint(self):
        """Gets the entrypoint of this SharedContainerRuntimeProfile.  # noqa: E501

        Entrypoint is the image entrypoint.   # noqa: E501

        :return: The entrypoint of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this SharedContainerRuntimeProfile.

        Entrypoint is the image entrypoint.   # noqa: E501

        :param entrypoint: The entrypoint of this SharedContainerRuntimeProfile.  # noqa: E501
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def events(self):
        """Gets the events of this SharedContainerRuntimeProfile.  # noqa: E501

        Events are the last historical interactive process events for this profile, they are updated in a designated flow.   # noqa: E501

        :return: The events of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: list[SharedContainerHistoryEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this SharedContainerRuntimeProfile.

        Events are the last historical interactive process events for this profile, they are updated in a designated flow.   # noqa: E501

        :param events: The events of this SharedContainerRuntimeProfile.  # noqa: E501
        :type events: list[SharedContainerHistoryEvent]
        """

        self._events = events

    @property
    def filesystem(self):
        """Gets the filesystem of this SharedContainerRuntimeProfile.  # noqa: E501


        :return: The filesystem of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: RuntimeProfileFilesystem
        """
        return self._filesystem

    @filesystem.setter
    def filesystem(self, filesystem):
        """Sets the filesystem of this SharedContainerRuntimeProfile.


        :param filesystem: The filesystem of this SharedContainerRuntimeProfile.  # noqa: E501
        :type filesystem: RuntimeProfileFilesystem
        """

        self._filesystem = filesystem

    @property
    def hash(self):
        """Gets the hash of this SharedContainerRuntimeProfile.  # noqa: E501

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :return: The hash of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this SharedContainerRuntimeProfile.

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :param hash: The hash of this SharedContainerRuntimeProfile.  # noqa: E501
        :type hash: int
        """

        self._hash = hash

    @property
    def host_network(self):
        """Gets the host_network of this SharedContainerRuntimeProfile.  # noqa: E501

        HostNetwork whether the instance share the network namespace with the host.   # noqa: E501

        :return: The host_network of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._host_network

    @host_network.setter
    def host_network(self, host_network):
        """Sets the host_network of this SharedContainerRuntimeProfile.

        HostNetwork whether the instance share the network namespace with the host.   # noqa: E501

        :param host_network: The host_network of this SharedContainerRuntimeProfile.  # noqa: E501
        :type host_network: bool
        """

        self._host_network = host_network

    @property
    def host_pid(self):
        """Gets the host_pid of this SharedContainerRuntimeProfile.  # noqa: E501

        HostPid indicates whether the instance share the pid namespace with the host.   # noqa: E501

        :return: The host_pid of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._host_pid

    @host_pid.setter
    def host_pid(self, host_pid):
        """Sets the host_pid of this SharedContainerRuntimeProfile.

        HostPid indicates whether the instance share the pid namespace with the host.   # noqa: E501

        :param host_pid: The host_pid of this SharedContainerRuntimeProfile.  # noqa: E501
        :type host_pid: bool
        """

        self._host_pid = host_pid

    @property
    def image(self):
        """Gets the image of this SharedContainerRuntimeProfile.  # noqa: E501

        Image is the image name that represents the image.   # noqa: E501

        :return: The image of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SharedContainerRuntimeProfile.

        Image is the image name that represents the image.   # noqa: E501

        :param image: The image of this SharedContainerRuntimeProfile.  # noqa: E501
        :type image: str
        """

        self._image = image

    @property
    def image_id(self):
        """Gets the image_id of this SharedContainerRuntimeProfile.  # noqa: E501

        ImageID is the profile's image ID.   # noqa: E501

        :return: The image_id of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this SharedContainerRuntimeProfile.

        ImageID is the profile's image ID.   # noqa: E501

        :param image_id: The image_id of this SharedContainerRuntimeProfile.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def infra(self):
        """Gets the infra of this SharedContainerRuntimeProfile.  # noqa: E501

        InfraContainer indicates this is an infrastructure container.   # noqa: E501

        :return: The infra of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._infra

    @infra.setter
    def infra(self, infra):
        """Sets the infra of this SharedContainerRuntimeProfile.

        InfraContainer indicates this is an infrastructure container.   # noqa: E501

        :param infra: The infra of this SharedContainerRuntimeProfile.  # noqa: E501
        :type infra: bool
        """

        self._infra = infra

    @property
    def istio(self):
        """Gets the istio of this SharedContainerRuntimeProfile.  # noqa: E501

        Istio states whether it is an istio-monitored profile.   # noqa: E501

        :return: The istio of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._istio

    @istio.setter
    def istio(self, istio):
        """Sets the istio of this SharedContainerRuntimeProfile.

        Istio states whether it is an istio-monitored profile.   # noqa: E501

        :param istio: The istio of this SharedContainerRuntimeProfile.  # noqa: E501
        :type istio: bool
        """

        self._istio = istio

    @property
    def k8s(self):
        """Gets the k8s of this SharedContainerRuntimeProfile.  # noqa: E501


        :return: The k8s of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: SharedProfileKubernetesData
        """
        return self._k8s

    @k8s.setter
    def k8s(self, k8s):
        """Sets the k8s of this SharedContainerRuntimeProfile.


        :param k8s: The k8s of this SharedContainerRuntimeProfile.  # noqa: E501
        :type k8s: SharedProfileKubernetesData
        """

        self._k8s = k8s

    @property
    def label(self):
        """Gets the label of this SharedContainerRuntimeProfile.  # noqa: E501

        Label is the profile's label.   # noqa: E501

        :return: The label of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SharedContainerRuntimeProfile.

        Label is the profile's label.   # noqa: E501

        :param label: The label of this SharedContainerRuntimeProfile.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def last_update(self):
        """Gets the last_update of this SharedContainerRuntimeProfile.  # noqa: E501

        Modified is the last time when this profile was modified.   # noqa: E501

        :return: The last_update of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this SharedContainerRuntimeProfile.

        Modified is the last time when this profile was modified.   # noqa: E501

        :param last_update: The last_update of this SharedContainerRuntimeProfile.  # noqa: E501
        :type last_update: datetime
        """

        self._last_update = last_update

    @property
    def learned_startup(self):
        """Gets the learned_startup of this SharedContainerRuntimeProfile.  # noqa: E501

        LearnedStartup indicates that startup events were learned.   # noqa: E501

        :return: The learned_startup of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: bool
        """
        return self._learned_startup

    @learned_startup.setter
    def learned_startup(self, learned_startup):
        """Sets the learned_startup of this SharedContainerRuntimeProfile.

        LearnedStartup indicates that startup events were learned.   # noqa: E501

        :param learned_startup: The learned_startup of this SharedContainerRuntimeProfile.  # noqa: E501
        :type learned_startup: bool
        """

        self._learned_startup = learned_startup

    @property
    def namespace(self):
        """Gets the namespace of this SharedContainerRuntimeProfile.  # noqa: E501

        Namespace is the k8s deployment namespace.   # noqa: E501

        :return: The namespace of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SharedContainerRuntimeProfile.

        Namespace is the k8s deployment namespace.   # noqa: E501

        :param namespace: The namespace of this SharedContainerRuntimeProfile.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def network(self):
        """Gets the network of this SharedContainerRuntimeProfile.  # noqa: E501


        :return: The network of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: RuntimeProfileNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this SharedContainerRuntimeProfile.


        :param network: The network of this SharedContainerRuntimeProfile.  # noqa: E501
        :type network: RuntimeProfileNetwork
        """

        self._network = network

    @property
    def os(self):
        """Gets the os of this SharedContainerRuntimeProfile.  # noqa: E501

        OS is the profile image OS.   # noqa: E501

        :return: The os of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SharedContainerRuntimeProfile.

        OS is the profile image OS.   # noqa: E501

        :param os: The os of this SharedContainerRuntimeProfile.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def processes(self):
        """Gets the processes of this SharedContainerRuntimeProfile.  # noqa: E501


        :return: The processes of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: RuntimeProfileProcesses
        """
        return self._processes

    @processes.setter
    def processes(self, processes):
        """Sets the processes of this SharedContainerRuntimeProfile.


        :param processes: The processes of this SharedContainerRuntimeProfile.  # noqa: E501
        :type processes: RuntimeProfileProcesses
        """

        self._processes = processes

    @property
    def relearning_cause(self):
        """Gets the relearning_cause of this SharedContainerRuntimeProfile.  # noqa: E501

        RelearningCause is a string that describes the reasoning for a profile to enter the learning mode after being activated.   # noqa: E501

        :return: The relearning_cause of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: str
        """
        return self._relearning_cause

    @relearning_cause.setter
    def relearning_cause(self, relearning_cause):
        """Sets the relearning_cause of this SharedContainerRuntimeProfile.

        RelearningCause is a string that describes the reasoning for a profile to enter the learning mode after being activated.   # noqa: E501

        :param relearning_cause: The relearning_cause of this SharedContainerRuntimeProfile.  # noqa: E501
        :type relearning_cause: str
        """

        self._relearning_cause = relearning_cause

    @property
    def remaining_learning_duration_sec(self):
        """Gets the remaining_learning_duration_sec of this SharedContainerRuntimeProfile.  # noqa: E501

        RemainingLearningDurationSec represents the total time left that the system need to finish learning this image.   # noqa: E501

        :return: The remaining_learning_duration_sec of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: float
        """
        return self._remaining_learning_duration_sec

    @remaining_learning_duration_sec.setter
    def remaining_learning_duration_sec(self, remaining_learning_duration_sec):
        """Sets the remaining_learning_duration_sec of this SharedContainerRuntimeProfile.

        RemainingLearningDurationSec represents the total time left that the system need to finish learning this image.   # noqa: E501

        :param remaining_learning_duration_sec: The remaining_learning_duration_sec of this SharedContainerRuntimeProfile.  # noqa: E501
        :type remaining_learning_duration_sec: float
        """

        self._remaining_learning_duration_sec = remaining_learning_duration_sec

    @property
    def state(self):
        """Gets the state of this SharedContainerRuntimeProfile.  # noqa: E501


        :return: The state of this SharedContainerRuntimeProfile.  # noqa: E501
        :rtype: SharedRuntimeProfileState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SharedContainerRuntimeProfile.


        :param state: The state of this SharedContainerRuntimeProfile.  # noqa: E501
        :type state: SharedRuntimeProfileState
        """

        self._state = state

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedContainerRuntimeProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedContainerRuntimeProfile):
            return True

        return self.to_dict() != other.to_dict()
