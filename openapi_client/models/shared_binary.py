# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedBinary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'altered': 'bool',
        'cve_count': 'int',
        'deps': 'list[str]',
        'function_layer': 'str',
        'md5': 'str',
        'missing_pkg': 'bool',
        'name': 'str',
        'path': 'str',
        'pkg_root_dir': 'str',
        'services': 'list[str]',
        'version': 'str'
    }

    attribute_map = {
        'altered': 'altered',
        'cve_count': 'cveCount',
        'deps': 'deps',
        'function_layer': 'functionLayer',
        'md5': 'md5',
        'missing_pkg': 'missingPkg',
        'name': 'name',
        'path': 'path',
        'pkg_root_dir': 'pkgRootDir',
        'services': 'services',
        'version': 'version'
    }

    def __init__(self, altered=None, cve_count=None, deps=None, function_layer=None, md5=None, missing_pkg=None, name=None, path=None, pkg_root_dir=None, services=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SharedBinary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._altered = None
        self._cve_count = None
        self._deps = None
        self._function_layer = None
        self._md5 = None
        self._missing_pkg = None
        self._name = None
        self._path = None
        self._pkg_root_dir = None
        self._services = None
        self._version = None
        self.discriminator = None

        if altered is not None:
            self.altered = altered
        if cve_count is not None:
            self.cve_count = cve_count
        if deps is not None:
            self.deps = deps
        if function_layer is not None:
            self.function_layer = function_layer
        if md5 is not None:
            self.md5 = md5
        if missing_pkg is not None:
            self.missing_pkg = missing_pkg
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if pkg_root_dir is not None:
            self.pkg_root_dir = pkg_root_dir
        if services is not None:
            self.services = services
        if version is not None:
            self.version = version

    @property
    def altered(self):
        """Gets the altered of this SharedBinary.  # noqa: E501

        Indicates if the binary was installed from a package manager and modified/replaced (true) or not (false).   # noqa: E501

        :return: The altered of this SharedBinary.  # noqa: E501
        :rtype: bool
        """
        return self._altered

    @altered.setter
    def altered(self, altered):
        """Sets the altered of this SharedBinary.

        Indicates if the binary was installed from a package manager and modified/replaced (true) or not (false).   # noqa: E501

        :param altered: The altered of this SharedBinary.  # noqa: E501
        :type altered: bool
        """

        self._altered = altered

    @property
    def cve_count(self):
        """Gets the cve_count of this SharedBinary.  # noqa: E501

        Total number of CVEs for this specific binary.   # noqa: E501

        :return: The cve_count of this SharedBinary.  # noqa: E501
        :rtype: int
        """
        return self._cve_count

    @cve_count.setter
    def cve_count(self, cve_count):
        """Sets the cve_count of this SharedBinary.

        Total number of CVEs for this specific binary.   # noqa: E501

        :param cve_count: The cve_count of this SharedBinary.  # noqa: E501
        :type cve_count: int
        """

        self._cve_count = cve_count

    @property
    def deps(self):
        """Gets the deps of this SharedBinary.  # noqa: E501

        Third-party package files which are used by the binary.   # noqa: E501

        :return: The deps of this SharedBinary.  # noqa: E501
        :rtype: list[str]
        """
        return self._deps

    @deps.setter
    def deps(self, deps):
        """Sets the deps of this SharedBinary.

        Third-party package files which are used by the binary.   # noqa: E501

        :param deps: The deps of this SharedBinary.  # noqa: E501
        :type deps: list[str]
        """

        self._deps = deps

    @property
    def function_layer(self):
        """Gets the function_layer of this SharedBinary.  # noqa: E501

        ID of the serverless layer in which the package was discovered.   # noqa: E501

        :return: The function_layer of this SharedBinary.  # noqa: E501
        :rtype: str
        """
        return self._function_layer

    @function_layer.setter
    def function_layer(self, function_layer):
        """Sets the function_layer of this SharedBinary.

        ID of the serverless layer in which the package was discovered.   # noqa: E501

        :param function_layer: The function_layer of this SharedBinary.  # noqa: E501
        :type function_layer: str
        """

        self._function_layer = function_layer

    @property
    def md5(self):
        """Gets the md5 of this SharedBinary.  # noqa: E501

        Md5 hashset of the binary.   # noqa: E501

        :return: The md5 of this SharedBinary.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this SharedBinary.

        Md5 hashset of the binary.   # noqa: E501

        :param md5: The md5 of this SharedBinary.  # noqa: E501
        :type md5: str
        """

        self._md5 = md5

    @property
    def missing_pkg(self):
        """Gets the missing_pkg of this SharedBinary.  # noqa: E501

        Indicates if this binary is not related to any package (true) or not (false).   # noqa: E501

        :return: The missing_pkg of this SharedBinary.  # noqa: E501
        :rtype: bool
        """
        return self._missing_pkg

    @missing_pkg.setter
    def missing_pkg(self, missing_pkg):
        """Sets the missing_pkg of this SharedBinary.

        Indicates if this binary is not related to any package (true) or not (false).   # noqa: E501

        :param missing_pkg: The missing_pkg of this SharedBinary.  # noqa: E501
        :type missing_pkg: bool
        """

        self._missing_pkg = missing_pkg

    @property
    def name(self):
        """Gets the name of this SharedBinary.  # noqa: E501

        Name of the binary.   # noqa: E501

        :return: The name of this SharedBinary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedBinary.

        Name of the binary.   # noqa: E501

        :param name: The name of this SharedBinary.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this SharedBinary.  # noqa: E501

        Relative path of the binary inside the container.   # noqa: E501

        :return: The path of this SharedBinary.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SharedBinary.

        Relative path of the binary inside the container.   # noqa: E501

        :param path: The path of this SharedBinary.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def pkg_root_dir(self):
        """Gets the pkg_root_dir of this SharedBinary.  # noqa: E501

        Path for searching packages used by the binary.   # noqa: E501

        :return: The pkg_root_dir of this SharedBinary.  # noqa: E501
        :rtype: str
        """
        return self._pkg_root_dir

    @pkg_root_dir.setter
    def pkg_root_dir(self, pkg_root_dir):
        """Sets the pkg_root_dir of this SharedBinary.

        Path for searching packages used by the binary.   # noqa: E501

        :param pkg_root_dir: The pkg_root_dir of this SharedBinary.  # noqa: E501
        :type pkg_root_dir: str
        """

        self._pkg_root_dir = pkg_root_dir

    @property
    def services(self):
        """Gets the services of this SharedBinary.  # noqa: E501

        Name of services which use the binary.   # noqa: E501

        :return: The services of this SharedBinary.  # noqa: E501
        :rtype: list[str]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this SharedBinary.

        Name of services which use the binary.   # noqa: E501

        :param services: The services of this SharedBinary.  # noqa: E501
        :type services: list[str]
        """

        self._services = services

    @property
    def version(self):
        """Gets the version of this SharedBinary.  # noqa: E501

        Version of the binary.   # noqa: E501

        :return: The version of this SharedBinary.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedBinary.

        Version of the binary.   # noqa: E501

        :param version: The version of this SharedBinary.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedBinary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedBinary):
            return True

        return self.to_dict() != other.to_dict()
