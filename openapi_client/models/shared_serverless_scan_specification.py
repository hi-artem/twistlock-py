# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedServerlessScanSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_region_type': 'SharedAwsRegionType',
        'cap': 'int',
        'credential': 'CredCredential',
        'credential_id': 'str',
        'provider': 'CommonCloudProvider',
        'scan_all_versions': 'bool',
        'scan_layers': 'bool'
    }

    attribute_map = {
        'aws_region_type': 'awsRegionType',
        'cap': 'cap',
        'credential': 'credential',
        'credential_id': 'credentialID',
        'provider': 'provider',
        'scan_all_versions': 'scanAllVersions',
        'scan_layers': 'scanLayers'
    }

    def __init__(self, aws_region_type=None, cap=None, credential=None, credential_id=None, provider=None, scan_all_versions=None, scan_layers=None, local_vars_configuration=None):  # noqa: E501
        """SharedServerlessScanSpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._aws_region_type = None
        self._cap = None
        self._credential = None
        self._credential_id = None
        self._provider = None
        self._scan_all_versions = None
        self._scan_layers = None
        self.discriminator = None

        if aws_region_type is not None:
            self.aws_region_type = aws_region_type
        if cap is not None:
            self.cap = cap
        if credential is not None:
            self.credential = credential
        if credential_id is not None:
            self.credential_id = credential_id
        if provider is not None:
            self.provider = provider
        if scan_all_versions is not None:
            self.scan_all_versions = scan_all_versions
        if scan_layers is not None:
            self.scan_layers = scan_layers

    @property
    def aws_region_type(self):
        """Gets the aws_region_type of this SharedServerlessScanSpecification.  # noqa: E501


        :return: The aws_region_type of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: SharedAwsRegionType
        """
        return self._aws_region_type

    @aws_region_type.setter
    def aws_region_type(self, aws_region_type):
        """Sets the aws_region_type of this SharedServerlessScanSpecification.


        :param aws_region_type: The aws_region_type of this SharedServerlessScanSpecification.  # noqa: E501
        :type aws_region_type: SharedAwsRegionType
        """

        self._aws_region_type = aws_region_type

    @property
    def cap(self):
        """Gets the cap of this SharedServerlessScanSpecification.  # noqa: E501

        Specifies the maximum number of functions to fetch and scan, ordered by most recently modified.   # noqa: E501

        :return: The cap of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: int
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this SharedServerlessScanSpecification.

        Specifies the maximum number of functions to fetch and scan, ordered by most recently modified.   # noqa: E501

        :param cap: The cap of this SharedServerlessScanSpecification.  # noqa: E501
        :type cap: int
        """

        self._cap = cap

    @property
    def credential(self):
        """Gets the credential of this SharedServerlessScanSpecification.  # noqa: E501


        :return: The credential of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: CredCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this SharedServerlessScanSpecification.


        :param credential: The credential of this SharedServerlessScanSpecification.  # noqa: E501
        :type credential: CredCredential
        """

        self._credential = credential

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedServerlessScanSpecification.  # noqa: E501

        ID of the credentials in the credentials store to use for authenticating with the cloud provider.   # noqa: E501

        :return: The credential_id of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedServerlessScanSpecification.

        ID of the credentials in the credentials store to use for authenticating with the cloud provider.   # noqa: E501

        :param credential_id: The credential_id of this SharedServerlessScanSpecification.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def provider(self):
        """Gets the provider of this SharedServerlessScanSpecification.  # noqa: E501


        :return: The provider of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: CommonCloudProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SharedServerlessScanSpecification.


        :param provider: The provider of this SharedServerlessScanSpecification.  # noqa: E501
        :type provider: CommonCloudProvider
        """

        self._provider = provider

    @property
    def scan_all_versions(self):
        """Gets the scan_all_versions of this SharedServerlessScanSpecification.  # noqa: E501

        Indicates if all image versions should be scanned (by default this option is off and only $LATEST is scanned).   # noqa: E501

        :return: The scan_all_versions of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._scan_all_versions

    @scan_all_versions.setter
    def scan_all_versions(self, scan_all_versions):
        """Sets the scan_all_versions of this SharedServerlessScanSpecification.

        Indicates if all image versions should be scanned (by default this option is off and only $LATEST is scanned).   # noqa: E501

        :param scan_all_versions: The scan_all_versions of this SharedServerlessScanSpecification.  # noqa: E501
        :type scan_all_versions: bool
        """

        self._scan_all_versions = scan_all_versions

    @property
    def scan_layers(self):
        """Gets the scan_layers of this SharedServerlessScanSpecification.  # noqa: E501

        Indicates if a function's layers should be scanned (on by default).   # noqa: E501

        :return: The scan_layers of this SharedServerlessScanSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._scan_layers

    @scan_layers.setter
    def scan_layers(self, scan_layers):
        """Sets the scan_layers of this SharedServerlessScanSpecification.

        Indicates if a function's layers should be scanned (on by default).   # noqa: E501

        :param scan_layers: The scan_layers of this SharedServerlessScanSpecification.  # noqa: E501
        :type scan_layers: bool
        """

        self._scan_layers = scan_layers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedServerlessScanSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedServerlessScanSpecification):
            return True

        return self.to_dict() != other.to_dict()
