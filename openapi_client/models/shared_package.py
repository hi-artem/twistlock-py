# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedPackage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'binary_idx': 'list[int]',
        'binary_pkgs': 'list[str]',
        'cve_count': 'int',
        'files': 'list[SharedFileDetails]',
        'function_layer': 'str',
        'layer_time': 'int',
        'license': 'str',
        'name': 'str',
        'path': 'str',
        'version': 'str'
    }

    attribute_map = {
        'binary_idx': 'binaryIdx',
        'binary_pkgs': 'binaryPkgs',
        'cve_count': 'cveCount',
        'files': 'files',
        'function_layer': 'functionLayer',
        'layer_time': 'layerTime',
        'license': 'license',
        'name': 'name',
        'path': 'path',
        'version': 'version'
    }

    def __init__(self, binary_idx=None, binary_pkgs=None, cve_count=None, files=None, function_layer=None, layer_time=None, license=None, name=None, path=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SharedPackage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._binary_idx = None
        self._binary_pkgs = None
        self._cve_count = None
        self._files = None
        self._function_layer = None
        self._layer_time = None
        self._license = None
        self._name = None
        self._path = None
        self._version = None
        self.discriminator = None

        if binary_idx is not None:
            self.binary_idx = binary_idx
        if binary_pkgs is not None:
            self.binary_pkgs = binary_pkgs
        if cve_count is not None:
            self.cve_count = cve_count
        if files is not None:
            self.files = files
        if function_layer is not None:
            self.function_layer = function_layer
        if layer_time is not None:
            self.layer_time = layer_time
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if version is not None:
            self.version = version

    @property
    def binary_idx(self):
        """Gets the binary_idx of this SharedPackage.  # noqa: E501

        Indexes of the top binaries which use the package.   # noqa: E501

        :return: The binary_idx of this SharedPackage.  # noqa: E501
        :rtype: list[int]
        """
        return self._binary_idx

    @binary_idx.setter
    def binary_idx(self, binary_idx):
        """Sets the binary_idx of this SharedPackage.

        Indexes of the top binaries which use the package.   # noqa: E501

        :param binary_idx: The binary_idx of this SharedPackage.  # noqa: E501
        :type binary_idx: list[int]
        """

        self._binary_idx = binary_idx

    @property
    def binary_pkgs(self):
        """Gets the binary_pkgs of this SharedPackage.  # noqa: E501

        Names of the distro binary packages (packages which are built on the source of the package).   # noqa: E501

        :return: The binary_pkgs of this SharedPackage.  # noqa: E501
        :rtype: list[str]
        """
        return self._binary_pkgs

    @binary_pkgs.setter
    def binary_pkgs(self, binary_pkgs):
        """Sets the binary_pkgs of this SharedPackage.

        Names of the distro binary packages (packages which are built on the source of the package).   # noqa: E501

        :param binary_pkgs: The binary_pkgs of this SharedPackage.  # noqa: E501
        :type binary_pkgs: list[str]
        """

        self._binary_pkgs = binary_pkgs

    @property
    def cve_count(self):
        """Gets the cve_count of this SharedPackage.  # noqa: E501

        Total number of CVEs for this specific package.   # noqa: E501

        :return: The cve_count of this SharedPackage.  # noqa: E501
        :rtype: int
        """
        return self._cve_count

    @cve_count.setter
    def cve_count(self, cve_count):
        """Sets the cve_count of this SharedPackage.

        Total number of CVEs for this specific package.   # noqa: E501

        :param cve_count: The cve_count of this SharedPackage.  # noqa: E501
        :type cve_count: int
        """

        self._cve_count = cve_count

    @property
    def files(self):
        """Gets the files of this SharedPackage.  # noqa: E501

        List of package-related files and their hashes. Only included when the appropriate scan option is set.   # noqa: E501

        :return: The files of this SharedPackage.  # noqa: E501
        :rtype: list[SharedFileDetails]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SharedPackage.

        List of package-related files and their hashes. Only included when the appropriate scan option is set.   # noqa: E501

        :param files: The files of this SharedPackage.  # noqa: E501
        :type files: list[SharedFileDetails]
        """

        self._files = files

    @property
    def function_layer(self):
        """Gets the function_layer of this SharedPackage.  # noqa: E501

        ID of the serverless layer in which the package was discovered.   # noqa: E501

        :return: The function_layer of this SharedPackage.  # noqa: E501
        :rtype: str
        """
        return self._function_layer

    @function_layer.setter
    def function_layer(self, function_layer):
        """Sets the function_layer of this SharedPackage.

        ID of the serverless layer in which the package was discovered.   # noqa: E501

        :param function_layer: The function_layer of this SharedPackage.  # noqa: E501
        :type function_layer: str
        """

        self._function_layer = function_layer

    @property
    def layer_time(self):
        """Gets the layer_time of this SharedPackage.  # noqa: E501

        Image layer to which the package belongs (layer creation time).   # noqa: E501

        :return: The layer_time of this SharedPackage.  # noqa: E501
        :rtype: int
        """
        return self._layer_time

    @layer_time.setter
    def layer_time(self, layer_time):
        """Sets the layer_time of this SharedPackage.

        Image layer to which the package belongs (layer creation time).   # noqa: E501

        :param layer_time: The layer_time of this SharedPackage.  # noqa: E501
        :type layer_time: int
        """

        self._layer_time = layer_time

    @property
    def license(self):
        """Gets the license of this SharedPackage.  # noqa: E501

        License information for the package.   # noqa: E501

        :return: The license of this SharedPackage.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SharedPackage.

        License information for the package.   # noqa: E501

        :param license: The license of this SharedPackage.  # noqa: E501
        :type license: str
        """

        self._license = license

    @property
    def name(self):
        """Gets the name of this SharedPackage.  # noqa: E501

        Name of the package.   # noqa: E501

        :return: The name of this SharedPackage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedPackage.

        Name of the package.   # noqa: E501

        :param name: The name of this SharedPackage.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this SharedPackage.  # noqa: E501

        Full package path (e.g., JAR or Node.js package path).   # noqa: E501

        :return: The path of this SharedPackage.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SharedPackage.

        Full package path (e.g., JAR or Node.js package path).   # noqa: E501

        :param path: The path of this SharedPackage.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def version(self):
        """Gets the version of this SharedPackage.  # noqa: E501

        Package version.   # noqa: E501

        :return: The version of this SharedPackage.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedPackage.

        Package version.   # noqa: E501

        :param version: The version of this SharedPackage.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedPackage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedPackage):
            return True

        return self.to_dict() != other.to_dict()
