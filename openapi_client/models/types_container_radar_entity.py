# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesContainerRadarEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'allow_all': 'CnnfAllowAllConnections',
        'app_firewall_attack_counts': 'list[TypesAppFirewallAttackCount]',
        'cluster': 'str',
        'compliance_distribution': 'VulnDistribution',
        'consul': 'bool',
        'container_count': 'int',
        'distro': 'str',
        'dns': 'bool',
        'filesystem_count': 'int',
        'firewall_protection': 'WaasProtectionStatus',
        'geoip': 'RuntimeProfileNetworkGeoIP',
        'has_dns_connection': 'bool',
        'host_count': 'int',
        'hostname': 'str',
        'image_id': 'str',
        'image_name': 'str',
        'image_names': 'list[str]',
        'incident_count': 'int',
        'incoming_connections': 'list[SharedContainerRadarIncomingConnection]',
        'internet': 'SharedInternetConnections',
        'istio': 'bool',
        'istio_authorization_policies': 'list[IstioAuthorizationPolicy]',
        'k8s': 'SharedProfileKubernetesData',
        'label': 'str',
        'labels': 'list[str]',
        'learning': 'bool',
        'namespace': 'str',
        'network_count': 'int',
        'processes_count': 'int',
        'profile_hash': 'int',
        'region': 'str',
        'resolved': 'bool',
        'service_ip': 'str',
        'service_name': 'str',
        'service_ports': 'list[int]',
        'subnet_connections': 'SharedSubnetConnections',
        'type': 'SharedEntityType',
        'vulnerability_distribution': 'VulnDistribution'
    }

    attribute_map = {
        'id': '_id',
        'allow_all': 'allowAll',
        'app_firewall_attack_counts': 'appFirewallAttackCounts',
        'cluster': 'cluster',
        'compliance_distribution': 'complianceDistribution',
        'consul': 'consul',
        'container_count': 'containerCount',
        'distro': 'distro',
        'dns': 'dns',
        'filesystem_count': 'filesystemCount',
        'firewall_protection': 'firewallProtection',
        'geoip': 'geoip',
        'has_dns_connection': 'hasDNSConnection',
        'host_count': 'hostCount',
        'hostname': 'hostname',
        'image_id': 'imageID',
        'image_name': 'imageName',
        'image_names': 'imageNames',
        'incident_count': 'incidentCount',
        'incoming_connections': 'incomingConnections',
        'internet': 'internet',
        'istio': 'istio',
        'istio_authorization_policies': 'istioAuthorizationPolicies',
        'k8s': 'k8s',
        'label': 'label',
        'labels': 'labels',
        'learning': 'learning',
        'namespace': 'namespace',
        'network_count': 'networkCount',
        'processes_count': 'processesCount',
        'profile_hash': 'profileHash',
        'region': 'region',
        'resolved': 'resolved',
        'service_ip': 'serviceIP',
        'service_name': 'serviceName',
        'service_ports': 'servicePorts',
        'subnet_connections': 'subnetConnections',
        'type': 'type',
        'vulnerability_distribution': 'vulnerabilityDistribution'
    }

    def __init__(self, id=None, allow_all=None, app_firewall_attack_counts=None, cluster=None, compliance_distribution=None, consul=None, container_count=None, distro=None, dns=None, filesystem_count=None, firewall_protection=None, geoip=None, has_dns_connection=None, host_count=None, hostname=None, image_id=None, image_name=None, image_names=None, incident_count=None, incoming_connections=None, internet=None, istio=None, istio_authorization_policies=None, k8s=None, label=None, labels=None, learning=None, namespace=None, network_count=None, processes_count=None, profile_hash=None, region=None, resolved=None, service_ip=None, service_name=None, service_ports=None, subnet_connections=None, type=None, vulnerability_distribution=None, local_vars_configuration=None):  # noqa: E501
        """TypesContainerRadarEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._allow_all = None
        self._app_firewall_attack_counts = None
        self._cluster = None
        self._compliance_distribution = None
        self._consul = None
        self._container_count = None
        self._distro = None
        self._dns = None
        self._filesystem_count = None
        self._firewall_protection = None
        self._geoip = None
        self._has_dns_connection = None
        self._host_count = None
        self._hostname = None
        self._image_id = None
        self._image_name = None
        self._image_names = None
        self._incident_count = None
        self._incoming_connections = None
        self._internet = None
        self._istio = None
        self._istio_authorization_policies = None
        self._k8s = None
        self._label = None
        self._labels = None
        self._learning = None
        self._namespace = None
        self._network_count = None
        self._processes_count = None
        self._profile_hash = None
        self._region = None
        self._resolved = None
        self._service_ip = None
        self._service_name = None
        self._service_ports = None
        self._subnet_connections = None
        self._type = None
        self._vulnerability_distribution = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if allow_all is not None:
            self.allow_all = allow_all
        if app_firewall_attack_counts is not None:
            self.app_firewall_attack_counts = app_firewall_attack_counts
        if cluster is not None:
            self.cluster = cluster
        if compliance_distribution is not None:
            self.compliance_distribution = compliance_distribution
        if consul is not None:
            self.consul = consul
        if container_count is not None:
            self.container_count = container_count
        if distro is not None:
            self.distro = distro
        if dns is not None:
            self.dns = dns
        if filesystem_count is not None:
            self.filesystem_count = filesystem_count
        if firewall_protection is not None:
            self.firewall_protection = firewall_protection
        if geoip is not None:
            self.geoip = geoip
        if has_dns_connection is not None:
            self.has_dns_connection = has_dns_connection
        if host_count is not None:
            self.host_count = host_count
        if hostname is not None:
            self.hostname = hostname
        if image_id is not None:
            self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name
        if image_names is not None:
            self.image_names = image_names
        if incident_count is not None:
            self.incident_count = incident_count
        if incoming_connections is not None:
            self.incoming_connections = incoming_connections
        if internet is not None:
            self.internet = internet
        if istio is not None:
            self.istio = istio
        if istio_authorization_policies is not None:
            self.istio_authorization_policies = istio_authorization_policies
        if k8s is not None:
            self.k8s = k8s
        if label is not None:
            self.label = label
        if labels is not None:
            self.labels = labels
        if learning is not None:
            self.learning = learning
        if namespace is not None:
            self.namespace = namespace
        if network_count is not None:
            self.network_count = network_count
        if processes_count is not None:
            self.processes_count = processes_count
        if profile_hash is not None:
            self.profile_hash = profile_hash
        if region is not None:
            self.region = region
        if resolved is not None:
            self.resolved = resolved
        if service_ip is not None:
            self.service_ip = service_ip
        if service_name is not None:
            self.service_name = service_name
        if service_ports is not None:
            self.service_ports = service_ports
        if subnet_connections is not None:
            self.subnet_connections = subnet_connections
        if type is not None:
            self.type = type
        if vulnerability_distribution is not None:
            self.vulnerability_distribution = vulnerability_distribution

    @property
    def id(self):
        """Gets the id of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The id of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param id: The id of this TypesContainerRadarEntity.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def allow_all(self):
        """Gets the allow_all of this TypesContainerRadarEntity.  # noqa: E501


        :return: The allow_all of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: CnnfAllowAllConnections
        """
        return self._allow_all

    @allow_all.setter
    def allow_all(self, allow_all):
        """Sets the allow_all of this TypesContainerRadarEntity.


        :param allow_all: The allow_all of this TypesContainerRadarEntity.  # noqa: E501
        :type allow_all: CnnfAllowAllConnections
        """

        self._allow_all = allow_all

    @property
    def app_firewall_attack_counts(self):
        """Gets the app_firewall_attack_counts of this TypesContainerRadarEntity.  # noqa: E501

        AppFirewallAttackCounts is the counts for the app firewall attacks.   # noqa: E501

        :return: The app_firewall_attack_counts of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: list[TypesAppFirewallAttackCount]
        """
        return self._app_firewall_attack_counts

    @app_firewall_attack_counts.setter
    def app_firewall_attack_counts(self, app_firewall_attack_counts):
        """Sets the app_firewall_attack_counts of this TypesContainerRadarEntity.

        AppFirewallAttackCounts is the counts for the app firewall attacks.   # noqa: E501

        :param app_firewall_attack_counts: The app_firewall_attack_counts of this TypesContainerRadarEntity.  # noqa: E501
        :type app_firewall_attack_counts: list[TypesAppFirewallAttackCount]
        """

        self._app_firewall_attack_counts = app_firewall_attack_counts

    @property
    def cluster(self):
        """Gets the cluster of this TypesContainerRadarEntity.  # noqa: E501

        Cluster is the provided cluster name.   # noqa: E501

        :return: The cluster of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this TypesContainerRadarEntity.

        Cluster is the provided cluster name.   # noqa: E501

        :param cluster: The cluster of this TypesContainerRadarEntity.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def compliance_distribution(self):
        """Gets the compliance_distribution of this TypesContainerRadarEntity.  # noqa: E501


        :return: The compliance_distribution of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._compliance_distribution

    @compliance_distribution.setter
    def compliance_distribution(self, compliance_distribution):
        """Sets the compliance_distribution of this TypesContainerRadarEntity.


        :param compliance_distribution: The compliance_distribution of this TypesContainerRadarEntity.  # noqa: E501
        :type compliance_distribution: VulnDistribution
        """

        self._compliance_distribution = compliance_distribution

    @property
    def consul(self):
        """Gets the consul of this TypesContainerRadarEntity.  # noqa: E501

        Consul states whether it is a consul container.   # noqa: E501

        :return: The consul of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._consul

    @consul.setter
    def consul(self, consul):
        """Sets the consul of this TypesContainerRadarEntity.

        Consul states whether it is a consul container.   # noqa: E501

        :param consul: The consul of this TypesContainerRadarEntity.  # noqa: E501
        :type consul: bool
        """

        self._consul = consul

    @property
    def container_count(self):
        """Gets the container_count of this TypesContainerRadarEntity.  # noqa: E501

        ContainerCount is the amount of containers per entity.   # noqa: E501

        :return: The container_count of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._container_count

    @container_count.setter
    def container_count(self, container_count):
        """Sets the container_count of this TypesContainerRadarEntity.

        ContainerCount is the amount of containers per entity.   # noqa: E501

        :param container_count: The container_count of this TypesContainerRadarEntity.  # noqa: E501
        :type container_count: int
        """

        self._container_count = container_count

    @property
    def distro(self):
        """Gets the distro of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The distro of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """Sets the distro of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param distro: The distro of this TypesContainerRadarEntity.  # noqa: E501
        :type distro: str
        """

        self._distro = distro

    @property
    def dns(self):
        """Gets the dns of this TypesContainerRadarEntity.  # noqa: E501

        DNS states whether this is a DNS node.   # noqa: E501

        :return: The dns of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this TypesContainerRadarEntity.

        DNS states whether this is a DNS node.   # noqa: E501

        :param dns: The dns of this TypesContainerRadarEntity.  # noqa: E501
        :type dns: bool
        """

        self._dns = dns

    @property
    def filesystem_count(self):
        """Gets the filesystem_count of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The filesystem_count of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._filesystem_count

    @filesystem_count.setter
    def filesystem_count(self, filesystem_count):
        """Sets the filesystem_count of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param filesystem_count: The filesystem_count of this TypesContainerRadarEntity.  # noqa: E501
        :type filesystem_count: int
        """

        self._filesystem_count = filesystem_count

    @property
    def firewall_protection(self):
        """Gets the firewall_protection of this TypesContainerRadarEntity.  # noqa: E501


        :return: The firewall_protection of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: WaasProtectionStatus
        """
        return self._firewall_protection

    @firewall_protection.setter
    def firewall_protection(self, firewall_protection):
        """Sets the firewall_protection of this TypesContainerRadarEntity.


        :param firewall_protection: The firewall_protection of this TypesContainerRadarEntity.  # noqa: E501
        :type firewall_protection: WaasProtectionStatus
        """

        self._firewall_protection = firewall_protection

    @property
    def geoip(self):
        """Gets the geoip of this TypesContainerRadarEntity.  # noqa: E501


        :return: The geoip of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: RuntimeProfileNetworkGeoIP
        """
        return self._geoip

    @geoip.setter
    def geoip(self, geoip):
        """Sets the geoip of this TypesContainerRadarEntity.


        :param geoip: The geoip of this TypesContainerRadarEntity.  # noqa: E501
        :type geoip: RuntimeProfileNetworkGeoIP
        """

        self._geoip = geoip

    @property
    def has_dns_connection(self):
        """Gets the has_dns_connection of this TypesContainerRadarEntity.  # noqa: E501

        HasDNSConnection states whether the node has DNS connection.   # noqa: E501

        :return: The has_dns_connection of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._has_dns_connection

    @has_dns_connection.setter
    def has_dns_connection(self, has_dns_connection):
        """Sets the has_dns_connection of this TypesContainerRadarEntity.

        HasDNSConnection states whether the node has DNS connection.   # noqa: E501

        :param has_dns_connection: The has_dns_connection of this TypesContainerRadarEntity.  # noqa: E501
        :type has_dns_connection: bool
        """

        self._has_dns_connection = has_dns_connection

    @property
    def host_count(self):
        """Gets the host_count of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The host_count of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._host_count

    @host_count.setter
    def host_count(self, host_count):
        """Sets the host_count of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param host_count: The host_count of this TypesContainerRadarEntity.  # noqa: E501
        :type host_count: int
        """

        self._host_count = host_count

    @property
    def hostname(self):
        """Gets the hostname of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The hostname of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param hostname: The hostname of this TypesContainerRadarEntity.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image_id(self):
        """Gets the image_id of this TypesContainerRadarEntity.  # noqa: E501

        ImageID is the entity's image ID.   # noqa: E501

        :return: The image_id of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this TypesContainerRadarEntity.

        ImageID is the entity's image ID.   # noqa: E501

        :param image_id: The image_id of this TypesContainerRadarEntity.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this TypesContainerRadarEntity.  # noqa: E501

        ImageName is the entity's image name.   # noqa: E501

        :return: The image_name of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this TypesContainerRadarEntity.

        ImageName is the entity's image name.   # noqa: E501

        :param image_name: The image_name of this TypesContainerRadarEntity.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def image_names(self):
        """Gets the image_names of this TypesContainerRadarEntity.  # noqa: E501

        ImageNames are the names of the image associated with the radar entity.   # noqa: E501

        :return: The image_names of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_names

    @image_names.setter
    def image_names(self, image_names):
        """Sets the image_names of this TypesContainerRadarEntity.

        ImageNames are the names of the image associated with the radar entity.   # noqa: E501

        :param image_names: The image_names of this TypesContainerRadarEntity.  # noqa: E501
        :type image_names: list[str]
        """

        self._image_names = image_names

    @property
    def incident_count(self):
        """Gets the incident_count of this TypesContainerRadarEntity.  # noqa: E501

        IncidentCount is the number of incidents.   # noqa: E501

        :return: The incident_count of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._incident_count

    @incident_count.setter
    def incident_count(self, incident_count):
        """Sets the incident_count of this TypesContainerRadarEntity.

        IncidentCount is the number of incidents.   # noqa: E501

        :param incident_count: The incident_count of this TypesContainerRadarEntity.  # noqa: E501
        :type incident_count: int
        """

        self._incident_count = incident_count

    @property
    def incoming_connections(self):
        """Gets the incoming_connections of this TypesContainerRadarEntity.  # noqa: E501

        IncomingConnections are the radar entity incoming connections.   # noqa: E501

        :return: The incoming_connections of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: list[SharedContainerRadarIncomingConnection]
        """
        return self._incoming_connections

    @incoming_connections.setter
    def incoming_connections(self, incoming_connections):
        """Sets the incoming_connections of this TypesContainerRadarEntity.

        IncomingConnections are the radar entity incoming connections.   # noqa: E501

        :param incoming_connections: The incoming_connections of this TypesContainerRadarEntity.  # noqa: E501
        :type incoming_connections: list[SharedContainerRadarIncomingConnection]
        """

        self._incoming_connections = incoming_connections

    @property
    def internet(self):
        """Gets the internet of this TypesContainerRadarEntity.  # noqa: E501


        :return: The internet of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: SharedInternetConnections
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this TypesContainerRadarEntity.


        :param internet: The internet of this TypesContainerRadarEntity.  # noqa: E501
        :type internet: SharedInternetConnections
        """

        self._internet = internet

    @property
    def istio(self):
        """Gets the istio of this TypesContainerRadarEntity.  # noqa: E501

        Istio states whether it is an istio-monitored entity.   # noqa: E501

        :return: The istio of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._istio

    @istio.setter
    def istio(self, istio):
        """Sets the istio of this TypesContainerRadarEntity.

        Istio states whether it is an istio-monitored entity.   # noqa: E501

        :param istio: The istio of this TypesContainerRadarEntity.  # noqa: E501
        :type istio: bool
        """

        self._istio = istio

    @property
    def istio_authorization_policies(self):
        """Gets the istio_authorization_policies of this TypesContainerRadarEntity.  # noqa: E501

        IstioAuthorizationPolicies are the Istio authorization policies.   # noqa: E501

        :return: The istio_authorization_policies of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: list[IstioAuthorizationPolicy]
        """
        return self._istio_authorization_policies

    @istio_authorization_policies.setter
    def istio_authorization_policies(self, istio_authorization_policies):
        """Sets the istio_authorization_policies of this TypesContainerRadarEntity.

        IstioAuthorizationPolicies are the Istio authorization policies.   # noqa: E501

        :param istio_authorization_policies: The istio_authorization_policies of this TypesContainerRadarEntity.  # noqa: E501
        :type istio_authorization_policies: list[IstioAuthorizationPolicy]
        """

        self._istio_authorization_policies = istio_authorization_policies

    @property
    def k8s(self):
        """Gets the k8s of this TypesContainerRadarEntity.  # noqa: E501


        :return: The k8s of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: SharedProfileKubernetesData
        """
        return self._k8s

    @k8s.setter
    def k8s(self, k8s):
        """Sets the k8s of this TypesContainerRadarEntity.


        :param k8s: The k8s of this TypesContainerRadarEntity.  # noqa: E501
        :type k8s: SharedProfileKubernetesData
        """

        self._k8s = k8s

    @property
    def label(self):
        """Gets the label of this TypesContainerRadarEntity.  # noqa: E501

        Label is the entity's label.   # noqa: E501

        :return: The label of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TypesContainerRadarEntity.

        Label is the entity's label.   # noqa: E501

        :param label: The label of this TypesContainerRadarEntity.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def labels(self):
        """Gets the labels of this TypesContainerRadarEntity.  # noqa: E501

        Labels are the radar entity labels.   # noqa: E501

        :return: The labels of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TypesContainerRadarEntity.

        Labels are the radar entity labels.   # noqa: E501

        :param labels: The labels of this TypesContainerRadarEntity.  # noqa: E501
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def learning(self):
        """Gets the learning of this TypesContainerRadarEntity.  # noqa: E501

        Learning indicates whether the runtime profile associated with the entity is in learning state.   # noqa: E501

        :return: The learning of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._learning

    @learning.setter
    def learning(self, learning):
        """Sets the learning of this TypesContainerRadarEntity.

        Learning indicates whether the runtime profile associated with the entity is in learning state.   # noqa: E501

        :param learning: The learning of this TypesContainerRadarEntity.  # noqa: E501
        :type learning: bool
        """

        self._learning = learning

    @property
    def namespace(self):
        """Gets the namespace of this TypesContainerRadarEntity.  # noqa: E501

        Namespace is the kubernetes namespace the entity belongs to (for kubernetes type).   # noqa: E501

        :return: The namespace of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TypesContainerRadarEntity.

        Namespace is the kubernetes namespace the entity belongs to (for kubernetes type).   # noqa: E501

        :param namespace: The namespace of this TypesContainerRadarEntity.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def network_count(self):
        """Gets the network_count of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The network_count of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._network_count

    @network_count.setter
    def network_count(self, network_count):
        """Sets the network_count of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param network_count: The network_count of this TypesContainerRadarEntity.  # noqa: E501
        :type network_count: int
        """

        self._network_count = network_count

    @property
    def processes_count(self):
        """Gets the processes_count of this TypesContainerRadarEntity.  # noqa: E501

        .   # noqa: E501

        :return: The processes_count of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._processes_count

    @processes_count.setter
    def processes_count(self, processes_count):
        """Sets the processes_count of this TypesContainerRadarEntity.

        .   # noqa: E501

        :param processes_count: The processes_count of this TypesContainerRadarEntity.  # noqa: E501
        :type processes_count: int
        """

        self._processes_count = processes_count

    @property
    def profile_hash(self):
        """Gets the profile_hash of this TypesContainerRadarEntity.  # noqa: E501

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :return: The profile_hash of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._profile_hash

    @profile_hash.setter
    def profile_hash(self, profile_hash):
        """Sets the profile_hash of this TypesContainerRadarEntity.

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :param profile_hash: The profile_hash of this TypesContainerRadarEntity.  # noqa: E501
        :type profile_hash: int
        """

        self._profile_hash = profile_hash

    @property
    def region(self):
        """Gets the region of this TypesContainerRadarEntity.  # noqa: E501

        Region is the cloud provider region.   # noqa: E501

        :return: The region of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TypesContainerRadarEntity.

        Region is the cloud provider region.   # noqa: E501

        :param region: The region of this TypesContainerRadarEntity.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def resolved(self):
        """Gets the resolved of this TypesContainerRadarEntity.  # noqa: E501

        Resolved indicates if the entity has all data resolved or just contains the ID and hash, used to indicate if the console should be updated on entity resolving.   # noqa: E501

        :return: The resolved of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this TypesContainerRadarEntity.

        Resolved indicates if the entity has all data resolved or just contains the ID and hash, used to indicate if the console should be updated on entity resolving.   # noqa: E501

        :param resolved: The resolved of this TypesContainerRadarEntity.  # noqa: E501
        :type resolved: bool
        """

        self._resolved = resolved

    @property
    def service_ip(self):
        """Gets the service_ip of this TypesContainerRadarEntity.  # noqa: E501

        ServiceIP the ip of the kubernetes service (for kubernetes type).   # noqa: E501

        :return: The service_ip of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._service_ip

    @service_ip.setter
    def service_ip(self, service_ip):
        """Sets the service_ip of this TypesContainerRadarEntity.

        ServiceIP the ip of the kubernetes service (for kubernetes type).   # noqa: E501

        :param service_ip: The service_ip of this TypesContainerRadarEntity.  # noqa: E501
        :type service_ip: str
        """

        self._service_ip = service_ip

    @property
    def service_name(self):
        """Gets the service_name of this TypesContainerRadarEntity.  # noqa: E501

        ServiceName is kubernetes service the entity belongs to (for kubernetes type).   # noqa: E501

        :return: The service_name of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this TypesContainerRadarEntity.

        ServiceName is kubernetes service the entity belongs to (for kubernetes type).   # noqa: E501

        :param service_name: The service_name of this TypesContainerRadarEntity.  # noqa: E501
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_ports(self):
        """Gets the service_ports of this TypesContainerRadarEntity.  # noqa: E501

        ServicePorts are the ports the kubernetes service exposes (for kubernetes type).   # noqa: E501

        :return: The service_ports of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: list[int]
        """
        return self._service_ports

    @service_ports.setter
    def service_ports(self, service_ports):
        """Sets the service_ports of this TypesContainerRadarEntity.

        ServicePorts are the ports the kubernetes service exposes (for kubernetes type).   # noqa: E501

        :param service_ports: The service_ports of this TypesContainerRadarEntity.  # noqa: E501
        :type service_ports: list[int]
        """

        self._service_ports = service_ports

    @property
    def subnet_connections(self):
        """Gets the subnet_connections of this TypesContainerRadarEntity.  # noqa: E501


        :return: The subnet_connections of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: SharedSubnetConnections
        """
        return self._subnet_connections

    @subnet_connections.setter
    def subnet_connections(self, subnet_connections):
        """Sets the subnet_connections of this TypesContainerRadarEntity.


        :param subnet_connections: The subnet_connections of this TypesContainerRadarEntity.  # noqa: E501
        :type subnet_connections: SharedSubnetConnections
        """

        self._subnet_connections = subnet_connections

    @property
    def type(self):
        """Gets the type of this TypesContainerRadarEntity.  # noqa: E501


        :return: The type of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: SharedEntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TypesContainerRadarEntity.


        :param type: The type of this TypesContainerRadarEntity.  # noqa: E501
        :type type: SharedEntityType
        """

        self._type = type

    @property
    def vulnerability_distribution(self):
        """Gets the vulnerability_distribution of this TypesContainerRadarEntity.  # noqa: E501


        :return: The vulnerability_distribution of this TypesContainerRadarEntity.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._vulnerability_distribution

    @vulnerability_distribution.setter
    def vulnerability_distribution(self, vulnerability_distribution):
        """Sets the vulnerability_distribution of this TypesContainerRadarEntity.


        :param vulnerability_distribution: The vulnerability_distribution of this TypesContainerRadarEntity.  # noqa: E501
        :type vulnerability_distribution: VulnDistribution
        """

        self._vulnerability_distribution = vulnerability_distribution

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesContainerRadarEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesContainerRadarEntity):
            return True

        return self.to_dict() != other.to_dict()
