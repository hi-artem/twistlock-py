# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ForensicHostEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app': 'str',
        'attack': 'SharedRuntimeAttackType',
        'category': 'SharedIncidentCategory',
        'command': 'str',
        'country': 'str',
        'effect': 'str',
        'interactive': 'bool',
        'ip': 'str',
        'listening_start_time': 'datetime',
        'message': 'str',
        'path': 'str',
        'pid': 'int',
        'port': 'int',
        'ppath': 'str',
        'ppid': 'int',
        'process': 'str',
        'timestamp': 'datetime',
        'type': 'ForensicHostEventType',
        'user': 'str'
    }

    attribute_map = {
        'app': 'app',
        'attack': 'attack',
        'category': 'category',
        'command': 'command',
        'country': 'country',
        'effect': 'effect',
        'interactive': 'interactive',
        'ip': 'ip',
        'listening_start_time': 'listeningStartTime',
        'message': 'message',
        'path': 'path',
        'pid': 'pid',
        'port': 'port',
        'ppath': 'ppath',
        'ppid': 'ppid',
        'process': 'process',
        'timestamp': 'timestamp',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, app=None, attack=None, category=None, command=None, country=None, effect=None, interactive=None, ip=None, listening_start_time=None, message=None, path=None, pid=None, port=None, ppath=None, ppid=None, process=None, timestamp=None, type=None, user=None, local_vars_configuration=None):  # noqa: E501
        """ForensicHostEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._app = None
        self._attack = None
        self._category = None
        self._command = None
        self._country = None
        self._effect = None
        self._interactive = None
        self._ip = None
        self._listening_start_time = None
        self._message = None
        self._path = None
        self._pid = None
        self._port = None
        self._ppath = None
        self._ppid = None
        self._process = None
        self._timestamp = None
        self._type = None
        self._user = None
        self.discriminator = None

        if app is not None:
            self.app = app
        if attack is not None:
            self.attack = attack
        if category is not None:
            self.category = category
        if command is not None:
            self.command = command
        if country is not None:
            self.country = country
        if effect is not None:
            self.effect = effect
        if interactive is not None:
            self.interactive = interactive
        if ip is not None:
            self.ip = ip
        if listening_start_time is not None:
            self.listening_start_time = listening_start_time
        if message is not None:
            self.message = message
        if path is not None:
            self.path = path
        if pid is not None:
            self.pid = pid
        if port is not None:
            self.port = port
        if ppath is not None:
            self.ppath = ppath
        if ppid is not None:
            self.ppid = ppid
        if process is not None:
            self.process = process
        if timestamp is not None:
            self.timestamp = timestamp
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user

    @property
    def app(self):
        """Gets the app of this ForensicHostEvent.  # noqa: E501

        App is the application associated with the event.   # noqa: E501

        :return: The app of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this ForensicHostEvent.

        App is the application associated with the event.   # noqa: E501

        :param app: The app of this ForensicHostEvent.  # noqa: E501
        :type app: str
        """

        self._app = app

    @property
    def attack(self):
        """Gets the attack of this ForensicHostEvent.  # noqa: E501


        :return: The attack of this ForensicHostEvent.  # noqa: E501
        :rtype: SharedRuntimeAttackType
        """
        return self._attack

    @attack.setter
    def attack(self, attack):
        """Sets the attack of this ForensicHostEvent.


        :param attack: The attack of this ForensicHostEvent.  # noqa: E501
        :type attack: SharedRuntimeAttackType
        """

        self._attack = attack

    @property
    def category(self):
        """Gets the category of this ForensicHostEvent.  # noqa: E501


        :return: The category of this ForensicHostEvent.  # noqa: E501
        :rtype: SharedIncidentCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ForensicHostEvent.


        :param category: The category of this ForensicHostEvent.  # noqa: E501
        :type category: SharedIncidentCategory
        """

        self._category = category

    @property
    def command(self):
        """Gets the command of this ForensicHostEvent.  # noqa: E501

        Command is the event command.   # noqa: E501

        :return: The command of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ForensicHostEvent.

        Command is the event command.   # noqa: E501

        :param command: The command of this ForensicHostEvent.  # noqa: E501
        :type command: str
        """

        self._command = command

    @property
    def country(self):
        """Gets the country of this ForensicHostEvent.  # noqa: E501

        Country is the country associated with the event.   # noqa: E501

        :return: The country of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ForensicHostEvent.

        Country is the country associated with the event.   # noqa: E501

        :param country: The country of this ForensicHostEvent.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def effect(self):
        """Gets the effect of this ForensicHostEvent.  # noqa: E501

        Effect is the runtime audit effect.   # noqa: E501

        :return: The effect of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this ForensicHostEvent.

        Effect is the runtime audit effect.   # noqa: E501

        :param effect: The effect of this ForensicHostEvent.  # noqa: E501
        :type effect: str
        """

        self._effect = effect

    @property
    def interactive(self):
        """Gets the interactive of this ForensicHostEvent.  # noqa: E501

        Interactive indicates if the event is interactive.   # noqa: E501

        :return: The interactive of this ForensicHostEvent.  # noqa: E501
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this ForensicHostEvent.

        Interactive indicates if the event is interactive.   # noqa: E501

        :param interactive: The interactive of this ForensicHostEvent.  # noqa: E501
        :type interactive: bool
        """

        self._interactive = interactive

    @property
    def ip(self):
        """Gets the ip of this ForensicHostEvent.  # noqa: E501

        IP is the IP address associated with the event.   # noqa: E501

        :return: The ip of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ForensicHostEvent.

        IP is the IP address associated with the event.   # noqa: E501

        :param ip: The ip of this ForensicHostEvent.  # noqa: E501
        :type ip: str
        """

        self._ip = ip

    @property
    def listening_start_time(self):
        """Gets the listening_start_time of this ForensicHostEvent.  # noqa: E501

        ListeningStartTime is the listening port start time.   # noqa: E501

        :return: The listening_start_time of this ForensicHostEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._listening_start_time

    @listening_start_time.setter
    def listening_start_time(self, listening_start_time):
        """Sets the listening_start_time of this ForensicHostEvent.

        ListeningStartTime is the listening port start time.   # noqa: E501

        :param listening_start_time: The listening_start_time of this ForensicHostEvent.  # noqa: E501
        :type listening_start_time: datetime
        """

        self._listening_start_time = listening_start_time

    @property
    def message(self):
        """Gets the message of this ForensicHostEvent.  # noqa: E501

        Message is the runtime audit message.   # noqa: E501

        :return: The message of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ForensicHostEvent.

        Message is the runtime audit message.   # noqa: E501

        :param message: The message of this ForensicHostEvent.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def path(self):
        """Gets the path of this ForensicHostEvent.  # noqa: E501

        Path is the event path.   # noqa: E501

        :return: The path of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ForensicHostEvent.

        Path is the event path.   # noqa: E501

        :param path: The path of this ForensicHostEvent.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def pid(self):
        """Gets the pid of this ForensicHostEvent.  # noqa: E501

        Pid is the event process id.   # noqa: E501

        :return: The pid of this ForensicHostEvent.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ForensicHostEvent.

        Pid is the event process id.   # noqa: E501

        :param pid: The pid of this ForensicHostEvent.  # noqa: E501
        :type pid: int
        """

        self._pid = pid

    @property
    def port(self):
        """Gets the port of this ForensicHostEvent.  # noqa: E501

        Port is the listening port.   # noqa: E501

        :return: The port of this ForensicHostEvent.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ForensicHostEvent.

        Port is the listening port.   # noqa: E501

        :param port: The port of this ForensicHostEvent.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def ppath(self):
        """Gets the ppath of this ForensicHostEvent.  # noqa: E501

        Path is the event parent path.   # noqa: E501

        :return: The ppath of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._ppath

    @ppath.setter
    def ppath(self, ppath):
        """Sets the ppath of this ForensicHostEvent.

        Path is the event parent path.   # noqa: E501

        :param ppath: The ppath of this ForensicHostEvent.  # noqa: E501
        :type ppath: str
        """

        self._ppath = ppath

    @property
    def ppid(self):
        """Gets the ppid of this ForensicHostEvent.  # noqa: E501

        PPid is the event parent process id.   # noqa: E501

        :return: The ppid of this ForensicHostEvent.  # noqa: E501
        :rtype: int
        """
        return self._ppid

    @ppid.setter
    def ppid(self, ppid):
        """Sets the ppid of this ForensicHostEvent.

        PPid is the event parent process id.   # noqa: E501

        :param ppid: The ppid of this ForensicHostEvent.  # noqa: E501
        :type ppid: int
        """

        self._ppid = ppid

    @property
    def process(self):
        """Gets the process of this ForensicHostEvent.  # noqa: E501

        Process is the event process.   # noqa: E501

        :return: The process of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this ForensicHostEvent.

        Process is the event process.   # noqa: E501

        :param process: The process of this ForensicHostEvent.  # noqa: E501
        :type process: str
        """

        self._process = process

    @property
    def timestamp(self):
        """Gets the timestamp of this ForensicHostEvent.  # noqa: E501

        Timestamp is the event timestamp.   # noqa: E501

        :return: The timestamp of this ForensicHostEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ForensicHostEvent.

        Timestamp is the event timestamp.   # noqa: E501

        :param timestamp: The timestamp of this ForensicHostEvent.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this ForensicHostEvent.  # noqa: E501


        :return: The type of this ForensicHostEvent.  # noqa: E501
        :rtype: ForensicHostEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ForensicHostEvent.


        :param type: The type of this ForensicHostEvent.  # noqa: E501
        :type type: ForensicHostEventType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this ForensicHostEvent.  # noqa: E501

        User is the event user.   # noqa: E501

        :return: The user of this ForensicHostEvent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ForensicHostEvent.

        User is the event user.   # noqa: E501

        :param user: The user of this ForensicHostEvent.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForensicHostEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForensicHostEvent):
            return True

        return self.to_dict() != other.to_dict()
