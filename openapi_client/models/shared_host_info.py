# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedHostInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'all_compliance': 'VulnAllCompliance',
        'app_embedded': 'bool',
        'applications': 'list[VulnApplication]',
        'base_image': 'str',
        'binaries': 'list[SharedBinary]',
        'cloud_metadata': 'CommonCloudMetadata',
        'clusters': 'list[str]',
        'collections': 'list[str]',
        'compliance_distribution': 'VulnDistribution',
        'compliance_issues': 'list[VulnVulnerability]',
        'compliance_issues_count': 'int',
        'compliance_risk_score': 'float',
        'creation_time': 'datetime',
        'distro': 'str',
        'ecs_cluster_name': 'str',
        'err': 'str',
        'external_labels': 'list[CommonExternalLabel]',
        'files': 'list[SharedFileDetails]',
        'firewall_protection': 'WaasProtectionStatus',
        'first_scan_time': 'datetime',
        'history': 'list[SharedImageHistory]',
        'host_devices': 'list[CommonNetworkDeviceIP]',
        'hostname': 'str',
        'hosts': 'dict(str, SharedImageHost)',
        'image_id': 'str',
        'image': 'SharedImage',
        'installed_products': 'SharedInstalledProducts',
        'instances': 'list[SharedImageInstance]',
        'k8s_cluster_addr': 'str',
        'labels': 'list[str]',
        'layers': 'list[str]',
        'missing_distro_vuln_coverage': 'bool',
        'namespaces': 'list[str]',
        'os_distro': 'str',
        'os_distro_release': 'str',
        'os_distro_version': 'str',
        'package_manager': 'bool',
        'packages': 'list[SharedPackages]',
        'registry_namespace': 'str',
        'repo_digests': 'list[str]',
        'repo_tag': 'SharedImageTag',
        'risk_factors': 'dict(str, str)',
        'scan_id': 'int',
        'scan_time': 'datetime',
        'scan_version': 'str',
        'startup_binaries': 'list[SharedBinary]',
        'tags': 'list[SharedImageTag]',
        'top_layer': 'str',
        'trust_result': 'TrustImageResult',
        'trust_status': 'TrustStatus',
        'twistlock_image': 'bool',
        'type': 'SharedScanType',
        'vulnerabilities': 'list[VulnVulnerability]',
        'vulnerabilities_count': 'int',
        'vulnerability_distribution': 'VulnDistribution',
        'vulnerability_risk_score': 'float',
        'wild_fire_usage': 'WildfireUsage'
    }

    attribute_map = {
        'id': '_id',
        'all_compliance': 'allCompliance',
        'app_embedded': 'appEmbedded',
        'applications': 'applications',
        'base_image': 'baseImage',
        'binaries': 'binaries',
        'cloud_metadata': 'cloudMetadata',
        'clusters': 'clusters',
        'collections': 'collections',
        'compliance_distribution': 'complianceDistribution',
        'compliance_issues': 'complianceIssues',
        'compliance_issues_count': 'complianceIssuesCount',
        'compliance_risk_score': 'complianceRiskScore',
        'creation_time': 'creationTime',
        'distro': 'distro',
        'ecs_cluster_name': 'ecsClusterName',
        'err': 'err',
        'external_labels': 'externalLabels',
        'files': 'files',
        'firewall_protection': 'firewallProtection',
        'first_scan_time': 'firstScanTime',
        'history': 'history',
        'host_devices': 'hostDevices',
        'hostname': 'hostname',
        'hosts': 'hosts',
        'image_id': 'imageID',
        'image': 'image',
        'installed_products': 'installedProducts',
        'instances': 'instances',
        'k8s_cluster_addr': 'k8sClusterAddr',
        'labels': 'labels',
        'layers': 'layers',
        'missing_distro_vuln_coverage': 'missingDistroVulnCoverage',
        'namespaces': 'namespaces',
        'os_distro': 'osDistro',
        'os_distro_release': 'osDistroRelease',
        'os_distro_version': 'osDistroVersion',
        'package_manager': 'packageManager',
        'packages': 'packages',
        'registry_namespace': 'registryNamespace',
        'repo_digests': 'repoDigests',
        'repo_tag': 'repoTag',
        'risk_factors': 'riskFactors',
        'scan_id': 'scanID',
        'scan_time': 'scanTime',
        'scan_version': 'scanVersion',
        'startup_binaries': 'startupBinaries',
        'tags': 'tags',
        'top_layer': 'topLayer',
        'trust_result': 'trustResult',
        'trust_status': 'trustStatus',
        'twistlock_image': 'twistlockImage',
        'type': 'type',
        'vulnerabilities': 'vulnerabilities',
        'vulnerabilities_count': 'vulnerabilitiesCount',
        'vulnerability_distribution': 'vulnerabilityDistribution',
        'vulnerability_risk_score': 'vulnerabilityRiskScore',
        'wild_fire_usage': 'wildFireUsage'
    }

    def __init__(self, id=None, all_compliance=None, app_embedded=None, applications=None, base_image=None, binaries=None, cloud_metadata=None, clusters=None, collections=None, compliance_distribution=None, compliance_issues=None, compliance_issues_count=None, compliance_risk_score=None, creation_time=None, distro=None, ecs_cluster_name=None, err=None, external_labels=None, files=None, firewall_protection=None, first_scan_time=None, history=None, host_devices=None, hostname=None, hosts=None, image_id=None, image=None, installed_products=None, instances=None, k8s_cluster_addr=None, labels=None, layers=None, missing_distro_vuln_coverage=None, namespaces=None, os_distro=None, os_distro_release=None, os_distro_version=None, package_manager=None, packages=None, registry_namespace=None, repo_digests=None, repo_tag=None, risk_factors=None, scan_id=None, scan_time=None, scan_version=None, startup_binaries=None, tags=None, top_layer=None, trust_result=None, trust_status=None, twistlock_image=None, type=None, vulnerabilities=None, vulnerabilities_count=None, vulnerability_distribution=None, vulnerability_risk_score=None, wild_fire_usage=None, local_vars_configuration=None):  # noqa: E501
        """SharedHostInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._all_compliance = None
        self._app_embedded = None
        self._applications = None
        self._base_image = None
        self._binaries = None
        self._cloud_metadata = None
        self._clusters = None
        self._collections = None
        self._compliance_distribution = None
        self._compliance_issues = None
        self._compliance_issues_count = None
        self._compliance_risk_score = None
        self._creation_time = None
        self._distro = None
        self._ecs_cluster_name = None
        self._err = None
        self._external_labels = None
        self._files = None
        self._firewall_protection = None
        self._first_scan_time = None
        self._history = None
        self._host_devices = None
        self._hostname = None
        self._hosts = None
        self._image_id = None
        self._image = None
        self._installed_products = None
        self._instances = None
        self._k8s_cluster_addr = None
        self._labels = None
        self._layers = None
        self._missing_distro_vuln_coverage = None
        self._namespaces = None
        self._os_distro = None
        self._os_distro_release = None
        self._os_distro_version = None
        self._package_manager = None
        self._packages = None
        self._registry_namespace = None
        self._repo_digests = None
        self._repo_tag = None
        self._risk_factors = None
        self._scan_id = None
        self._scan_time = None
        self._scan_version = None
        self._startup_binaries = None
        self._tags = None
        self._top_layer = None
        self._trust_result = None
        self._trust_status = None
        self._twistlock_image = None
        self._type = None
        self._vulnerabilities = None
        self._vulnerabilities_count = None
        self._vulnerability_distribution = None
        self._vulnerability_risk_score = None
        self._wild_fire_usage = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if all_compliance is not None:
            self.all_compliance = all_compliance
        if app_embedded is not None:
            self.app_embedded = app_embedded
        if applications is not None:
            self.applications = applications
        if base_image is not None:
            self.base_image = base_image
        if binaries is not None:
            self.binaries = binaries
        if cloud_metadata is not None:
            self.cloud_metadata = cloud_metadata
        if clusters is not None:
            self.clusters = clusters
        if collections is not None:
            self.collections = collections
        if compliance_distribution is not None:
            self.compliance_distribution = compliance_distribution
        if compliance_issues is not None:
            self.compliance_issues = compliance_issues
        if compliance_issues_count is not None:
            self.compliance_issues_count = compliance_issues_count
        if compliance_risk_score is not None:
            self.compliance_risk_score = compliance_risk_score
        if creation_time is not None:
            self.creation_time = creation_time
        if distro is not None:
            self.distro = distro
        if ecs_cluster_name is not None:
            self.ecs_cluster_name = ecs_cluster_name
        if err is not None:
            self.err = err
        if external_labels is not None:
            self.external_labels = external_labels
        if files is not None:
            self.files = files
        if firewall_protection is not None:
            self.firewall_protection = firewall_protection
        if first_scan_time is not None:
            self.first_scan_time = first_scan_time
        if history is not None:
            self.history = history
        if host_devices is not None:
            self.host_devices = host_devices
        if hostname is not None:
            self.hostname = hostname
        if hosts is not None:
            self.hosts = hosts
        if image_id is not None:
            self.image_id = image_id
        if image is not None:
            self.image = image
        if installed_products is not None:
            self.installed_products = installed_products
        if instances is not None:
            self.instances = instances
        if k8s_cluster_addr is not None:
            self.k8s_cluster_addr = k8s_cluster_addr
        if labels is not None:
            self.labels = labels
        if layers is not None:
            self.layers = layers
        if missing_distro_vuln_coverage is not None:
            self.missing_distro_vuln_coverage = missing_distro_vuln_coverage
        if namespaces is not None:
            self.namespaces = namespaces
        if os_distro is not None:
            self.os_distro = os_distro
        if os_distro_release is not None:
            self.os_distro_release = os_distro_release
        if os_distro_version is not None:
            self.os_distro_version = os_distro_version
        if package_manager is not None:
            self.package_manager = package_manager
        if packages is not None:
            self.packages = packages
        if registry_namespace is not None:
            self.registry_namespace = registry_namespace
        if repo_digests is not None:
            self.repo_digests = repo_digests
        if repo_tag is not None:
            self.repo_tag = repo_tag
        if risk_factors is not None:
            self.risk_factors = risk_factors
        if scan_id is not None:
            self.scan_id = scan_id
        if scan_time is not None:
            self.scan_time = scan_time
        if scan_version is not None:
            self.scan_version = scan_version
        if startup_binaries is not None:
            self.startup_binaries = startup_binaries
        if tags is not None:
            self.tags = tags
        if top_layer is not None:
            self.top_layer = top_layer
        if trust_result is not None:
            self.trust_result = trust_result
        if trust_status is not None:
            self.trust_status = trust_status
        if twistlock_image is not None:
            self.twistlock_image = twistlock_image
        if type is not None:
            self.type = type
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities
        if vulnerabilities_count is not None:
            self.vulnerabilities_count = vulnerabilities_count
        if vulnerability_distribution is not None:
            self.vulnerability_distribution = vulnerability_distribution
        if vulnerability_risk_score is not None:
            self.vulnerability_risk_score = vulnerability_risk_score
        if wild_fire_usage is not None:
            self.wild_fire_usage = wild_fire_usage

    @property
    def id(self):
        """Gets the id of this SharedHostInfo.  # noqa: E501

        Image identifier (image ID or repo:tag).   # noqa: E501

        :return: The id of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedHostInfo.

        Image identifier (image ID or repo:tag).   # noqa: E501

        :param id: The id of this SharedHostInfo.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def all_compliance(self):
        """Gets the all_compliance of this SharedHostInfo.  # noqa: E501


        :return: The all_compliance of this SharedHostInfo.  # noqa: E501
        :rtype: VulnAllCompliance
        """
        return self._all_compliance

    @all_compliance.setter
    def all_compliance(self, all_compliance):
        """Sets the all_compliance of this SharedHostInfo.


        :param all_compliance: The all_compliance of this SharedHostInfo.  # noqa: E501
        :type all_compliance: VulnAllCompliance
        """

        self._all_compliance = all_compliance

    @property
    def app_embedded(self):
        """Gets the app_embedded of this SharedHostInfo.  # noqa: E501

        Indicates that this image was scanned by an App-Embedded Defender.   # noqa: E501

        :return: The app_embedded of this SharedHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._app_embedded

    @app_embedded.setter
    def app_embedded(self, app_embedded):
        """Sets the app_embedded of this SharedHostInfo.

        Indicates that this image was scanned by an App-Embedded Defender.   # noqa: E501

        :param app_embedded: The app_embedded of this SharedHostInfo.  # noqa: E501
        :type app_embedded: bool
        """

        self._app_embedded = app_embedded

    @property
    def applications(self):
        """Gets the applications of this SharedHostInfo.  # noqa: E501

        Products in the image.   # noqa: E501

        :return: The applications of this SharedHostInfo.  # noqa: E501
        :rtype: list[VulnApplication]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this SharedHostInfo.

        Products in the image.   # noqa: E501

        :param applications: The applications of this SharedHostInfo.  # noqa: E501
        :type applications: list[VulnApplication]
        """

        self._applications = applications

    @property
    def base_image(self):
        """Gets the base_image of this SharedHostInfo.  # noqa: E501

        Image’s base image name. Used when filtering the vulnerabilities by base images.   # noqa: E501

        :return: The base_image of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._base_image

    @base_image.setter
    def base_image(self, base_image):
        """Sets the base_image of this SharedHostInfo.

        Image’s base image name. Used when filtering the vulnerabilities by base images.   # noqa: E501

        :param base_image: The base_image of this SharedHostInfo.  # noqa: E501
        :type base_image: str
        """

        self._base_image = base_image

    @property
    def binaries(self):
        """Gets the binaries of this SharedHostInfo.  # noqa: E501

        Binaries in the image.   # noqa: E501

        :return: The binaries of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedBinary]
        """
        return self._binaries

    @binaries.setter
    def binaries(self, binaries):
        """Sets the binaries of this SharedHostInfo.

        Binaries in the image.   # noqa: E501

        :param binaries: The binaries of this SharedHostInfo.  # noqa: E501
        :type binaries: list[SharedBinary]
        """

        self._binaries = binaries

    @property
    def cloud_metadata(self):
        """Gets the cloud_metadata of this SharedHostInfo.  # noqa: E501


        :return: The cloud_metadata of this SharedHostInfo.  # noqa: E501
        :rtype: CommonCloudMetadata
        """
        return self._cloud_metadata

    @cloud_metadata.setter
    def cloud_metadata(self, cloud_metadata):
        """Sets the cloud_metadata of this SharedHostInfo.


        :param cloud_metadata: The cloud_metadata of this SharedHostInfo.  # noqa: E501
        :type cloud_metadata: CommonCloudMetadata
        """

        self._cloud_metadata = cloud_metadata

    @property
    def clusters(self):
        """Gets the clusters of this SharedHostInfo.  # noqa: E501

        Cluster names.   # noqa: E501

        :return: The clusters of this SharedHostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this SharedHostInfo.

        Cluster names.   # noqa: E501

        :param clusters: The clusters of this SharedHostInfo.  # noqa: E501
        :type clusters: list[str]
        """

        self._clusters = clusters

    @property
    def collections(self):
        """Gets the collections of this SharedHostInfo.  # noqa: E501

        Collections to which this result applies.   # noqa: E501

        :return: The collections of this SharedHostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedHostInfo.

        Collections to which this result applies.   # noqa: E501

        :param collections: The collections of this SharedHostInfo.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def compliance_distribution(self):
        """Gets the compliance_distribution of this SharedHostInfo.  # noqa: E501


        :return: The compliance_distribution of this SharedHostInfo.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._compliance_distribution

    @compliance_distribution.setter
    def compliance_distribution(self, compliance_distribution):
        """Sets the compliance_distribution of this SharedHostInfo.


        :param compliance_distribution: The compliance_distribution of this SharedHostInfo.  # noqa: E501
        :type compliance_distribution: VulnDistribution
        """

        self._compliance_distribution = compliance_distribution

    @property
    def compliance_issues(self):
        """Gets the compliance_issues of this SharedHostInfo.  # noqa: E501

        All the compliance issues.   # noqa: E501

        :return: The compliance_issues of this SharedHostInfo.  # noqa: E501
        :rtype: list[VulnVulnerability]
        """
        return self._compliance_issues

    @compliance_issues.setter
    def compliance_issues(self, compliance_issues):
        """Sets the compliance_issues of this SharedHostInfo.

        All the compliance issues.   # noqa: E501

        :param compliance_issues: The compliance_issues of this SharedHostInfo.  # noqa: E501
        :type compliance_issues: list[VulnVulnerability]
        """

        self._compliance_issues = compliance_issues

    @property
    def compliance_issues_count(self):
        """Gets the compliance_issues_count of this SharedHostInfo.  # noqa: E501

        Number of compliance issues.   # noqa: E501

        :return: The compliance_issues_count of this SharedHostInfo.  # noqa: E501
        :rtype: int
        """
        return self._compliance_issues_count

    @compliance_issues_count.setter
    def compliance_issues_count(self, compliance_issues_count):
        """Sets the compliance_issues_count of this SharedHostInfo.

        Number of compliance issues.   # noqa: E501

        :param compliance_issues_count: The compliance_issues_count of this SharedHostInfo.  # noqa: E501
        :type compliance_issues_count: int
        """

        self._compliance_issues_count = compliance_issues_count

    @property
    def compliance_risk_score(self):
        """Gets the compliance_risk_score of this SharedHostInfo.  # noqa: E501

        Compliance risk score for the image.   # noqa: E501

        :return: The compliance_risk_score of this SharedHostInfo.  # noqa: E501
        :rtype: float
        """
        return self._compliance_risk_score

    @compliance_risk_score.setter
    def compliance_risk_score(self, compliance_risk_score):
        """Sets the compliance_risk_score of this SharedHostInfo.

        Compliance risk score for the image.   # noqa: E501

        :param compliance_risk_score: The compliance_risk_score of this SharedHostInfo.  # noqa: E501
        :type compliance_risk_score: float
        """

        self._compliance_risk_score = compliance_risk_score

    @property
    def creation_time(self):
        """Gets the creation_time of this SharedHostInfo.  # noqa: E501

        Date/time when the image was created.   # noqa: E501

        :return: The creation_time of this SharedHostInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this SharedHostInfo.

        Date/time when the image was created.   # noqa: E501

        :param creation_time: The creation_time of this SharedHostInfo.  # noqa: E501
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def distro(self):
        """Gets the distro of this SharedHostInfo.  # noqa: E501

        Full name of the distribution.   # noqa: E501

        :return: The distro of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """Sets the distro of this SharedHostInfo.

        Full name of the distribution.   # noqa: E501

        :param distro: The distro of this SharedHostInfo.  # noqa: E501
        :type distro: str
        """

        self._distro = distro

    @property
    def ecs_cluster_name(self):
        """Gets the ecs_cluster_name of this SharedHostInfo.  # noqa: E501

        ECS cluster name.   # noqa: E501

        :return: The ecs_cluster_name of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._ecs_cluster_name

    @ecs_cluster_name.setter
    def ecs_cluster_name(self, ecs_cluster_name):
        """Sets the ecs_cluster_name of this SharedHostInfo.

        ECS cluster name.   # noqa: E501

        :param ecs_cluster_name: The ecs_cluster_name of this SharedHostInfo.  # noqa: E501
        :type ecs_cluster_name: str
        """

        self._ecs_cluster_name = ecs_cluster_name

    @property
    def err(self):
        """Gets the err of this SharedHostInfo.  # noqa: E501

        Description of an error that occurred during image health scan.   # noqa: E501

        :return: The err of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this SharedHostInfo.

        Description of an error that occurred during image health scan.   # noqa: E501

        :param err: The err of this SharedHostInfo.  # noqa: E501
        :type err: str
        """

        self._err = err

    @property
    def external_labels(self):
        """Gets the external_labels of this SharedHostInfo.  # noqa: E501

        Kubernetes external labels of all containers running this image.   # noqa: E501

        :return: The external_labels of this SharedHostInfo.  # noqa: E501
        :rtype: list[CommonExternalLabel]
        """
        return self._external_labels

    @external_labels.setter
    def external_labels(self, external_labels):
        """Sets the external_labels of this SharedHostInfo.

        Kubernetes external labels of all containers running this image.   # noqa: E501

        :param external_labels: The external_labels of this SharedHostInfo.  # noqa: E501
        :type external_labels: list[CommonExternalLabel]
        """

        self._external_labels = external_labels

    @property
    def files(self):
        """Gets the files of this SharedHostInfo.  # noqa: E501

        Files in the container.   # noqa: E501

        :return: The files of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedFileDetails]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SharedHostInfo.

        Files in the container.   # noqa: E501

        :param files: The files of this SharedHostInfo.  # noqa: E501
        :type files: list[SharedFileDetails]
        """

        self._files = files

    @property
    def firewall_protection(self):
        """Gets the firewall_protection of this SharedHostInfo.  # noqa: E501


        :return: The firewall_protection of this SharedHostInfo.  # noqa: E501
        :rtype: WaasProtectionStatus
        """
        return self._firewall_protection

    @firewall_protection.setter
    def firewall_protection(self, firewall_protection):
        """Sets the firewall_protection of this SharedHostInfo.


        :param firewall_protection: The firewall_protection of this SharedHostInfo.  # noqa: E501
        :type firewall_protection: WaasProtectionStatus
        """

        self._firewall_protection = firewall_protection

    @property
    def first_scan_time(self):
        """Gets the first_scan_time of this SharedHostInfo.  # noqa: E501

        Date/time when this image was first scanned (preserved during version updates).   # noqa: E501

        :return: The first_scan_time of this SharedHostInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._first_scan_time

    @first_scan_time.setter
    def first_scan_time(self, first_scan_time):
        """Sets the first_scan_time of this SharedHostInfo.

        Date/time when this image was first scanned (preserved during version updates).   # noqa: E501

        :param first_scan_time: The first_scan_time of this SharedHostInfo.  # noqa: E501
        :type first_scan_time: datetime
        """

        self._first_scan_time = first_scan_time

    @property
    def history(self):
        """Gets the history of this SharedHostInfo.  # noqa: E501

        Docker image history.   # noqa: E501

        :return: The history of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedImageHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this SharedHostInfo.

        Docker image history.   # noqa: E501

        :param history: The history of this SharedHostInfo.  # noqa: E501
        :type history: list[SharedImageHistory]
        """

        self._history = history

    @property
    def host_devices(self):
        """Gets the host_devices of this SharedHostInfo.  # noqa: E501

        Map from host network device name to IP address.   # noqa: E501

        :return: The host_devices of this SharedHostInfo.  # noqa: E501
        :rtype: list[CommonNetworkDeviceIP]
        """
        return self._host_devices

    @host_devices.setter
    def host_devices(self, host_devices):
        """Sets the host_devices of this SharedHostInfo.

        Map from host network device name to IP address.   # noqa: E501

        :param host_devices: The host_devices of this SharedHostInfo.  # noqa: E501
        :type host_devices: list[CommonNetworkDeviceIP]
        """

        self._host_devices = host_devices

    @property
    def hostname(self):
        """Gets the hostname of this SharedHostInfo.  # noqa: E501

        Name of the host that was scanned.   # noqa: E501

        :return: The hostname of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedHostInfo.

        Name of the host that was scanned.   # noqa: E501

        :param hostname: The hostname of this SharedHostInfo.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def hosts(self):
        """Gets the hosts of this SharedHostInfo.  # noqa: E501

        ImageHosts is a fast index for image scan results metadata per host  # noqa: E501

        :return: The hosts of this SharedHostInfo.  # noqa: E501
        :rtype: dict(str, SharedImageHost)
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this SharedHostInfo.

        ImageHosts is a fast index for image scan results metadata per host  # noqa: E501

        :param hosts: The hosts of this SharedHostInfo.  # noqa: E501
        :type hosts: dict(str, SharedImageHost)
        """

        self._hosts = hosts

    @property
    def image_id(self):
        """Gets the image_id of this SharedHostInfo.  # noqa: E501

        Image ID.   # noqa: E501

        :return: The image_id of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this SharedHostInfo.

        Image ID.   # noqa: E501

        :param image_id: The image_id of this SharedHostInfo.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image(self):
        """Gets the image of this SharedHostInfo.  # noqa: E501


        :return: The image of this SharedHostInfo.  # noqa: E501
        :rtype: SharedImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SharedHostInfo.


        :param image: The image of this SharedHostInfo.  # noqa: E501
        :type image: SharedImage
        """

        self._image = image

    @property
    def installed_products(self):
        """Gets the installed_products of this SharedHostInfo.  # noqa: E501


        :return: The installed_products of this SharedHostInfo.  # noqa: E501
        :rtype: SharedInstalledProducts
        """
        return self._installed_products

    @installed_products.setter
    def installed_products(self, installed_products):
        """Sets the installed_products of this SharedHostInfo.


        :param installed_products: The installed_products of this SharedHostInfo.  # noqa: E501
        :type installed_products: SharedInstalledProducts
        """

        self._installed_products = installed_products

    @property
    def instances(self):
        """Gets the instances of this SharedHostInfo.  # noqa: E501

        Details about each occurrence of the image (tag + host).   # noqa: E501

        :return: The instances of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedImageInstance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this SharedHostInfo.

        Details about each occurrence of the image (tag + host).   # noqa: E501

        :param instances: The instances of this SharedHostInfo.  # noqa: E501
        :type instances: list[SharedImageInstance]
        """

        self._instances = instances

    @property
    def k8s_cluster_addr(self):
        """Gets the k8s_cluster_addr of this SharedHostInfo.  # noqa: E501

        Endpoint of the Kubernetes API server.   # noqa: E501

        :return: The k8s_cluster_addr of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_addr

    @k8s_cluster_addr.setter
    def k8s_cluster_addr(self, k8s_cluster_addr):
        """Sets the k8s_cluster_addr of this SharedHostInfo.

        Endpoint of the Kubernetes API server.   # noqa: E501

        :param k8s_cluster_addr: The k8s_cluster_addr of this SharedHostInfo.  # noqa: E501
        :type k8s_cluster_addr: str
        """

        self._k8s_cluster_addr = k8s_cluster_addr

    @property
    def labels(self):
        """Gets the labels of this SharedHostInfo.  # noqa: E501

        Image labels.   # noqa: E501

        :return: The labels of this SharedHostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SharedHostInfo.

        Image labels.   # noqa: E501

        :param labels: The labels of this SharedHostInfo.  # noqa: E501
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def layers(self):
        """Gets the layers of this SharedHostInfo.  # noqa: E501

        Image's filesystem layers. Each layer is a SHA256 digest of the filesystem diff See: https://windsock.io/explaining-docker-image-ids/.   # noqa: E501

        :return: The layers of this SharedHostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this SharedHostInfo.

        Image's filesystem layers. Each layer is a SHA256 digest of the filesystem diff See: https://windsock.io/explaining-docker-image-ids/.   # noqa: E501

        :param layers: The layers of this SharedHostInfo.  # noqa: E501
        :type layers: list[str]
        """

        self._layers = layers

    @property
    def missing_distro_vuln_coverage(self):
        """Gets the missing_distro_vuln_coverage of this SharedHostInfo.  # noqa: E501

        Indicates if the image OS is covered in the IS (true) or not (false).   # noqa: E501

        :return: The missing_distro_vuln_coverage of this SharedHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._missing_distro_vuln_coverage

    @missing_distro_vuln_coverage.setter
    def missing_distro_vuln_coverage(self, missing_distro_vuln_coverage):
        """Sets the missing_distro_vuln_coverage of this SharedHostInfo.

        Indicates if the image OS is covered in the IS (true) or not (false).   # noqa: E501

        :param missing_distro_vuln_coverage: The missing_distro_vuln_coverage of this SharedHostInfo.  # noqa: E501
        :type missing_distro_vuln_coverage: bool
        """

        self._missing_distro_vuln_coverage = missing_distro_vuln_coverage

    @property
    def namespaces(self):
        """Gets the namespaces of this SharedHostInfo.  # noqa: E501

        k8s namespaces of all the containers running this image.   # noqa: E501

        :return: The namespaces of this SharedHostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this SharedHostInfo.

        k8s namespaces of all the containers running this image.   # noqa: E501

        :param namespaces: The namespaces of this SharedHostInfo.  # noqa: E501
        :type namespaces: list[str]
        """

        self._namespaces = namespaces

    @property
    def os_distro(self):
        """Gets the os_distro of this SharedHostInfo.  # noqa: E501

        Name of the OS distribution.   # noqa: E501

        :return: The os_distro of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_distro

    @os_distro.setter
    def os_distro(self, os_distro):
        """Sets the os_distro of this SharedHostInfo.

        Name of the OS distribution.   # noqa: E501

        :param os_distro: The os_distro of this SharedHostInfo.  # noqa: E501
        :type os_distro: str
        """

        self._os_distro = os_distro

    @property
    def os_distro_release(self):
        """Gets the os_distro_release of this SharedHostInfo.  # noqa: E501

        OS distribution release.   # noqa: E501

        :return: The os_distro_release of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_distro_release

    @os_distro_release.setter
    def os_distro_release(self, os_distro_release):
        """Sets the os_distro_release of this SharedHostInfo.

        OS distribution release.   # noqa: E501

        :param os_distro_release: The os_distro_release of this SharedHostInfo.  # noqa: E501
        :type os_distro_release: str
        """

        self._os_distro_release = os_distro_release

    @property
    def os_distro_version(self):
        """Gets the os_distro_version of this SharedHostInfo.  # noqa: E501

        OS distribution version.   # noqa: E501

        :return: The os_distro_version of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_distro_version

    @os_distro_version.setter
    def os_distro_version(self, os_distro_version):
        """Sets the os_distro_version of this SharedHostInfo.

        OS distribution version.   # noqa: E501

        :param os_distro_version: The os_distro_version of this SharedHostInfo.  # noqa: E501
        :type os_distro_version: str
        """

        self._os_distro_version = os_distro_version

    @property
    def package_manager(self):
        """Gets the package_manager of this SharedHostInfo.  # noqa: E501

        Indicates if the package manager is installed for the OS.   # noqa: E501

        :return: The package_manager of this SharedHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._package_manager

    @package_manager.setter
    def package_manager(self, package_manager):
        """Sets the package_manager of this SharedHostInfo.

        Indicates if the package manager is installed for the OS.   # noqa: E501

        :param package_manager: The package_manager of this SharedHostInfo.  # noqa: E501
        :type package_manager: bool
        """

        self._package_manager = package_manager

    @property
    def packages(self):
        """Gets the packages of this SharedHostInfo.  # noqa: E501

        Packages which exist in the image.   # noqa: E501

        :return: The packages of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedPackages]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """Sets the packages of this SharedHostInfo.

        Packages which exist in the image.   # noqa: E501

        :param packages: The packages of this SharedHostInfo.  # noqa: E501
        :type packages: list[SharedPackages]
        """

        self._packages = packages

    @property
    def registry_namespace(self):
        """Gets the registry_namespace of this SharedHostInfo.  # noqa: E501

        IBM cloud namespace to which the image belongs.   # noqa: E501

        :return: The registry_namespace of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._registry_namespace

    @registry_namespace.setter
    def registry_namespace(self, registry_namespace):
        """Sets the registry_namespace of this SharedHostInfo.

        IBM cloud namespace to which the image belongs.   # noqa: E501

        :param registry_namespace: The registry_namespace of this SharedHostInfo.  # noqa: E501
        :type registry_namespace: str
        """

        self._registry_namespace = registry_namespace

    @property
    def repo_digests(self):
        """Gets the repo_digests of this SharedHostInfo.  # noqa: E501

        Digests of the image. Used for content trust (notary). Has one digest per tag.   # noqa: E501

        :return: The repo_digests of this SharedHostInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_digests

    @repo_digests.setter
    def repo_digests(self, repo_digests):
        """Sets the repo_digests of this SharedHostInfo.

        Digests of the image. Used for content trust (notary). Has one digest per tag.   # noqa: E501

        :param repo_digests: The repo_digests of this SharedHostInfo.  # noqa: E501
        :type repo_digests: list[str]
        """

        self._repo_digests = repo_digests

    @property
    def repo_tag(self):
        """Gets the repo_tag of this SharedHostInfo.  # noqa: E501


        :return: The repo_tag of this SharedHostInfo.  # noqa: E501
        :rtype: SharedImageTag
        """
        return self._repo_tag

    @repo_tag.setter
    def repo_tag(self, repo_tag):
        """Sets the repo_tag of this SharedHostInfo.


        :param repo_tag: The repo_tag of this SharedHostInfo.  # noqa: E501
        :type repo_tag: SharedImageTag
        """

        self._repo_tag = repo_tag

    @property
    def risk_factors(self):
        """Gets the risk_factors of this SharedHostInfo.  # noqa: E501

        RiskFactors maps the existence of vulnerability risk factors  # noqa: E501

        :return: The risk_factors of this SharedHostInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._risk_factors

    @risk_factors.setter
    def risk_factors(self, risk_factors):
        """Sets the risk_factors of this SharedHostInfo.

        RiskFactors maps the existence of vulnerability risk factors  # noqa: E501

        :param risk_factors: The risk_factors of this SharedHostInfo.  # noqa: E501
        :type risk_factors: dict(str, str)
        """

        self._risk_factors = risk_factors

    @property
    def scan_id(self):
        """Gets the scan_id of this SharedHostInfo.  # noqa: E501

        Scan ID.   # noqa: E501

        :return: The scan_id of this SharedHostInfo.  # noqa: E501
        :rtype: int
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this SharedHostInfo.

        Scan ID.   # noqa: E501

        :param scan_id: The scan_id of this SharedHostInfo.  # noqa: E501
        :type scan_id: int
        """

        self._scan_id = scan_id

    @property
    def scan_time(self):
        """Gets the scan_time of this SharedHostInfo.  # noqa: E501

        Date/time of the last scan of the image.   # noqa: E501

        :return: The scan_time of this SharedHostInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._scan_time

    @scan_time.setter
    def scan_time(self, scan_time):
        """Sets the scan_time of this SharedHostInfo.

        Date/time of the last scan of the image.   # noqa: E501

        :param scan_time: The scan_time of this SharedHostInfo.  # noqa: E501
        :type scan_time: datetime
        """

        self._scan_time = scan_time

    @property
    def scan_version(self):
        """Gets the scan_version of this SharedHostInfo.  # noqa: E501

        Defender version that published the image.   # noqa: E501

        :return: The scan_version of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._scan_version

    @scan_version.setter
    def scan_version(self, scan_version):
        """Sets the scan_version of this SharedHostInfo.

        Defender version that published the image.   # noqa: E501

        :param scan_version: The scan_version of this SharedHostInfo.  # noqa: E501
        :type scan_version: str
        """

        self._scan_version = scan_version

    @property
    def startup_binaries(self):
        """Gets the startup_binaries of this SharedHostInfo.  # noqa: E501

        Binaries which are expected to run when the container is created from this image.   # noqa: E501

        :return: The startup_binaries of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedBinary]
        """
        return self._startup_binaries

    @startup_binaries.setter
    def startup_binaries(self, startup_binaries):
        """Sets the startup_binaries of this SharedHostInfo.

        Binaries which are expected to run when the container is created from this image.   # noqa: E501

        :param startup_binaries: The startup_binaries of this SharedHostInfo.  # noqa: E501
        :type startup_binaries: list[SharedBinary]
        """

        self._startup_binaries = startup_binaries

    @property
    def tags(self):
        """Gets the tags of this SharedHostInfo.  # noqa: E501

        Tags associated with the given image.   # noqa: E501

        :return: The tags of this SharedHostInfo.  # noqa: E501
        :rtype: list[SharedImageTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SharedHostInfo.

        Tags associated with the given image.   # noqa: E501

        :param tags: The tags of this SharedHostInfo.  # noqa: E501
        :type tags: list[SharedImageTag]
        """

        self._tags = tags

    @property
    def top_layer(self):
        """Gets the top_layer of this SharedHostInfo.  # noqa: E501

        SHA256 of the image's last layer that is the last element of the Layers field.   # noqa: E501

        :return: The top_layer of this SharedHostInfo.  # noqa: E501
        :rtype: str
        """
        return self._top_layer

    @top_layer.setter
    def top_layer(self, top_layer):
        """Sets the top_layer of this SharedHostInfo.

        SHA256 of the image's last layer that is the last element of the Layers field.   # noqa: E501

        :param top_layer: The top_layer of this SharedHostInfo.  # noqa: E501
        :type top_layer: str
        """

        self._top_layer = top_layer

    @property
    def trust_result(self):
        """Gets the trust_result of this SharedHostInfo.  # noqa: E501


        :return: The trust_result of this SharedHostInfo.  # noqa: E501
        :rtype: TrustImageResult
        """
        return self._trust_result

    @trust_result.setter
    def trust_result(self, trust_result):
        """Sets the trust_result of this SharedHostInfo.


        :param trust_result: The trust_result of this SharedHostInfo.  # noqa: E501
        :type trust_result: TrustImageResult
        """

        self._trust_result = trust_result

    @property
    def trust_status(self):
        """Gets the trust_status of this SharedHostInfo.  # noqa: E501


        :return: The trust_status of this SharedHostInfo.  # noqa: E501
        :rtype: TrustStatus
        """
        return self._trust_status

    @trust_status.setter
    def trust_status(self, trust_status):
        """Sets the trust_status of this SharedHostInfo.


        :param trust_status: The trust_status of this SharedHostInfo.  # noqa: E501
        :type trust_status: TrustStatus
        """

        self._trust_status = trust_status

    @property
    def twistlock_image(self):
        """Gets the twistlock_image of this SharedHostInfo.  # noqa: E501

        Indicates if the image is a Twistlock image (true) or not (false).   # noqa: E501

        :return: The twistlock_image of this SharedHostInfo.  # noqa: E501
        :rtype: bool
        """
        return self._twistlock_image

    @twistlock_image.setter
    def twistlock_image(self, twistlock_image):
        """Sets the twistlock_image of this SharedHostInfo.

        Indicates if the image is a Twistlock image (true) or not (false).   # noqa: E501

        :param twistlock_image: The twistlock_image of this SharedHostInfo.  # noqa: E501
        :type twistlock_image: bool
        """

        self._twistlock_image = twistlock_image

    @property
    def type(self):
        """Gets the type of this SharedHostInfo.  # noqa: E501


        :return: The type of this SharedHostInfo.  # noqa: E501
        :rtype: SharedScanType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedHostInfo.


        :param type: The type of this SharedHostInfo.  # noqa: E501
        :type type: SharedScanType
        """

        self._type = type

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this SharedHostInfo.  # noqa: E501

        CVE vulnerabilities of the image.   # noqa: E501

        :return: The vulnerabilities of this SharedHostInfo.  # noqa: E501
        :rtype: list[VulnVulnerability]
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this SharedHostInfo.

        CVE vulnerabilities of the image.   # noqa: E501

        :param vulnerabilities: The vulnerabilities of this SharedHostInfo.  # noqa: E501
        :type vulnerabilities: list[VulnVulnerability]
        """

        self._vulnerabilities = vulnerabilities

    @property
    def vulnerabilities_count(self):
        """Gets the vulnerabilities_count of this SharedHostInfo.  # noqa: E501

        Total number of vulnerabilities.   # noqa: E501

        :return: The vulnerabilities_count of this SharedHostInfo.  # noqa: E501
        :rtype: int
        """
        return self._vulnerabilities_count

    @vulnerabilities_count.setter
    def vulnerabilities_count(self, vulnerabilities_count):
        """Sets the vulnerabilities_count of this SharedHostInfo.

        Total number of vulnerabilities.   # noqa: E501

        :param vulnerabilities_count: The vulnerabilities_count of this SharedHostInfo.  # noqa: E501
        :type vulnerabilities_count: int
        """

        self._vulnerabilities_count = vulnerabilities_count

    @property
    def vulnerability_distribution(self):
        """Gets the vulnerability_distribution of this SharedHostInfo.  # noqa: E501


        :return: The vulnerability_distribution of this SharedHostInfo.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._vulnerability_distribution

    @vulnerability_distribution.setter
    def vulnerability_distribution(self, vulnerability_distribution):
        """Sets the vulnerability_distribution of this SharedHostInfo.


        :param vulnerability_distribution: The vulnerability_distribution of this SharedHostInfo.  # noqa: E501
        :type vulnerability_distribution: VulnDistribution
        """

        self._vulnerability_distribution = vulnerability_distribution

    @property
    def vulnerability_risk_score(self):
        """Gets the vulnerability_risk_score of this SharedHostInfo.  # noqa: E501

        Image's CVE risk score.   # noqa: E501

        :return: The vulnerability_risk_score of this SharedHostInfo.  # noqa: E501
        :rtype: float
        """
        return self._vulnerability_risk_score

    @vulnerability_risk_score.setter
    def vulnerability_risk_score(self, vulnerability_risk_score):
        """Sets the vulnerability_risk_score of this SharedHostInfo.

        Image's CVE risk score.   # noqa: E501

        :param vulnerability_risk_score: The vulnerability_risk_score of this SharedHostInfo.  # noqa: E501
        :type vulnerability_risk_score: float
        """

        self._vulnerability_risk_score = vulnerability_risk_score

    @property
    def wild_fire_usage(self):
        """Gets the wild_fire_usage of this SharedHostInfo.  # noqa: E501


        :return: The wild_fire_usage of this SharedHostInfo.  # noqa: E501
        :rtype: WildfireUsage
        """
        return self._wild_fire_usage

    @wild_fire_usage.setter
    def wild_fire_usage(self, wild_fire_usage):
        """Sets the wild_fire_usage of this SharedHostInfo.


        :param wild_fire_usage: The wild_fire_usage of this SharedHostInfo.  # noqa: E501
        :type wild_fire_usage: WildfireUsage
        """

        self._wild_fire_usage = wild_fire_usage

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedHostInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedHostInfo):
            return True

        return self.to_dict() != other.to_dict()
