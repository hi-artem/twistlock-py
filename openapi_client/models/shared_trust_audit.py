# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedTrustAudit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'cluster': 'str',
        'count': 'int',
        'effect': 'VulnEffect',
        'image_id': 'str',
        'image_name': 'str',
        'msg': 'str',
        'rule_name': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'cluster': 'cluster',
        'count': 'count',
        'effect': 'effect',
        'image_id': 'imageID',
        'image_name': 'imageName',
        'msg': 'msg',
        'rule_name': 'ruleName',
        'time': 'time'
    }

    def __init__(self, id=None, account_id=None, cluster=None, count=None, effect=None, image_id=None, image_name=None, msg=None, rule_name=None, time=None, local_vars_configuration=None):  # noqa: E501
        """SharedTrustAudit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._cluster = None
        self._count = None
        self._effect = None
        self._image_id = None
        self._image_name = None
        self._msg = None
        self._rule_name = None
        self._time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if cluster is not None:
            self.cluster = cluster
        if count is not None:
            self.count = count
        if effect is not None:
            self.effect = effect
        if image_id is not None:
            self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name
        if msg is not None:
            self.msg = msg
        if rule_name is not None:
            self.rule_name = rule_name
        if time is not None:
            self.time = time

    @property
    def id(self):
        """Gets the id of this SharedTrustAudit.  # noqa: E501

        ID is the registry-repo of the created container.   # noqa: E501

        :return: The id of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedTrustAudit.

        ID is the registry-repo of the created container.   # noqa: E501

        :param id: The id of this SharedTrustAudit.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this SharedTrustAudit.  # noqa: E501

        AccountID is the cloud account ID where the audit was generated.   # noqa: E501

        :return: The account_id of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedTrustAudit.

        AccountID is the cloud account ID where the audit was generated.   # noqa: E501

        :param account_id: The account_id of this SharedTrustAudit.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def cluster(self):
        """Gets the cluster of this SharedTrustAudit.  # noqa: E501

        Cluster is the cluster where the audit was generated.   # noqa: E501

        :return: The cluster of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedTrustAudit.

        Cluster is the cluster where the audit was generated.   # noqa: E501

        :param cluster: The cluster of this SharedTrustAudit.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def count(self):
        """Gets the count of this SharedTrustAudit.  # noqa: E501

        Count is the number of times this audit occurred.   # noqa: E501

        :return: The count of this SharedTrustAudit.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SharedTrustAudit.

        Count is the number of times this audit occurred.   # noqa: E501

        :param count: The count of this SharedTrustAudit.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def effect(self):
        """Gets the effect of this SharedTrustAudit.  # noqa: E501


        :return: The effect of this SharedTrustAudit.  # noqa: E501
        :rtype: VulnEffect
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this SharedTrustAudit.


        :param effect: The effect of this SharedTrustAudit.  # noqa: E501
        :type effect: VulnEffect
        """

        self._effect = effect

    @property
    def image_id(self):
        """Gets the image_id of this SharedTrustAudit.  # noqa: E501

        ImageID is the container image id.   # noqa: E501

        :return: The image_id of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this SharedTrustAudit.

        ImageID is the container image id.   # noqa: E501

        :param image_id: The image_id of this SharedTrustAudit.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this SharedTrustAudit.  # noqa: E501

        ImageName is the container image name.   # noqa: E501

        :return: The image_name of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this SharedTrustAudit.

        ImageName is the container image name.   # noqa: E501

        :param image_name: The image_name of this SharedTrustAudit.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def msg(self):
        """Gets the msg of this SharedTrustAudit.  # noqa: E501

        Message is the blocking message text.   # noqa: E501

        :return: The msg of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this SharedTrustAudit.

        Message is the blocking message text.   # noqa: E501

        :param msg: The msg of this SharedTrustAudit.  # noqa: E501
        :type msg: str
        """

        self._msg = msg

    @property
    def rule_name(self):
        """Gets the rule_name of this SharedTrustAudit.  # noqa: E501

        If blocked, contains the name of the rule that was applied.   # noqa: E501

        :return: The rule_name of this SharedTrustAudit.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SharedTrustAudit.

        If blocked, contains the name of the rule that was applied.   # noqa: E501

        :param rule_name: The rule_name of this SharedTrustAudit.  # noqa: E501
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def time(self):
        """Gets the time of this SharedTrustAudit.  # noqa: E501

        Time is the UTC time of the audit event.   # noqa: E501

        :return: The time of this SharedTrustAudit.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedTrustAudit.

        Time is the UTC time of the audit event.   # noqa: E501

        :param time: The time of this SharedTrustAudit.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedTrustAudit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedTrustAudit):
            return True

        return self.to_dict() != other.to_dict()
