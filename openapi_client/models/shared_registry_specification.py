# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedRegistrySpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cap': 'int',
        'collections': 'list[str]',
        'credential': 'CredCredential',
        'credential_id': 'str',
        'excluded_repositories': 'list[str]',
        'excluded_tags': 'list[str]',
        'jfrog_repo_types': 'list[SharedJFrogRepoType]',
        'namespace': 'str',
        'os': 'SharedRegistryOSType',
        'registry': 'str',
        'repository': 'str',
        'scanners': 'int',
        'tag': 'str',
        'version': 'str',
        'version_pattern': 'str'
    }

    attribute_map = {
        'cap': 'cap',
        'collections': 'collections',
        'credential': 'credential',
        'credential_id': 'credentialID',
        'excluded_repositories': 'excludedRepositories',
        'excluded_tags': 'excludedTags',
        'jfrog_repo_types': 'jfrogRepoTypes',
        'namespace': 'namespace',
        'os': 'os',
        'registry': 'registry',
        'repository': 'repository',
        'scanners': 'scanners',
        'tag': 'tag',
        'version': 'version',
        'version_pattern': 'versionPattern'
    }

    def __init__(self, cap=None, collections=None, credential=None, credential_id=None, excluded_repositories=None, excluded_tags=None, jfrog_repo_types=None, namespace=None, os=None, registry=None, repository=None, scanners=None, tag=None, version=None, version_pattern=None, local_vars_configuration=None):  # noqa: E501
        """SharedRegistrySpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cap = None
        self._collections = None
        self._credential = None
        self._credential_id = None
        self._excluded_repositories = None
        self._excluded_tags = None
        self._jfrog_repo_types = None
        self._namespace = None
        self._os = None
        self._registry = None
        self._repository = None
        self._scanners = None
        self._tag = None
        self._version = None
        self._version_pattern = None
        self.discriminator = None

        if cap is not None:
            self.cap = cap
        if collections is not None:
            self.collections = collections
        if credential is not None:
            self.credential = credential
        if credential_id is not None:
            self.credential_id = credential_id
        if excluded_repositories is not None:
            self.excluded_repositories = excluded_repositories
        if excluded_tags is not None:
            self.excluded_tags = excluded_tags
        if jfrog_repo_types is not None:
            self.jfrog_repo_types = jfrog_repo_types
        if namespace is not None:
            self.namespace = namespace
        if os is not None:
            self.os = os
        if registry is not None:
            self.registry = registry
        if repository is not None:
            self.repository = repository
        if scanners is not None:
            self.scanners = scanners
        if tag is not None:
            self.tag = tag
        if version is not None:
            self.version = version
        if version_pattern is not None:
            self.version_pattern = version_pattern

    @property
    def cap(self):
        """Gets the cap of this SharedRegistrySpecification.  # noqa: E501

        Specifies the maximum number of images from each repo to fetch and scan, sorted by most recently modified.   # noqa: E501

        :return: The cap of this SharedRegistrySpecification.  # noqa: E501
        :rtype: int
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this SharedRegistrySpecification.

        Specifies the maximum number of images from each repo to fetch and scan, sorted by most recently modified.   # noqa: E501

        :param cap: The cap of this SharedRegistrySpecification.  # noqa: E501
        :type cap: int
        """

        self._cap = cap

    @property
    def collections(self):
        """Gets the collections of this SharedRegistrySpecification.  # noqa: E501

        Specifies the set of Defenders in-scope for working on a scan job.   # noqa: E501

        :return: The collections of this SharedRegistrySpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedRegistrySpecification.

        Specifies the set of Defenders in-scope for working on a scan job.   # noqa: E501

        :param collections: The collections of this SharedRegistrySpecification.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def credential(self):
        """Gets the credential of this SharedRegistrySpecification.  # noqa: E501


        :return: The credential of this SharedRegistrySpecification.  # noqa: E501
        :rtype: CredCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this SharedRegistrySpecification.


        :param credential: The credential of this SharedRegistrySpecification.  # noqa: E501
        :type credential: CredCredential
        """

        self._credential = credential

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedRegistrySpecification.  # noqa: E501

        ID of the credentials in the credentials store to use for authenticating with the registry.   # noqa: E501

        :return: The credential_id of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedRegistrySpecification.

        ID of the credentials in the credentials store to use for authenticating with the registry.   # noqa: E501

        :param credential_id: The credential_id of this SharedRegistrySpecification.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def excluded_repositories(self):
        """Gets the excluded_repositories of this SharedRegistrySpecification.  # noqa: E501

        Repositories to exclude from scanning.   # noqa: E501

        :return: The excluded_repositories of this SharedRegistrySpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_repositories

    @excluded_repositories.setter
    def excluded_repositories(self, excluded_repositories):
        """Sets the excluded_repositories of this SharedRegistrySpecification.

        Repositories to exclude from scanning.   # noqa: E501

        :param excluded_repositories: The excluded_repositories of this SharedRegistrySpecification.  # noqa: E501
        :type excluded_repositories: list[str]
        """

        self._excluded_repositories = excluded_repositories

    @property
    def excluded_tags(self):
        """Gets the excluded_tags of this SharedRegistrySpecification.  # noqa: E501

        Tags to exclude from scanning.   # noqa: E501

        :return: The excluded_tags of this SharedRegistrySpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_tags

    @excluded_tags.setter
    def excluded_tags(self, excluded_tags):
        """Sets the excluded_tags of this SharedRegistrySpecification.

        Tags to exclude from scanning.   # noqa: E501

        :param excluded_tags: The excluded_tags of this SharedRegistrySpecification.  # noqa: E501
        :type excluded_tags: list[str]
        """

        self._excluded_tags = excluded_tags

    @property
    def jfrog_repo_types(self):
        """Gets the jfrog_repo_types of this SharedRegistrySpecification.  # noqa: E501

        JFrog Artifactory repository types to scan.   # noqa: E501

        :return: The jfrog_repo_types of this SharedRegistrySpecification.  # noqa: E501
        :rtype: list[SharedJFrogRepoType]
        """
        return self._jfrog_repo_types

    @jfrog_repo_types.setter
    def jfrog_repo_types(self, jfrog_repo_types):
        """Sets the jfrog_repo_types of this SharedRegistrySpecification.

        JFrog Artifactory repository types to scan.   # noqa: E501

        :param jfrog_repo_types: The jfrog_repo_types of this SharedRegistrySpecification.  # noqa: E501
        :type jfrog_repo_types: list[SharedJFrogRepoType]
        """

        self._jfrog_repo_types = jfrog_repo_types

    @property
    def namespace(self):
        """Gets the namespace of this SharedRegistrySpecification.  # noqa: E501

        IBM Bluemix namespace https://console.bluemix.net/docs/services/Registry/registry_overview.html#registry_planning.   # noqa: E501

        :return: The namespace of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SharedRegistrySpecification.

        IBM Bluemix namespace https://console.bluemix.net/docs/services/Registry/registry_overview.html#registry_planning.   # noqa: E501

        :param namespace: The namespace of this SharedRegistrySpecification.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def os(self):
        """Gets the os of this SharedRegistrySpecification.  # noqa: E501


        :return: The os of this SharedRegistrySpecification.  # noqa: E501
        :rtype: SharedRegistryOSType
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SharedRegistrySpecification.


        :param os: The os of this SharedRegistrySpecification.  # noqa: E501
        :type os: SharedRegistryOSType
        """

        self._os = os

    @property
    def registry(self):
        """Gets the registry of this SharedRegistrySpecification.  # noqa: E501

        Registry address (e.g., https://gcr.io).   # noqa: E501

        :return: The registry of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this SharedRegistrySpecification.

        Registry address (e.g., https://gcr.io).   # noqa: E501

        :param registry: The registry of this SharedRegistrySpecification.  # noqa: E501
        :type registry: str
        """

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this SharedRegistrySpecification.  # noqa: E501

        Repositories to scan.   # noqa: E501

        :return: The repository of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this SharedRegistrySpecification.

        Repositories to scan.   # noqa: E501

        :param repository: The repository of this SharedRegistrySpecification.  # noqa: E501
        :type repository: str
        """

        self._repository = repository

    @property
    def scanners(self):
        """Gets the scanners of this SharedRegistrySpecification.  # noqa: E501

        Number of Defenders that can be utilized for each scan job.   # noqa: E501

        :return: The scanners of this SharedRegistrySpecification.  # noqa: E501
        :rtype: int
        """
        return self._scanners

    @scanners.setter
    def scanners(self, scanners):
        """Sets the scanners of this SharedRegistrySpecification.

        Number of Defenders that can be utilized for each scan job.   # noqa: E501

        :param scanners: The scanners of this SharedRegistrySpecification.  # noqa: E501
        :type scanners: int
        """

        self._scanners = scanners

    @property
    def tag(self):
        """Gets the tag of this SharedRegistrySpecification.  # noqa: E501

        Tags to scan.   # noqa: E501

        :return: The tag of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SharedRegistrySpecification.

        Tags to scan.   # noqa: E501

        :param tag: The tag of this SharedRegistrySpecification.  # noqa: E501
        :type tag: str
        """

        self._tag = tag

    @property
    def version(self):
        """Gets the version of this SharedRegistrySpecification.  # noqa: E501

        Registry type. Determines the protocol Prisma Cloud uses to communicate with the registry.   # noqa: E501

        :return: The version of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedRegistrySpecification.

        Registry type. Determines the protocol Prisma Cloud uses to communicate with the registry.   # noqa: E501

        :param version: The version of this SharedRegistrySpecification.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def version_pattern(self):
        """Gets the version_pattern of this SharedRegistrySpecification.  # noqa: E501

        Pattern heuristic for quickly filtering images by tags without having to query all images for modification dates.   # noqa: E501

        :return: The version_pattern of this SharedRegistrySpecification.  # noqa: E501
        :rtype: str
        """
        return self._version_pattern

    @version_pattern.setter
    def version_pattern(self, version_pattern):
        """Sets the version_pattern of this SharedRegistrySpecification.

        Pattern heuristic for quickly filtering images by tags without having to query all images for modification dates.   # noqa: E501

        :param version_pattern: The version_pattern of this SharedRegistrySpecification.  # noqa: E501
        :type version_pattern: str
        """

        self._version_pattern = version_pattern

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedRegistrySpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedRegistrySpecification):
            return True

        return self.to_dict() != other.to_dict()
