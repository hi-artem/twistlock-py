# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesCVEVulnerability(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_vuln_id': 'str',
        'conditions': 'list[list]',
        'custom': 'bool',
        'cve': 'str',
        'cvss': 'float',
        'description': 'str',
        'distro': 'str',
        'distro_release': 'str',
        'exploit': 'VulnExploitType',
        'fix_date': 'int',
        'link': 'str',
        'link_id': 'str',
        'modified': 'int',
        'package': 'str',
        'rules': 'list[str]',
        'severity': 'str',
        'status': 'str',
        'type': 'SharedCveType',
        'vec_str': 'str'
    }

    attribute_map = {
        'app_vuln_id': 'app_vuln_id',
        'conditions': 'conditions',
        'custom': 'custom',
        'cve': 'cve',
        'cvss': 'cvss',
        'description': 'description',
        'distro': 'distro',
        'distro_release': 'distro_release',
        'exploit': 'exploit',
        'fix_date': 'fixDate',
        'link': 'link',
        'link_id': 'link_id',
        'modified': 'modified',
        'package': 'package',
        'rules': 'rules',
        'severity': 'severity',
        'status': 'status',
        'type': 'type',
        'vec_str': 'vecStr'
    }

    def __init__(self, app_vuln_id=None, conditions=None, custom=None, cve=None, cvss=None, description=None, distro=None, distro_release=None, exploit=None, fix_date=None, link=None, link_id=None, modified=None, package=None, rules=None, severity=None, status=None, type=None, vec_str=None, local_vars_configuration=None):  # noqa: E501
        """TypesCVEVulnerability - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._app_vuln_id = None
        self._conditions = None
        self._custom = None
        self._cve = None
        self._cvss = None
        self._description = None
        self._distro = None
        self._distro_release = None
        self._exploit = None
        self._fix_date = None
        self._link = None
        self._link_id = None
        self._modified = None
        self._package = None
        self._rules = None
        self._severity = None
        self._status = None
        self._type = None
        self._vec_str = None
        self.discriminator = None

        if app_vuln_id is not None:
            self.app_vuln_id = app_vuln_id
        if conditions is not None:
            self.conditions = conditions
        if custom is not None:
            self.custom = custom
        if cve is not None:
            self.cve = cve
        if cvss is not None:
            self.cvss = cvss
        if description is not None:
            self.description = description
        if distro is not None:
            self.distro = distro
        if distro_release is not None:
            self.distro_release = distro_release
        if exploit is not None:
            self.exploit = exploit
        if fix_date is not None:
            self.fix_date = fix_date
        if link is not None:
            self.link = link
        if link_id is not None:
            self.link_id = link_id
        if modified is not None:
            self.modified = modified
        if package is not None:
            self.package = package
        if rules is not None:
            self.rules = rules
        if severity is not None:
            self.severity = severity
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if vec_str is not None:
            self.vec_str = vec_str

    @property
    def app_vuln_id(self):
        """Gets the app_vuln_id of this TypesCVEVulnerability.  # noqa: E501

        AppVulnID is the unique ID of the application vulnerability (app+cve+internal custom ID).   # noqa: E501

        :return: The app_vuln_id of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._app_vuln_id

    @app_vuln_id.setter
    def app_vuln_id(self, app_vuln_id):
        """Sets the app_vuln_id of this TypesCVEVulnerability.

        AppVulnID is the unique ID of the application vulnerability (app+cve+internal custom ID).   # noqa: E501

        :param app_vuln_id: The app_vuln_id of this TypesCVEVulnerability.  # noqa: E501
        :type app_vuln_id: str
        """

        self._app_vuln_id = app_vuln_id

    @property
    def conditions(self):
        """Gets the conditions of this TypesCVEVulnerability.  # noqa: E501

        Conditions represents a list of CVE rules (used to determine whether a CVE applies to a given package)  # noqa: E501

        :return: The conditions of this TypesCVEVulnerability.  # noqa: E501
        :rtype: list[list]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this TypesCVEVulnerability.

        Conditions represents a list of CVE rules (used to determine whether a CVE applies to a given package)  # noqa: E501

        :param conditions: The conditions of this TypesCVEVulnerability.  # noqa: E501
        :type conditions: list[list]
        """

        self._conditions = conditions

    @property
    def custom(self):
        """Gets the custom of this TypesCVEVulnerability.  # noqa: E501

        Custom indicates if this is a custom vulnerability.   # noqa: E501

        :return: The custom of this TypesCVEVulnerability.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this TypesCVEVulnerability.

        Custom indicates if this is a custom vulnerability.   # noqa: E501

        :param custom: The custom of this TypesCVEVulnerability.  # noqa: E501
        :type custom: bool
        """

        self._custom = custom

    @property
    def cve(self):
        """Gets the cve of this TypesCVEVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The cve of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this TypesCVEVulnerability.

        .   # noqa: E501

        :param cve: The cve of this TypesCVEVulnerability.  # noqa: E501
        :type cve: str
        """

        self._cve = cve

    @property
    def cvss(self):
        """Gets the cvss of this TypesCVEVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The cvss of this TypesCVEVulnerability.  # noqa: E501
        :rtype: float
        """
        return self._cvss

    @cvss.setter
    def cvss(self, cvss):
        """Sets the cvss of this TypesCVEVulnerability.

        .   # noqa: E501

        :param cvss: The cvss of this TypesCVEVulnerability.  # noqa: E501
        :type cvss: float
        """

        self._cvss = cvss

    @property
    def description(self):
        """Gets the description of this TypesCVEVulnerability.  # noqa: E501

        Description is the vulnerability description.   # noqa: E501

        :return: The description of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TypesCVEVulnerability.

        Description is the vulnerability description.   # noqa: E501

        :param description: The description of this TypesCVEVulnerability.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def distro(self):
        """Gets the distro of this TypesCVEVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The distro of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """Sets the distro of this TypesCVEVulnerability.

        .   # noqa: E501

        :param distro: The distro of this TypesCVEVulnerability.  # noqa: E501
        :type distro: str
        """

        self._distro = distro

    @property
    def distro_release(self):
        """Gets the distro_release of this TypesCVEVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The distro_release of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._distro_release

    @distro_release.setter
    def distro_release(self, distro_release):
        """Sets the distro_release of this TypesCVEVulnerability.

        .   # noqa: E501

        :param distro_release: The distro_release of this TypesCVEVulnerability.  # noqa: E501
        :type distro_release: str
        """

        self._distro_release = distro_release

    @property
    def exploit(self):
        """Gets the exploit of this TypesCVEVulnerability.  # noqa: E501


        :return: The exploit of this TypesCVEVulnerability.  # noqa: E501
        :rtype: VulnExploitType
        """
        return self._exploit

    @exploit.setter
    def exploit(self, exploit):
        """Sets the exploit of this TypesCVEVulnerability.


        :param exploit: The exploit of this TypesCVEVulnerability.  # noqa: E501
        :type exploit: VulnExploitType
        """

        self._exploit = exploit

    @property
    def fix_date(self):
        """Gets the fix_date of this TypesCVEVulnerability.  # noqa: E501

        FixDate is the date this CVE was fixed (unix timestamp).   # noqa: E501

        :return: The fix_date of this TypesCVEVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._fix_date

    @fix_date.setter
    def fix_date(self, fix_date):
        """Sets the fix_date of this TypesCVEVulnerability.

        FixDate is the date this CVE was fixed (unix timestamp).   # noqa: E501

        :param fix_date: The fix_date of this TypesCVEVulnerability.  # noqa: E501
        :type fix_date: int
        """

        self._fix_date = fix_date

    @property
    def link(self):
        """Gets the link of this TypesCVEVulnerability.  # noqa: E501

        Link is the link for information about the vulnerability (used for custom vulnerabilities).   # noqa: E501

        :return: The link of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TypesCVEVulnerability.

        Link is the link for information about the vulnerability (used for custom vulnerabilities).   # noqa: E501

        :param link: The link of this TypesCVEVulnerability.  # noqa: E501
        :type link: str
        """

        self._link = link

    @property
    def link_id(self):
        """Gets the link_id of this TypesCVEVulnerability.  # noqa: E501

        LinkId is the id required to construct the vendor link to the CVE.   # noqa: E501

        :return: The link_id of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._link_id

    @link_id.setter
    def link_id(self, link_id):
        """Sets the link_id of this TypesCVEVulnerability.

        LinkId is the id required to construct the vendor link to the CVE.   # noqa: E501

        :param link_id: The link_id of this TypesCVEVulnerability.  # noqa: E501
        :type link_id: str
        """

        self._link_id = link_id

    @property
    def modified(self):
        """Gets the modified of this TypesCVEVulnerability.  # noqa: E501

        Modified is the last time this CVE was modified (unix timestamp).   # noqa: E501

        :return: The modified of this TypesCVEVulnerability.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this TypesCVEVulnerability.

        Modified is the last time this CVE was modified (unix timestamp).   # noqa: E501

        :param modified: The modified of this TypesCVEVulnerability.  # noqa: E501
        :type modified: int
        """

        self._modified = modified

    @property
    def package(self):
        """Gets the package of this TypesCVEVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The package of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this TypesCVEVulnerability.

        .   # noqa: E501

        :param package: The package of this TypesCVEVulnerability.  # noqa: E501
        :type package: str
        """

        self._package = package

    @property
    def rules(self):
        """Gets the rules of this TypesCVEVulnerability.  # noqa: E501

        Rules represents a list of CVE assessment rules (used to determine whether a CVE applies to a given package)  # noqa: E501

        :return: The rules of this TypesCVEVulnerability.  # noqa: E501
        :rtype: list[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this TypesCVEVulnerability.

        Rules represents a list of CVE assessment rules (used to determine whether a CVE applies to a given package)  # noqa: E501

        :param rules: The rules of this TypesCVEVulnerability.  # noqa: E501
        :type rules: list[str]
        """

        self._rules = rules

    @property
    def severity(self):
        """Gets the severity of this TypesCVEVulnerability.  # noqa: E501

        .   # noqa: E501

        :return: The severity of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TypesCVEVulnerability.

        .   # noqa: E501

        :param severity: The severity of this TypesCVEVulnerability.  # noqa: E501
        :type severity: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this TypesCVEVulnerability.  # noqa: E501

        Status is the official vendor state for the CVE.   # noqa: E501

        :return: The status of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TypesCVEVulnerability.

        Status is the official vendor state for the CVE.   # noqa: E501

        :param status: The status of this TypesCVEVulnerability.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this TypesCVEVulnerability.  # noqa: E501


        :return: The type of this TypesCVEVulnerability.  # noqa: E501
        :rtype: SharedCveType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TypesCVEVulnerability.


        :param type: The type of this TypesCVEVulnerability.  # noqa: E501
        :type type: SharedCveType
        """

        self._type = type

    @property
    def vec_str(self):
        """Gets the vec_str of this TypesCVEVulnerability.  # noqa: E501

        VectorString is the NVD vulnerability string.   # noqa: E501

        :return: The vec_str of this TypesCVEVulnerability.  # noqa: E501
        :rtype: str
        """
        return self._vec_str

    @vec_str.setter
    def vec_str(self, vec_str):
        """Sets the vec_str of this TypesCVEVulnerability.

        VectorString is the NVD vulnerability string.   # noqa: E501

        :param vec_str: The vec_str of this TypesCVEVulnerability.  # noqa: E501
        :type vec_str: str
        """

        self._vec_str = vec_str

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesCVEVulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesCVEVulnerability):
            return True

        return self.to_dict() != other.to_dict()
