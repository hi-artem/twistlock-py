# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedIncident(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'acknowledged': 'bool',
        'app': 'str',
        'app_id': 'str',
        'audits': 'list[SharedRuntimeAudit]',
        'category': 'SharedIncidentCategory',
        'cluster': 'str',
        'collections': 'list[str]',
        'container_id': 'str',
        'container_name': 'str',
        'custom_rule_name': 'str',
        'fqdn': 'str',
        'function': 'str',
        'hostname': 'str',
        'image_id': 'str',
        'image_name': 'str',
        'labels': 'dict(str, str)',
        'namespace': 'str',
        'profile_id': 'str',
        'region': 'str',
        'runtime': 'str',
        'serial_num': 'int',
        'should_collect': 'bool',
        'time': 'datetime',
        'type': 'SharedIncidentType'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'acknowledged': 'acknowledged',
        'app': 'app',
        'app_id': 'appID',
        'audits': 'audits',
        'category': 'category',
        'cluster': 'cluster',
        'collections': 'collections',
        'container_id': 'containerID',
        'container_name': 'containerName',
        'custom_rule_name': 'customRuleName',
        'fqdn': 'fqdn',
        'function': 'function',
        'hostname': 'hostname',
        'image_id': 'imageID',
        'image_name': 'imageName',
        'labels': 'labels',
        'namespace': 'namespace',
        'profile_id': 'profileID',
        'region': 'region',
        'runtime': 'runtime',
        'serial_num': 'serialNum',
        'should_collect': 'shouldCollect',
        'time': 'time',
        'type': 'type'
    }

    def __init__(self, id=None, account_id=None, acknowledged=None, app=None, app_id=None, audits=None, category=None, cluster=None, collections=None, container_id=None, container_name=None, custom_rule_name=None, fqdn=None, function=None, hostname=None, image_id=None, image_name=None, labels=None, namespace=None, profile_id=None, region=None, runtime=None, serial_num=None, should_collect=None, time=None, type=None, local_vars_configuration=None):  # noqa: E501
        """SharedIncident - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._acknowledged = None
        self._app = None
        self._app_id = None
        self._audits = None
        self._category = None
        self._cluster = None
        self._collections = None
        self._container_id = None
        self._container_name = None
        self._custom_rule_name = None
        self._fqdn = None
        self._function = None
        self._hostname = None
        self._image_id = None
        self._image_name = None
        self._labels = None
        self._namespace = None
        self._profile_id = None
        self._region = None
        self._runtime = None
        self._serial_num = None
        self._should_collect = None
        self._time = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if acknowledged is not None:
            self.acknowledged = acknowledged
        if app is not None:
            self.app = app
        if app_id is not None:
            self.app_id = app_id
        if audits is not None:
            self.audits = audits
        if category is not None:
            self.category = category
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if container_id is not None:
            self.container_id = container_id
        if container_name is not None:
            self.container_name = container_name
        if custom_rule_name is not None:
            self.custom_rule_name = custom_rule_name
        if fqdn is not None:
            self.fqdn = fqdn
        if function is not None:
            self.function = function
        if hostname is not None:
            self.hostname = hostname
        if image_id is not None:
            self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name
        if labels is not None:
            self.labels = labels
        if namespace is not None:
            self.namespace = namespace
        if profile_id is not None:
            self.profile_id = profile_id
        if region is not None:
            self.region = region
        if runtime is not None:
            self.runtime = runtime
        if serial_num is not None:
            self.serial_num = serial_num
        if should_collect is not None:
            self.should_collect = should_collect
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this SharedIncident.  # noqa: E501

        Internal ID of the incident.   # noqa: E501

        :return: The id of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedIncident.

        Internal ID of the incident.   # noqa: E501

        :param id: The id of this SharedIncident.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this SharedIncident.  # noqa: E501

        Cloud account ID.   # noqa: E501

        :return: The account_id of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedIncident.

        Cloud account ID.   # noqa: E501

        :param account_id: The account_id of this SharedIncident.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def acknowledged(self):
        """Gets the acknowledged of this SharedIncident.  # noqa: E501

        Indicates if the incident has been acknowledged (true) or not (false).   # noqa: E501

        :return: The acknowledged of this SharedIncident.  # noqa: E501
        :rtype: bool
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this SharedIncident.

        Indicates if the incident has been acknowledged (true) or not (false).   # noqa: E501

        :param acknowledged: The acknowledged of this SharedIncident.  # noqa: E501
        :type acknowledged: bool
        """

        self._acknowledged = acknowledged

    @property
    def app(self):
        """Gets the app of this SharedIncident.  # noqa: E501

        Application that caused the incident.   # noqa: E501

        :return: The app of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this SharedIncident.

        Application that caused the incident.   # noqa: E501

        :param app: The app of this SharedIncident.  # noqa: E501
        :type app: str
        """

        self._app = app

    @property
    def app_id(self):
        """Gets the app_id of this SharedIncident.  # noqa: E501

        Application ID.   # noqa: E501

        :return: The app_id of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SharedIncident.

        Application ID.   # noqa: E501

        :param app_id: The app_id of this SharedIncident.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def audits(self):
        """Gets the audits of this SharedIncident.  # noqa: E501

        All runtime audits of the incident.   # noqa: E501

        :return: The audits of this SharedIncident.  # noqa: E501
        :rtype: list[SharedRuntimeAudit]
        """
        return self._audits

    @audits.setter
    def audits(self, audits):
        """Sets the audits of this SharedIncident.

        All runtime audits of the incident.   # noqa: E501

        :param audits: The audits of this SharedIncident.  # noqa: E501
        :type audits: list[SharedRuntimeAudit]
        """

        self._audits = audits

    @property
    def category(self):
        """Gets the category of this SharedIncident.  # noqa: E501


        :return: The category of this SharedIncident.  # noqa: E501
        :rtype: SharedIncidentCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SharedIncident.


        :param category: The category of this SharedIncident.  # noqa: E501
        :type category: SharedIncidentCategory
        """

        self._category = category

    @property
    def cluster(self):
        """Gets the cluster of this SharedIncident.  # noqa: E501

        Cluster on which the incident was found.   # noqa: E501

        :return: The cluster of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedIncident.

        Cluster on which the incident was found.   # noqa: E501

        :param cluster: The cluster of this SharedIncident.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedIncident.  # noqa: E501

        Collections to which this incident applies.   # noqa: E501

        :return: The collections of this SharedIncident.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedIncident.

        Collections to which this incident applies.   # noqa: E501

        :param collections: The collections of this SharedIncident.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def container_id(self):
        """Gets the container_id of this SharedIncident.  # noqa: E501

        ID of the container that triggered the incident.   # noqa: E501

        :return: The container_id of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this SharedIncident.

        ID of the container that triggered the incident.   # noqa: E501

        :param container_id: The container_id of this SharedIncident.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_name(self):
        """Gets the container_name of this SharedIncident.  # noqa: E501

        Unique container name.   # noqa: E501

        :return: The container_name of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this SharedIncident.

        Unique container name.   # noqa: E501

        :param container_name: The container_name of this SharedIncident.  # noqa: E501
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def custom_rule_name(self):
        """Gets the custom_rule_name of this SharedIncident.  # noqa: E501

        Name of the custom runtime rule that triggered the incident.   # noqa: E501

        :return: The custom_rule_name of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._custom_rule_name

    @custom_rule_name.setter
    def custom_rule_name(self, custom_rule_name):
        """Sets the custom_rule_name of this SharedIncident.

        Name of the custom runtime rule that triggered the incident.   # noqa: E501

        :param custom_rule_name: The custom_rule_name of this SharedIncident.  # noqa: E501
        :type custom_rule_name: str
        """

        self._custom_rule_name = custom_rule_name

    @property
    def fqdn(self):
        """Gets the fqdn of this SharedIncident.  # noqa: E501

        Current hostname's full domain name.   # noqa: E501

        :return: The fqdn of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this SharedIncident.

        Current hostname's full domain name.   # noqa: E501

        :param fqdn: The fqdn of this SharedIncident.  # noqa: E501
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def function(self):
        """Gets the function of this SharedIncident.  # noqa: E501

        Name of the serverless function.   # noqa: E501

        :return: The function of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this SharedIncident.

        Name of the serverless function.   # noqa: E501

        :param function: The function of this SharedIncident.  # noqa: E501
        :type function: str
        """

        self._function = function

    @property
    def hostname(self):
        """Gets the hostname of this SharedIncident.  # noqa: E501

        Current hostname.   # noqa: E501

        :return: The hostname of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedIncident.

        Current hostname.   # noqa: E501

        :param hostname: The hostname of this SharedIncident.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image_id(self):
        """Gets the image_id of this SharedIncident.  # noqa: E501

        Container image ID.   # noqa: E501

        :return: The image_id of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this SharedIncident.

        Container image ID.   # noqa: E501

        :param image_id: The image_id of this SharedIncident.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this SharedIncident.  # noqa: E501

        Container image name.   # noqa: E501

        :return: The image_name of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this SharedIncident.

        Container image name.   # noqa: E501

        :param image_name: The image_name of this SharedIncident.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def labels(self):
        """Gets the labels of this SharedIncident.  # noqa: E501

        Custom labels associated with the container.   # noqa: E501

        :return: The labels of this SharedIncident.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SharedIncident.

        Custom labels associated with the container.   # noqa: E501

        :param labels: The labels of this SharedIncident.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def namespace(self):
        """Gets the namespace of this SharedIncident.  # noqa: E501

        k8s deployment namespace.   # noqa: E501

        :return: The namespace of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SharedIncident.

        k8s deployment namespace.   # noqa: E501

        :param namespace: The namespace of this SharedIncident.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def profile_id(self):
        """Gets the profile_id of this SharedIncident.  # noqa: E501

        Runtime profile ID.   # noqa: E501

        :return: The profile_id of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this SharedIncident.

        Runtime profile ID.   # noqa: E501

        :param profile_id: The profile_id of this SharedIncident.  # noqa: E501
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def region(self):
        """Gets the region of this SharedIncident.  # noqa: E501

        Region of the serverless function.   # noqa: E501

        :return: The region of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SharedIncident.

        Region of the serverless function.   # noqa: E501

        :param region: The region of this SharedIncident.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def runtime(self):
        """Gets the runtime of this SharedIncident.  # noqa: E501

        Runtime of the serverless function.   # noqa: E501

        :return: The runtime of this SharedIncident.  # noqa: E501
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this SharedIncident.

        Runtime of the serverless function.   # noqa: E501

        :param runtime: The runtime of this SharedIncident.  # noqa: E501
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def serial_num(self):
        """Gets the serial_num of this SharedIncident.  # noqa: E501

        Serial number of the incident.   # noqa: E501

        :return: The serial_num of this SharedIncident.  # noqa: E501
        :rtype: int
        """
        return self._serial_num

    @serial_num.setter
    def serial_num(self, serial_num):
        """Sets the serial_num of this SharedIncident.

        Serial number of the incident.   # noqa: E501

        :param serial_num: The serial_num of this SharedIncident.  # noqa: E501
        :type serial_num: int
        """

        self._serial_num = serial_num

    @property
    def should_collect(self):
        """Gets the should_collect of this SharedIncident.  # noqa: E501

        Indicates if this incident should be collected (true) or not (false).   # noqa: E501

        :return: The should_collect of this SharedIncident.  # noqa: E501
        :rtype: bool
        """
        return self._should_collect

    @should_collect.setter
    def should_collect(self, should_collect):
        """Sets the should_collect of this SharedIncident.

        Indicates if this incident should be collected (true) or not (false).   # noqa: E501

        :param should_collect: The should_collect of this SharedIncident.  # noqa: E501
        :type should_collect: bool
        """

        self._should_collect = should_collect

    @property
    def time(self):
        """Gets the time of this SharedIncident.  # noqa: E501

        Time of the incident (in UTC time).   # noqa: E501

        :return: The time of this SharedIncident.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedIncident.

        Time of the incident (in UTC time).   # noqa: E501

        :param time: The time of this SharedIncident.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this SharedIncident.  # noqa: E501


        :return: The type of this SharedIncident.  # noqa: E501
        :rtype: SharedIncidentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedIncident.


        :param type: The type of this SharedIncident.  # noqa: E501
        :type type: SharedIncidentType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedIncident):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedIncident):
            return True

        return self.to_dict() != other.to_dict()
