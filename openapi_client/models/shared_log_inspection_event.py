# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedLogInspectionEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'cluster': 'str',
        'collections': 'list[str]',
        'hostname': 'str',
        'line': 'str',
        'logfile': 'str',
        'rule_name': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'account_id': 'accountID',
        'cluster': 'cluster',
        'collections': 'collections',
        'hostname': 'hostname',
        'line': 'line',
        'logfile': 'logfile',
        'rule_name': 'ruleName',
        'time': 'time'
    }

    def __init__(self, account_id=None, cluster=None, collections=None, hostname=None, line=None, logfile=None, rule_name=None, time=None, local_vars_configuration=None):  # noqa: E501
        """SharedLogInspectionEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._cluster = None
        self._collections = None
        self._hostname = None
        self._line = None
        self._logfile = None
        self._rule_name = None
        self._time = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if hostname is not None:
            self.hostname = hostname
        if line is not None:
            self.line = line
        if logfile is not None:
            self.logfile = logfile
        if rule_name is not None:
            self.rule_name = rule_name
        if time is not None:
            self.time = time

    @property
    def account_id(self):
        """Gets the account_id of this SharedLogInspectionEvent.  # noqa: E501

        AccountID is the cloud account ID.   # noqa: E501

        :return: The account_id of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedLogInspectionEvent.

        AccountID is the cloud account ID.   # noqa: E501

        :param account_id: The account_id of this SharedLogInspectionEvent.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def cluster(self):
        """Gets the cluster of this SharedLogInspectionEvent.  # noqa: E501

        Cluster is the cluster on which the event was found.   # noqa: E501

        :return: The cluster of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedLogInspectionEvent.

        Cluster is the cluster on which the event was found.   # noqa: E501

        :param cluster: The cluster of this SharedLogInspectionEvent.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedLogInspectionEvent.  # noqa: E501

        Collections are collections to which this event applies.   # noqa: E501

        :return: The collections of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedLogInspectionEvent.

        Collections are collections to which this event applies.   # noqa: E501

        :param collections: The collections of this SharedLogInspectionEvent.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def hostname(self):
        """Gets the hostname of this SharedLogInspectionEvent.  # noqa: E501

        Hostname is the hostname on which the event was found.   # noqa: E501

        :return: The hostname of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedLogInspectionEvent.

        Hostname is the hostname on which the event was found.   # noqa: E501

        :param hostname: The hostname of this SharedLogInspectionEvent.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def line(self):
        """Gets the line of this SharedLogInspectionEvent.  # noqa: E501

        Line is the matching log line.   # noqa: E501

        :return: The line of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: str
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this SharedLogInspectionEvent.

        Line is the matching log line.   # noqa: E501

        :param line: The line of this SharedLogInspectionEvent.  # noqa: E501
        :type line: str
        """

        self._line = line

    @property
    def logfile(self):
        """Gets the logfile of this SharedLogInspectionEvent.  # noqa: E501

        Logfile is the log file which triggered the event.   # noqa: E501

        :return: The logfile of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: str
        """
        return self._logfile

    @logfile.setter
    def logfile(self, logfile):
        """Sets the logfile of this SharedLogInspectionEvent.

        Logfile is the log file which triggered the event.   # noqa: E501

        :param logfile: The logfile of this SharedLogInspectionEvent.  # noqa: E501
        :type logfile: str
        """

        self._logfile = logfile

    @property
    def rule_name(self):
        """Gets the rule_name of this SharedLogInspectionEvent.  # noqa: E501

        RuleName is the name of the applied rule for auditing log inspection events.   # noqa: E501

        :return: The rule_name of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SharedLogInspectionEvent.

        RuleName is the name of the applied rule for auditing log inspection events.   # noqa: E501

        :param rule_name: The rule_name of this SharedLogInspectionEvent.  # noqa: E501
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def time(self):
        """Gets the time of this SharedLogInspectionEvent.  # noqa: E501

        Time is the time of the event.   # noqa: E501

        :return: The time of this SharedLogInspectionEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedLogInspectionEvent.

        Time is the time of the event.   # noqa: E501

        :param time: The time of this SharedLogInspectionEvent.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedLogInspectionEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedLogInspectionEvent):
            return True

        return self.to_dict() != other.to_dict()
