# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasHeaderSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow': 'bool',
        'effect': 'WaasEffect',
        'name': 'str',
        'required': 'bool',
        'values': 'list[str]'
    }

    attribute_map = {
        'allow': 'allow',
        'effect': 'effect',
        'name': 'name',
        'required': 'required',
        'values': 'values'
    }

    def __init__(self, allow=None, effect=None, name=None, required=None, values=None, local_vars_configuration=None):  # noqa: E501
        """WaasHeaderSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._allow = None
        self._effect = None
        self._name = None
        self._required = None
        self._values = None
        self.discriminator = None

        if allow is not None:
            self.allow = allow
        if effect is not None:
            self.effect = effect
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required
        if values is not None:
            self.values = values

    @property
    def allow(self):
        """Gets the allow of this WaasHeaderSpec.  # noqa: E501

        Indicates if the flow is to be allowed (true) or blocked (false).   # noqa: E501

        :return: The allow of this WaasHeaderSpec.  # noqa: E501
        :rtype: bool
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """Sets the allow of this WaasHeaderSpec.

        Indicates if the flow is to be allowed (true) or blocked (false).   # noqa: E501

        :param allow: The allow of this WaasHeaderSpec.  # noqa: E501
        :type allow: bool
        """

        self._allow = allow

    @property
    def effect(self):
        """Gets the effect of this WaasHeaderSpec.  # noqa: E501


        :return: The effect of this WaasHeaderSpec.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this WaasHeaderSpec.


        :param effect: The effect of this WaasHeaderSpec.  # noqa: E501
        :type effect: WaasEffect
        """

        self._effect = effect

    @property
    def name(self):
        """Gets the name of this WaasHeaderSpec.  # noqa: E501

        Header name.   # noqa: E501

        :return: The name of this WaasHeaderSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WaasHeaderSpec.

        Header name.   # noqa: E501

        :param name: The name of this WaasHeaderSpec.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this WaasHeaderSpec.  # noqa: E501

        Indicates if the header must be present (true) or not (false).   # noqa: E501

        :return: The required of this WaasHeaderSpec.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this WaasHeaderSpec.

        Indicates if the header must be present (true) or not (false).   # noqa: E501

        :param required: The required of this WaasHeaderSpec.  # noqa: E501
        :type required: bool
        """

        self._required = required

    @property
    def values(self):
        """Gets the values of this WaasHeaderSpec.  # noqa: E501

        Wildcard expressions that represent the header value.   # noqa: E501

        :return: The values of this WaasHeaderSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this WaasHeaderSpec.

        Wildcard expressions that represent the header value.   # noqa: E501

        :param values: The values of this WaasHeaderSpec.  # noqa: E501
        :type values: list[str]
        """

        self._values = values

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasHeaderSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasHeaderSpec):
            return True

        return self.to_dict() != other.to_dict()
