# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RuntimeSSHEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'command': 'str',
        'country': 'str',
        'ip': 'int',
        'login_time': 'int',
        'md5': 'str',
        'modified': 'bool',
        'path': 'str',
        'ppath': 'str',
        'time': 'datetime',
        'user': 'str'
    }

    attribute_map = {
        'command': 'command',
        'country': 'country',
        'ip': 'ip',
        'login_time': 'loginTime',
        'md5': 'md5',
        'modified': 'modified',
        'path': 'path',
        'ppath': 'ppath',
        'time': 'time',
        'user': 'user'
    }

    def __init__(self, command=None, country=None, ip=None, login_time=None, md5=None, modified=None, path=None, ppath=None, time=None, user=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeSSHEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._command = None
        self._country = None
        self._ip = None
        self._login_time = None
        self._md5 = None
        self._modified = None
        self._path = None
        self._ppath = None
        self._time = None
        self._user = None
        self.discriminator = None

        if command is not None:
            self.command = command
        if country is not None:
            self.country = country
        if ip is not None:
            self.ip = ip
        if login_time is not None:
            self.login_time = login_time
        if md5 is not None:
            self.md5 = md5
        if modified is not None:
            self.modified = modified
        if path is not None:
            self.path = path
        if ppath is not None:
            self.ppath = ppath
        if time is not None:
            self.time = time
        if user is not None:
            self.user = user

    @property
    def command(self):
        """Gets the command of this RuntimeSSHEvent.  # noqa: E501

        Command is the executed command.   # noqa: E501

        :return: The command of this RuntimeSSHEvent.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this RuntimeSSHEvent.

        Command is the executed command.   # noqa: E501

        :param command: The command of this RuntimeSSHEvent.  # noqa: E501
        :type command: str
        """

        self._command = command

    @property
    def country(self):
        """Gets the country of this RuntimeSSHEvent.  # noqa: E501

        Country represents the SSH client's origin country.   # noqa: E501

        :return: The country of this RuntimeSSHEvent.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RuntimeSSHEvent.

        Country represents the SSH client's origin country.   # noqa: E501

        :param country: The country of this RuntimeSSHEvent.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def ip(self):
        """Gets the ip of this RuntimeSSHEvent.  # noqa: E501

        IP address represents the connection client IP address.   # noqa: E501

        :return: The ip of this RuntimeSSHEvent.  # noqa: E501
        :rtype: int
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RuntimeSSHEvent.

        IP address represents the connection client IP address.   # noqa: E501

        :param ip: The ip of this RuntimeSSHEvent.  # noqa: E501
        :type ip: int
        """

        self._ip = ip

    @property
    def login_time(self):
        """Gets the login_time of this RuntimeSSHEvent.  # noqa: E501

        LoginTime represents the SSH login time.   # noqa: E501

        :return: The login_time of this RuntimeSSHEvent.  # noqa: E501
        :rtype: int
        """
        return self._login_time

    @login_time.setter
    def login_time(self, login_time):
        """Sets the login_time of this RuntimeSSHEvent.

        LoginTime represents the SSH login time.   # noqa: E501

        :param login_time: The login_time of this RuntimeSSHEvent.  # noqa: E501
        :type login_time: int
        """

        self._login_time = login_time

    @property
    def md5(self):
        """Gets the md5 of this RuntimeSSHEvent.  # noqa: E501

        MD5 is the process binary MD5 sum.   # noqa: E501

        :return: The md5 of this RuntimeSSHEvent.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this RuntimeSSHEvent.

        MD5 is the process binary MD5 sum.   # noqa: E501

        :param md5: The md5 of this RuntimeSSHEvent.  # noqa: E501
        :type md5: str
        """

        self._md5 = md5

    @property
    def modified(self):
        """Gets the modified of this RuntimeSSHEvent.  # noqa: E501

        Modified indicates the process binary was modified after the container has started.   # noqa: E501

        :return: The modified of this RuntimeSSHEvent.  # noqa: E501
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this RuntimeSSHEvent.

        Modified indicates the process binary was modified after the container has started.   # noqa: E501

        :param modified: The modified of this RuntimeSSHEvent.  # noqa: E501
        :type modified: bool
        """

        self._modified = modified

    @property
    def path(self):
        """Gets the path of this RuntimeSSHEvent.  # noqa: E501

        Path is the process binary path.   # noqa: E501

        :return: The path of this RuntimeSSHEvent.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RuntimeSSHEvent.

        Path is the process binary path.   # noqa: E501

        :param path: The path of this RuntimeSSHEvent.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def ppath(self):
        """Gets the ppath of this RuntimeSSHEvent.  # noqa: E501

        PPath is the parent process path.   # noqa: E501

        :return: The ppath of this RuntimeSSHEvent.  # noqa: E501
        :rtype: str
        """
        return self._ppath

    @ppath.setter
    def ppath(self, ppath):
        """Sets the ppath of this RuntimeSSHEvent.

        PPath is the parent process path.   # noqa: E501

        :param ppath: The ppath of this RuntimeSSHEvent.  # noqa: E501
        :type ppath: str
        """

        self._ppath = ppath

    @property
    def time(self):
        """Gets the time of this RuntimeSSHEvent.  # noqa: E501

        Time is the time in which the process was added. If the process was modified, Time is the modification time.   # noqa: E501

        :return: The time of this RuntimeSSHEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this RuntimeSSHEvent.

        Time is the time in which the process was added. If the process was modified, Time is the modification time.   # noqa: E501

        :param time: The time of this RuntimeSSHEvent.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def user(self):
        """Gets the user of this RuntimeSSHEvent.  # noqa: E501

        User represents the username that started the process.   # noqa: E501

        :return: The user of this RuntimeSSHEvent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RuntimeSSHEvent.

        User represents the username that started the process.   # noqa: E501

        :param user: The user of this RuntimeSSHEvent.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeSSHEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeSSHEvent):
            return True

        return self.to_dict() != other.to_dict()
