# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class IdentitySettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ldap': 'IdentityLdapSettings',
        'oauth': 'IdentityProviderSettings',
        'openid': 'IdentityProviderSettings',
        'saml': 'IdentitySamlSettings'
    }

    attribute_map = {
        'ldap': 'ldap',
        'oauth': 'oauth',
        'openid': 'openid',
        'saml': 'saml'
    }

    def __init__(self, ldap=None, oauth=None, openid=None, saml=None, local_vars_configuration=None):  # noqa: E501
        """IdentitySettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ldap = None
        self._oauth = None
        self._openid = None
        self._saml = None
        self.discriminator = None

        if ldap is not None:
            self.ldap = ldap
        if oauth is not None:
            self.oauth = oauth
        if openid is not None:
            self.openid = openid
        if saml is not None:
            self.saml = saml

    @property
    def ldap(self):
        """Gets the ldap of this IdentitySettings.  # noqa: E501


        :return: The ldap of this IdentitySettings.  # noqa: E501
        :rtype: IdentityLdapSettings
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this IdentitySettings.


        :param ldap: The ldap of this IdentitySettings.  # noqa: E501
        :type ldap: IdentityLdapSettings
        """

        self._ldap = ldap

    @property
    def oauth(self):
        """Gets the oauth of this IdentitySettings.  # noqa: E501


        :return: The oauth of this IdentitySettings.  # noqa: E501
        :rtype: IdentityProviderSettings
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth):
        """Sets the oauth of this IdentitySettings.


        :param oauth: The oauth of this IdentitySettings.  # noqa: E501
        :type oauth: IdentityProviderSettings
        """

        self._oauth = oauth

    @property
    def openid(self):
        """Gets the openid of this IdentitySettings.  # noqa: E501


        :return: The openid of this IdentitySettings.  # noqa: E501
        :rtype: IdentityProviderSettings
        """
        return self._openid

    @openid.setter
    def openid(self, openid):
        """Sets the openid of this IdentitySettings.


        :param openid: The openid of this IdentitySettings.  # noqa: E501
        :type openid: IdentityProviderSettings
        """

        self._openid = openid

    @property
    def saml(self):
        """Gets the saml of this IdentitySettings.  # noqa: E501


        :return: The saml of this IdentitySettings.  # noqa: E501
        :rtype: IdentitySamlSettings
        """
        return self._saml

    @saml.setter
    def saml(self, saml):
        """Sets the saml of this IdentitySettings.


        :param saml: The saml of this IdentitySettings.  # noqa: E501
        :type saml: IdentitySamlSettings
        """

        self._saml = saml

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentitySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentitySettings):
            return True

        return self.to_dict() != other.to_dict()
