# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasAPIObservation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_id': 'str',
        'hosts': 'list[str]',
        'images': 'list[str]',
        'learning_started': 'datetime',
        'paths': 'list[WaasAPIPath]',
        'rule_id': 'str',
        'servers': 'list[str]'
    }

    attribute_map = {
        'app_id': 'appID',
        'hosts': 'hosts',
        'images': 'images',
        'learning_started': 'learningStarted',
        'paths': 'paths',
        'rule_id': 'ruleID',
        'servers': 'servers'
    }

    def __init__(self, app_id=None, hosts=None, images=None, learning_started=None, paths=None, rule_id=None, servers=None, local_vars_configuration=None):  # noqa: E501
        """WaasAPIObservation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._app_id = None
        self._hosts = None
        self._images = None
        self._learning_started = None
        self._paths = None
        self._rule_id = None
        self._servers = None
        self.discriminator = None

        if app_id is not None:
            self.app_id = app_id
        if hosts is not None:
            self.hosts = hosts
        if images is not None:
            self.images = images
        if learning_started is not None:
            self.learning_started = learning_started
        if paths is not None:
            self.paths = paths
        if rule_id is not None:
            self.rule_id = rule_id
        if servers is not None:
            self.servers = servers

    @property
    def app_id(self):
        """Gets the app_id of this WaasAPIObservation.  # noqa: E501

        AppID is the app ID.   # noqa: E501

        :return: The app_id of this WaasAPIObservation.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this WaasAPIObservation.

        AppID is the app ID.   # noqa: E501

        :param app_id: The app_id of this WaasAPIObservation.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def hosts(self):
        """Gets the hosts of this WaasAPIObservation.  # noqa: E501

        Hosts are the hosts seen for this API.   # noqa: E501

        :return: The hosts of this WaasAPIObservation.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this WaasAPIObservation.

        Hosts are the hosts seen for this API.   # noqa: E501

        :param hosts: The hosts of this WaasAPIObservation.  # noqa: E501
        :type hosts: list[str]
        """

        self._hosts = hosts

    @property
    def images(self):
        """Gets the images of this WaasAPIObservation.  # noqa: E501

        Images are the image names seen for this API.   # noqa: E501

        :return: The images of this WaasAPIObservation.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this WaasAPIObservation.

        Images are the image names seen for this API.   # noqa: E501

        :param images: The images of this WaasAPIObservation.  # noqa: E501
        :type images: list[str]
        """

        self._images = images

    @property
    def learning_started(self):
        """Gets the learning_started of this WaasAPIObservation.  # noqa: E501

        LearningStarted is the start date of learning for this model.   # noqa: E501

        :return: The learning_started of this WaasAPIObservation.  # noqa: E501
        :rtype: datetime
        """
        return self._learning_started

    @learning_started.setter
    def learning_started(self, learning_started):
        """Sets the learning_started of this WaasAPIObservation.

        LearningStarted is the start date of learning for this model.   # noqa: E501

        :param learning_started: The learning_started of this WaasAPIObservation.  # noqa: E501
        :type learning_started: datetime
        """

        self._learning_started = learning_started

    @property
    def paths(self):
        """Gets the paths of this WaasAPIObservation.  # noqa: E501

        Paths are the API paths.   # noqa: E501

        :return: The paths of this WaasAPIObservation.  # noqa: E501
        :rtype: list[WaasAPIPath]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this WaasAPIObservation.

        Paths are the API paths.   # noqa: E501

        :param paths: The paths of this WaasAPIObservation.  # noqa: E501
        :type paths: list[WaasAPIPath]
        """

        self._paths = paths

    @property
    def rule_id(self):
        """Gets the rule_id of this WaasAPIObservation.  # noqa: E501

        RuleID is the rule ID.   # noqa: E501

        :return: The rule_id of this WaasAPIObservation.  # noqa: E501
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this WaasAPIObservation.

        RuleID is the rule ID.   # noqa: E501

        :param rule_id: The rule_id of this WaasAPIObservation.  # noqa: E501
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def servers(self):
        """Gets the servers of this WaasAPIObservation.  # noqa: E501

        Servers are the servers seen for this API.   # noqa: E501

        :return: The servers of this WaasAPIObservation.  # noqa: E501
        :rtype: list[str]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this WaasAPIObservation.

        Servers are the servers seen for this API.   # noqa: E501

        :param servers: The servers of this WaasAPIObservation.  # noqa: E501
        :type servers: list[str]
        """

        self._servers = servers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasAPIObservation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasAPIObservation):
            return True

        return self.to_dict() != other.to_dict()
