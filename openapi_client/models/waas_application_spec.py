# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasApplicationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_spec': 'WaasAPISpec',
        'app_id': 'str',
        'attack_tools': 'WaasProtectionConfig',
        'ban_duration_minutes': 'int',
        'body': 'WaasBodyConfig',
        'bot_protection_spec': 'WaasBotProtectionSpec',
        'certificate': 'CommonSecret',
        'clickjacking_enabled': 'bool',
        'cmdi': 'WaasProtectionConfig',
        'code_injection': 'WaasProtectionConfig',
        'csrf_enabled': 'bool',
        'custom_block_response': 'WaasCustomBlockResponseConfig',
        'custom_rules': 'list[CustomrulesRef]',
        'dos_config': 'WaasDoSConfig',
        'header_specs': 'list[WaasHeaderSpec]',
        'intel_gathering': 'WaasIntelGatheringConfig',
        'lfi': 'WaasProtectionConfig',
        'malformed_req': 'WaasProtectionConfig',
        'malicious_upload': 'WaasMaliciousUploadConfig',
        'network_controls': 'WaasNetworkControls',
        'remote_host_forwarding': 'WaasRemoteHostForwardingConfig',
        'session_cookie_ban': 'bool',
        'session_cookie_enabled': 'bool',
        'shellshock': 'WaasProtectionConfig',
        'sqli': 'WaasProtectionConfig',
        'xss': 'WaasProtectionConfig'
    }

    attribute_map = {
        'api_spec': 'apiSpec',
        'app_id': 'appID',
        'attack_tools': 'attackTools',
        'ban_duration_minutes': 'banDurationMinutes',
        'body': 'body',
        'bot_protection_spec': 'botProtectionSpec',
        'certificate': 'certificate',
        'clickjacking_enabled': 'clickjackingEnabled',
        'cmdi': 'cmdi',
        'code_injection': 'codeInjection',
        'csrf_enabled': 'csrfEnabled',
        'custom_block_response': 'customBlockResponse',
        'custom_rules': 'customRules',
        'dos_config': 'dosConfig',
        'header_specs': 'headerSpecs',
        'intel_gathering': 'intelGathering',
        'lfi': 'lfi',
        'malformed_req': 'malformedReq',
        'malicious_upload': 'maliciousUpload',
        'network_controls': 'networkControls',
        'remote_host_forwarding': 'remoteHostForwarding',
        'session_cookie_ban': 'sessionCookieBan',
        'session_cookie_enabled': 'sessionCookieEnabled',
        'shellshock': 'shellshock',
        'sqli': 'sqli',
        'xss': 'xss'
    }

    def __init__(self, api_spec=None, app_id=None, attack_tools=None, ban_duration_minutes=None, body=None, bot_protection_spec=None, certificate=None, clickjacking_enabled=None, cmdi=None, code_injection=None, csrf_enabled=None, custom_block_response=None, custom_rules=None, dos_config=None, header_specs=None, intel_gathering=None, lfi=None, malformed_req=None, malicious_upload=None, network_controls=None, remote_host_forwarding=None, session_cookie_ban=None, session_cookie_enabled=None, shellshock=None, sqli=None, xss=None, local_vars_configuration=None):  # noqa: E501
        """WaasApplicationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._api_spec = None
        self._app_id = None
        self._attack_tools = None
        self._ban_duration_minutes = None
        self._body = None
        self._bot_protection_spec = None
        self._certificate = None
        self._clickjacking_enabled = None
        self._cmdi = None
        self._code_injection = None
        self._csrf_enabled = None
        self._custom_block_response = None
        self._custom_rules = None
        self._dos_config = None
        self._header_specs = None
        self._intel_gathering = None
        self._lfi = None
        self._malformed_req = None
        self._malicious_upload = None
        self._network_controls = None
        self._remote_host_forwarding = None
        self._session_cookie_ban = None
        self._session_cookie_enabled = None
        self._shellshock = None
        self._sqli = None
        self._xss = None
        self.discriminator = None

        if api_spec is not None:
            self.api_spec = api_spec
        if app_id is not None:
            self.app_id = app_id
        if attack_tools is not None:
            self.attack_tools = attack_tools
        if ban_duration_minutes is not None:
            self.ban_duration_minutes = ban_duration_minutes
        if body is not None:
            self.body = body
        if bot_protection_spec is not None:
            self.bot_protection_spec = bot_protection_spec
        if certificate is not None:
            self.certificate = certificate
        if clickjacking_enabled is not None:
            self.clickjacking_enabled = clickjacking_enabled
        if cmdi is not None:
            self.cmdi = cmdi
        if code_injection is not None:
            self.code_injection = code_injection
        if csrf_enabled is not None:
            self.csrf_enabled = csrf_enabled
        if custom_block_response is not None:
            self.custom_block_response = custom_block_response
        if custom_rules is not None:
            self.custom_rules = custom_rules
        if dos_config is not None:
            self.dos_config = dos_config
        if header_specs is not None:
            self.header_specs = header_specs
        if intel_gathering is not None:
            self.intel_gathering = intel_gathering
        if lfi is not None:
            self.lfi = lfi
        if malformed_req is not None:
            self.malformed_req = malformed_req
        if malicious_upload is not None:
            self.malicious_upload = malicious_upload
        if network_controls is not None:
            self.network_controls = network_controls
        if remote_host_forwarding is not None:
            self.remote_host_forwarding = remote_host_forwarding
        if session_cookie_ban is not None:
            self.session_cookie_ban = session_cookie_ban
        if session_cookie_enabled is not None:
            self.session_cookie_enabled = session_cookie_enabled
        if shellshock is not None:
            self.shellshock = shellshock
        if sqli is not None:
            self.sqli = sqli
        if xss is not None:
            self.xss = xss

    @property
    def api_spec(self):
        """Gets the api_spec of this WaasApplicationSpec.  # noqa: E501


        :return: The api_spec of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasAPISpec
        """
        return self._api_spec

    @api_spec.setter
    def api_spec(self, api_spec):
        """Sets the api_spec of this WaasApplicationSpec.


        :param api_spec: The api_spec of this WaasApplicationSpec.  # noqa: E501
        :type api_spec: WaasAPISpec
        """

        self._api_spec = api_spec

    @property
    def app_id(self):
        """Gets the app_id of this WaasApplicationSpec.  # noqa: E501

        Unique ID for the app.   # noqa: E501

        :return: The app_id of this WaasApplicationSpec.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this WaasApplicationSpec.

        Unique ID for the app.   # noqa: E501

        :param app_id: The app_id of this WaasApplicationSpec.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def attack_tools(self):
        """Gets the attack_tools of this WaasApplicationSpec.  # noqa: E501


        :return: The attack_tools of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._attack_tools

    @attack_tools.setter
    def attack_tools(self, attack_tools):
        """Sets the attack_tools of this WaasApplicationSpec.


        :param attack_tools: The attack_tools of this WaasApplicationSpec.  # noqa: E501
        :type attack_tools: WaasProtectionConfig
        """

        self._attack_tools = attack_tools

    @property
    def ban_duration_minutes(self):
        """Gets the ban_duration_minutes of this WaasApplicationSpec.  # noqa: E501

        Ban duration, in minutes.   # noqa: E501

        :return: The ban_duration_minutes of this WaasApplicationSpec.  # noqa: E501
        :rtype: int
        """
        return self._ban_duration_minutes

    @ban_duration_minutes.setter
    def ban_duration_minutes(self, ban_duration_minutes):
        """Sets the ban_duration_minutes of this WaasApplicationSpec.

        Ban duration, in minutes.   # noqa: E501

        :param ban_duration_minutes: The ban_duration_minutes of this WaasApplicationSpec.  # noqa: E501
        :type ban_duration_minutes: int
        """

        self._ban_duration_minutes = ban_duration_minutes

    @property
    def body(self):
        """Gets the body of this WaasApplicationSpec.  # noqa: E501


        :return: The body of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasBodyConfig
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this WaasApplicationSpec.


        :param body: The body of this WaasApplicationSpec.  # noqa: E501
        :type body: WaasBodyConfig
        """

        self._body = body

    @property
    def bot_protection_spec(self):
        """Gets the bot_protection_spec of this WaasApplicationSpec.  # noqa: E501


        :return: The bot_protection_spec of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasBotProtectionSpec
        """
        return self._bot_protection_spec

    @bot_protection_spec.setter
    def bot_protection_spec(self, bot_protection_spec):
        """Sets the bot_protection_spec of this WaasApplicationSpec.


        :param bot_protection_spec: The bot_protection_spec of this WaasApplicationSpec.  # noqa: E501
        :type bot_protection_spec: WaasBotProtectionSpec
        """

        self._bot_protection_spec = bot_protection_spec

    @property
    def certificate(self):
        """Gets the certificate of this WaasApplicationSpec.  # noqa: E501


        :return: The certificate of this WaasApplicationSpec.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this WaasApplicationSpec.


        :param certificate: The certificate of this WaasApplicationSpec.  # noqa: E501
        :type certificate: CommonSecret
        """

        self._certificate = certificate

    @property
    def clickjacking_enabled(self):
        """Gets the clickjacking_enabled of this WaasApplicationSpec.  # noqa: E501

        Indicates whether clickjacking protection is enabled (true) or not (false).   # noqa: E501

        :return: The clickjacking_enabled of this WaasApplicationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._clickjacking_enabled

    @clickjacking_enabled.setter
    def clickjacking_enabled(self, clickjacking_enabled):
        """Sets the clickjacking_enabled of this WaasApplicationSpec.

        Indicates whether clickjacking protection is enabled (true) or not (false).   # noqa: E501

        :param clickjacking_enabled: The clickjacking_enabled of this WaasApplicationSpec.  # noqa: E501
        :type clickjacking_enabled: bool
        """

        self._clickjacking_enabled = clickjacking_enabled

    @property
    def cmdi(self):
        """Gets the cmdi of this WaasApplicationSpec.  # noqa: E501


        :return: The cmdi of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._cmdi

    @cmdi.setter
    def cmdi(self, cmdi):
        """Sets the cmdi of this WaasApplicationSpec.


        :param cmdi: The cmdi of this WaasApplicationSpec.  # noqa: E501
        :type cmdi: WaasProtectionConfig
        """

        self._cmdi = cmdi

    @property
    def code_injection(self):
        """Gets the code_injection of this WaasApplicationSpec.  # noqa: E501


        :return: The code_injection of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._code_injection

    @code_injection.setter
    def code_injection(self, code_injection):
        """Sets the code_injection of this WaasApplicationSpec.


        :param code_injection: The code_injection of this WaasApplicationSpec.  # noqa: E501
        :type code_injection: WaasProtectionConfig
        """

        self._code_injection = code_injection

    @property
    def csrf_enabled(self):
        """Gets the csrf_enabled of this WaasApplicationSpec.  # noqa: E501

        Indicates whether Cross-Site Request Forgery (CSRF) protection is enabled (true) or not (false).   # noqa: E501

        :return: The csrf_enabled of this WaasApplicationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._csrf_enabled

    @csrf_enabled.setter
    def csrf_enabled(self, csrf_enabled):
        """Sets the csrf_enabled of this WaasApplicationSpec.

        Indicates whether Cross-Site Request Forgery (CSRF) protection is enabled (true) or not (false).   # noqa: E501

        :param csrf_enabled: The csrf_enabled of this WaasApplicationSpec.  # noqa: E501
        :type csrf_enabled: bool
        """

        self._csrf_enabled = csrf_enabled

    @property
    def custom_block_response(self):
        """Gets the custom_block_response of this WaasApplicationSpec.  # noqa: E501


        :return: The custom_block_response of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasCustomBlockResponseConfig
        """
        return self._custom_block_response

    @custom_block_response.setter
    def custom_block_response(self, custom_block_response):
        """Sets the custom_block_response of this WaasApplicationSpec.


        :param custom_block_response: The custom_block_response of this WaasApplicationSpec.  # noqa: E501
        :type custom_block_response: WaasCustomBlockResponseConfig
        """

        self._custom_block_response = custom_block_response

    @property
    def custom_rules(self):
        """Gets the custom_rules of this WaasApplicationSpec.  # noqa: E501

        List of custom runtime rules.   # noqa: E501

        :return: The custom_rules of this WaasApplicationSpec.  # noqa: E501
        :rtype: list[CustomrulesRef]
        """
        return self._custom_rules

    @custom_rules.setter
    def custom_rules(self, custom_rules):
        """Sets the custom_rules of this WaasApplicationSpec.

        List of custom runtime rules.   # noqa: E501

        :param custom_rules: The custom_rules of this WaasApplicationSpec.  # noqa: E501
        :type custom_rules: list[CustomrulesRef]
        """

        self._custom_rules = custom_rules

    @property
    def dos_config(self):
        """Gets the dos_config of this WaasApplicationSpec.  # noqa: E501


        :return: The dos_config of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasDoSConfig
        """
        return self._dos_config

    @dos_config.setter
    def dos_config(self, dos_config):
        """Sets the dos_config of this WaasApplicationSpec.


        :param dos_config: The dos_config of this WaasApplicationSpec.  # noqa: E501
        :type dos_config: WaasDoSConfig
        """

        self._dos_config = dos_config

    @property
    def header_specs(self):
        """Gets the header_specs of this WaasApplicationSpec.  # noqa: E501

        Configuration for inspecting HTTP headers.   # noqa: E501

        :return: The header_specs of this WaasApplicationSpec.  # noqa: E501
        :rtype: list[WaasHeaderSpec]
        """
        return self._header_specs

    @header_specs.setter
    def header_specs(self, header_specs):
        """Sets the header_specs of this WaasApplicationSpec.

        Configuration for inspecting HTTP headers.   # noqa: E501

        :param header_specs: The header_specs of this WaasApplicationSpec.  # noqa: E501
        :type header_specs: list[WaasHeaderSpec]
        """

        self._header_specs = header_specs

    @property
    def intel_gathering(self):
        """Gets the intel_gathering of this WaasApplicationSpec.  # noqa: E501


        :return: The intel_gathering of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasIntelGatheringConfig
        """
        return self._intel_gathering

    @intel_gathering.setter
    def intel_gathering(self, intel_gathering):
        """Sets the intel_gathering of this WaasApplicationSpec.


        :param intel_gathering: The intel_gathering of this WaasApplicationSpec.  # noqa: E501
        :type intel_gathering: WaasIntelGatheringConfig
        """

        self._intel_gathering = intel_gathering

    @property
    def lfi(self):
        """Gets the lfi of this WaasApplicationSpec.  # noqa: E501


        :return: The lfi of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._lfi

    @lfi.setter
    def lfi(self, lfi):
        """Sets the lfi of this WaasApplicationSpec.


        :param lfi: The lfi of this WaasApplicationSpec.  # noqa: E501
        :type lfi: WaasProtectionConfig
        """

        self._lfi = lfi

    @property
    def malformed_req(self):
        """Gets the malformed_req of this WaasApplicationSpec.  # noqa: E501


        :return: The malformed_req of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._malformed_req

    @malformed_req.setter
    def malformed_req(self, malformed_req):
        """Sets the malformed_req of this WaasApplicationSpec.


        :param malformed_req: The malformed_req of this WaasApplicationSpec.  # noqa: E501
        :type malformed_req: WaasProtectionConfig
        """

        self._malformed_req = malformed_req

    @property
    def malicious_upload(self):
        """Gets the malicious_upload of this WaasApplicationSpec.  # noqa: E501


        :return: The malicious_upload of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasMaliciousUploadConfig
        """
        return self._malicious_upload

    @malicious_upload.setter
    def malicious_upload(self, malicious_upload):
        """Sets the malicious_upload of this WaasApplicationSpec.


        :param malicious_upload: The malicious_upload of this WaasApplicationSpec.  # noqa: E501
        :type malicious_upload: WaasMaliciousUploadConfig
        """

        self._malicious_upload = malicious_upload

    @property
    def network_controls(self):
        """Gets the network_controls of this WaasApplicationSpec.  # noqa: E501


        :return: The network_controls of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasNetworkControls
        """
        return self._network_controls

    @network_controls.setter
    def network_controls(self, network_controls):
        """Sets the network_controls of this WaasApplicationSpec.


        :param network_controls: The network_controls of this WaasApplicationSpec.  # noqa: E501
        :type network_controls: WaasNetworkControls
        """

        self._network_controls = network_controls

    @property
    def remote_host_forwarding(self):
        """Gets the remote_host_forwarding of this WaasApplicationSpec.  # noqa: E501


        :return: The remote_host_forwarding of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasRemoteHostForwardingConfig
        """
        return self._remote_host_forwarding

    @remote_host_forwarding.setter
    def remote_host_forwarding(self, remote_host_forwarding):
        """Sets the remote_host_forwarding of this WaasApplicationSpec.


        :param remote_host_forwarding: The remote_host_forwarding of this WaasApplicationSpec.  # noqa: E501
        :type remote_host_forwarding: WaasRemoteHostForwardingConfig
        """

        self._remote_host_forwarding = remote_host_forwarding

    @property
    def session_cookie_ban(self):
        """Gets the session_cookie_ban of this WaasApplicationSpec.  # noqa: E501

        Indicates if bans in this app are made by session cookie ID (true) or false (not).   # noqa: E501

        :return: The session_cookie_ban of this WaasApplicationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._session_cookie_ban

    @session_cookie_ban.setter
    def session_cookie_ban(self, session_cookie_ban):
        """Sets the session_cookie_ban of this WaasApplicationSpec.

        Indicates if bans in this app are made by session cookie ID (true) or false (not).   # noqa: E501

        :param session_cookie_ban: The session_cookie_ban of this WaasApplicationSpec.  # noqa: E501
        :type session_cookie_ban: bool
        """

        self._session_cookie_ban = session_cookie_ban

    @property
    def session_cookie_enabled(self):
        """Gets the session_cookie_enabled of this WaasApplicationSpec.  # noqa: E501

        Indicates if session cookies are enabled (true) or not (false).   # noqa: E501

        :return: The session_cookie_enabled of this WaasApplicationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._session_cookie_enabled

    @session_cookie_enabled.setter
    def session_cookie_enabled(self, session_cookie_enabled):
        """Sets the session_cookie_enabled of this WaasApplicationSpec.

        Indicates if session cookies are enabled (true) or not (false).   # noqa: E501

        :param session_cookie_enabled: The session_cookie_enabled of this WaasApplicationSpec.  # noqa: E501
        :type session_cookie_enabled: bool
        """

        self._session_cookie_enabled = session_cookie_enabled

    @property
    def shellshock(self):
        """Gets the shellshock of this WaasApplicationSpec.  # noqa: E501


        :return: The shellshock of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._shellshock

    @shellshock.setter
    def shellshock(self, shellshock):
        """Sets the shellshock of this WaasApplicationSpec.


        :param shellshock: The shellshock of this WaasApplicationSpec.  # noqa: E501
        :type shellshock: WaasProtectionConfig
        """

        self._shellshock = shellshock

    @property
    def sqli(self):
        """Gets the sqli of this WaasApplicationSpec.  # noqa: E501


        :return: The sqli of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._sqli

    @sqli.setter
    def sqli(self, sqli):
        """Sets the sqli of this WaasApplicationSpec.


        :param sqli: The sqli of this WaasApplicationSpec.  # noqa: E501
        :type sqli: WaasProtectionConfig
        """

        self._sqli = sqli

    @property
    def xss(self):
        """Gets the xss of this WaasApplicationSpec.  # noqa: E501


        :return: The xss of this WaasApplicationSpec.  # noqa: E501
        :rtype: WaasProtectionConfig
        """
        return self._xss

    @xss.setter
    def xss(self, xss):
        """Sets the xss of this WaasApplicationSpec.


        :param xss: The xss of this WaasApplicationSpec.  # noqa: E501
        :type xss: WaasProtectionConfig
        """

        self._xss = xss

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasApplicationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasApplicationSpec):
            return True

        return self.to_dict() != other.to_dict()
