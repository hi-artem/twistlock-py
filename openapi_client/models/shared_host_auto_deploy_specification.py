# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedHostAutoDeploySpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_region_type': 'SharedAwsRegionType',
        'collections': 'list[CollectionCollection]',
        'console_hostname': 'str',
        'credential_id': 'str',
        'last_modified': 'datetime',
        'name': 'str'
    }

    attribute_map = {
        'aws_region_type': 'awsRegionType',
        'collections': 'collections',
        'console_hostname': 'consoleHostname',
        'credential_id': 'credentialID',
        'last_modified': 'lastModified',
        'name': 'name'
    }

    def __init__(self, aws_region_type=None, collections=None, console_hostname=None, credential_id=None, last_modified=None, name=None, local_vars_configuration=None):  # noqa: E501
        """SharedHostAutoDeploySpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._aws_region_type = None
        self._collections = None
        self._console_hostname = None
        self._credential_id = None
        self._last_modified = None
        self._name = None
        self.discriminator = None

        if aws_region_type is not None:
            self.aws_region_type = aws_region_type
        if collections is not None:
            self.collections = collections
        if console_hostname is not None:
            self.console_hostname = console_hostname
        if credential_id is not None:
            self.credential_id = credential_id
        if last_modified is not None:
            self.last_modified = last_modified
        if name is not None:
            self.name = name

    @property
    def aws_region_type(self):
        """Gets the aws_region_type of this SharedHostAutoDeploySpecification.  # noqa: E501


        :return: The aws_region_type of this SharedHostAutoDeploySpecification.  # noqa: E501
        :rtype: SharedAwsRegionType
        """
        return self._aws_region_type

    @aws_region_type.setter
    def aws_region_type(self, aws_region_type):
        """Sets the aws_region_type of this SharedHostAutoDeploySpecification.


        :param aws_region_type: The aws_region_type of this SharedHostAutoDeploySpecification.  # noqa: E501
        :type aws_region_type: SharedAwsRegionType
        """

        self._aws_region_type = aws_region_type

    @property
    def collections(self):
        """Gets the collections of this SharedHostAutoDeploySpecification.  # noqa: E501

        Collections is a list of collections the rule applies to.   # noqa: E501

        :return: The collections of this SharedHostAutoDeploySpecification.  # noqa: E501
        :rtype: list[CollectionCollection]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedHostAutoDeploySpecification.

        Collections is a list of collections the rule applies to.   # noqa: E501

        :param collections: The collections of this SharedHostAutoDeploySpecification.  # noqa: E501
        :type collections: list[CollectionCollection]
        """

        self._collections = collections

    @property
    def console_hostname(self):
        """Gets the console_hostname of this SharedHostAutoDeploySpecification.  # noqa: E501

        ConsoleHostname represents the hostname of the console to connect to.   # noqa: E501

        :return: The console_hostname of this SharedHostAutoDeploySpecification.  # noqa: E501
        :rtype: str
        """
        return self._console_hostname

    @console_hostname.setter
    def console_hostname(self, console_hostname):
        """Sets the console_hostname of this SharedHostAutoDeploySpecification.

        ConsoleHostname represents the hostname of the console to connect to.   # noqa: E501

        :param console_hostname: The console_hostname of this SharedHostAutoDeploySpecification.  # noqa: E501
        :type console_hostname: str
        """

        self._console_hostname = console_hostname

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedHostAutoDeploySpecification.  # noqa: E501

        CredentialID is the service provider authentication data.   # noqa: E501

        :return: The credential_id of this SharedHostAutoDeploySpecification.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedHostAutoDeploySpecification.

        CredentialID is the service provider authentication data.   # noqa: E501

        :param credential_id: The credential_id of this SharedHostAutoDeploySpecification.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def last_modified(self):
        """Gets the last_modified of this SharedHostAutoDeploySpecification.  # noqa: E501

        LastModified is the last modified time of the specification.   # noqa: E501

        :return: The last_modified of this SharedHostAutoDeploySpecification.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this SharedHostAutoDeploySpecification.

        LastModified is the last modified time of the specification.   # noqa: E501

        :param last_modified: The last_modified of this SharedHostAutoDeploySpecification.  # noqa: E501
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this SharedHostAutoDeploySpecification.  # noqa: E501

        Name is the name of the spec.   # noqa: E501

        :return: The name of this SharedHostAutoDeploySpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedHostAutoDeploySpecification.

        Name is the name of the spec.   # noqa: E501

        :param name: The name of this SharedHostAutoDeploySpecification.  # noqa: E501
        :type name: str
        """

        self._name = name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedHostAutoDeploySpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedHostAutoDeploySpecification):
            return True

        return self.to_dict() != other.to_dict()
