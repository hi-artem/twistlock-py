# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasParam(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_empty_value': 'bool',
        'array': 'bool',
        'explode': 'bool',
        'location': 'WaasParamLocation',
        'max': 'float',
        'min': 'float',
        'name': 'str',
        'required': 'bool',
        'style': 'WaasParamStyle',
        'type': 'WaasParamType'
    }

    attribute_map = {
        'allow_empty_value': 'allowEmptyValue',
        'array': 'array',
        'explode': 'explode',
        'location': 'location',
        'max': 'max',
        'min': 'min',
        'name': 'name',
        'required': 'required',
        'style': 'style',
        'type': 'type'
    }

    def __init__(self, allow_empty_value=None, array=None, explode=None, location=None, max=None, min=None, name=None, required=None, style=None, type=None, local_vars_configuration=None):  # noqa: E501
        """WaasParam - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._allow_empty_value = None
        self._array = None
        self._explode = None
        self._location = None
        self._max = None
        self._min = None
        self._name = None
        self._required = None
        self._style = None
        self._type = None
        self.discriminator = None

        if allow_empty_value is not None:
            self.allow_empty_value = allow_empty_value
        if array is not None:
            self.array = array
        if explode is not None:
            self.explode = explode
        if location is not None:
            self.location = location
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required
        if style is not None:
            self.style = style
        if type is not None:
            self.type = type

    @property
    def allow_empty_value(self):
        """Gets the allow_empty_value of this WaasParam.  # noqa: E501

        Indicates if an empty value is allowed (true) or not (false).   # noqa: E501

        :return: The allow_empty_value of this WaasParam.  # noqa: E501
        :rtype: bool
        """
        return self._allow_empty_value

    @allow_empty_value.setter
    def allow_empty_value(self, allow_empty_value):
        """Sets the allow_empty_value of this WaasParam.

        Indicates if an empty value is allowed (true) or not (false).   # noqa: E501

        :param allow_empty_value: The allow_empty_value of this WaasParam.  # noqa: E501
        :type allow_empty_value: bool
        """

        self._allow_empty_value = allow_empty_value

    @property
    def array(self):
        """Gets the array of this WaasParam.  # noqa: E501

        Indicates if multiple values of the specified type are allowed (true) or not (false).   # noqa: E501

        :return: The array of this WaasParam.  # noqa: E501
        :rtype: bool
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this WaasParam.

        Indicates if multiple values of the specified type are allowed (true) or not (false).   # noqa: E501

        :param array: The array of this WaasParam.  # noqa: E501
        :type array: bool
        """

        self._array = array

    @property
    def explode(self):
        """Gets the explode of this WaasParam.  # noqa: E501

        Indicates if arrays should generate separate parameters for each array item or object property.   # noqa: E501

        :return: The explode of this WaasParam.  # noqa: E501
        :rtype: bool
        """
        return self._explode

    @explode.setter
    def explode(self, explode):
        """Sets the explode of this WaasParam.

        Indicates if arrays should generate separate parameters for each array item or object property.   # noqa: E501

        :param explode: The explode of this WaasParam.  # noqa: E501
        :type explode: bool
        """

        self._explode = explode

    @property
    def location(self):
        """Gets the location of this WaasParam.  # noqa: E501


        :return: The location of this WaasParam.  # noqa: E501
        :rtype: WaasParamLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WaasParam.


        :param location: The location of this WaasParam.  # noqa: E501
        :type location: WaasParamLocation
        """

        self._location = location

    @property
    def max(self):
        """Gets the max of this WaasParam.  # noqa: E501

        Maximum allowable value for a numeric parameter.   # noqa: E501

        :return: The max of this WaasParam.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this WaasParam.

        Maximum allowable value for a numeric parameter.   # noqa: E501

        :param max: The max of this WaasParam.  # noqa: E501
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this WaasParam.  # noqa: E501

        Minimum allowable value for a numeric parameter.   # noqa: E501

        :return: The min of this WaasParam.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this WaasParam.

        Minimum allowable value for a numeric parameter.   # noqa: E501

        :param min: The min of this WaasParam.  # noqa: E501
        :type min: float
        """

        self._min = min

    @property
    def name(self):
        """Gets the name of this WaasParam.  # noqa: E501

        Name of the parameter.   # noqa: E501

        :return: The name of this WaasParam.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WaasParam.

        Name of the parameter.   # noqa: E501

        :param name: The name of this WaasParam.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this WaasParam.  # noqa: E501

        Indicates if the parameter is required (true) or not (false).   # noqa: E501

        :return: The required of this WaasParam.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this WaasParam.

        Indicates if the parameter is required (true) or not (false).   # noqa: E501

        :param required: The required of this WaasParam.  # noqa: E501
        :type required: bool
        """

        self._required = required

    @property
    def style(self):
        """Gets the style of this WaasParam.  # noqa: E501


        :return: The style of this WaasParam.  # noqa: E501
        :rtype: WaasParamStyle
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this WaasParam.


        :param style: The style of this WaasParam.  # noqa: E501
        :type style: WaasParamStyle
        """

        self._style = style

    @property
    def type(self):
        """Gets the type of this WaasParam.  # noqa: E501


        :return: The type of this WaasParam.  # noqa: E501
        :rtype: WaasParamType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WaasParam.


        :param type: The type of this WaasParam.  # noqa: E501
        :type type: WaasParamType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasParam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasParam):
            return True

        return self.to_dict() != other.to_dict()
