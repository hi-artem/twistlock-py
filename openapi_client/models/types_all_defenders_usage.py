# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesAllDefendersUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_embedded': 'TypesDefenderUsage',
        'container': 'TypesDefenderUsage',
        'host': 'TypesDefenderUsage',
        'period': 'datetime',
        'remaining_credits': 'int',
        'serverless': 'TypesServerlessUsage',
        'waas': 'TypesDefenderUsage'
    }

    attribute_map = {
        'app_embedded': 'appEmbedded',
        'container': 'container',
        'host': 'host',
        'period': 'period',
        'remaining_credits': 'remainingCredits',
        'serverless': 'serverless',
        'waas': 'waas'
    }

    def __init__(self, app_embedded=None, container=None, host=None, period=None, remaining_credits=None, serverless=None, waas=None, local_vars_configuration=None):  # noqa: E501
        """TypesAllDefendersUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._app_embedded = None
        self._container = None
        self._host = None
        self._period = None
        self._remaining_credits = None
        self._serverless = None
        self._waas = None
        self.discriminator = None

        if app_embedded is not None:
            self.app_embedded = app_embedded
        if container is not None:
            self.container = container
        if host is not None:
            self.host = host
        if period is not None:
            self.period = period
        if remaining_credits is not None:
            self.remaining_credits = remaining_credits
        if serverless is not None:
            self.serverless = serverless
        if waas is not None:
            self.waas = waas

    @property
    def app_embedded(self):
        """Gets the app_embedded of this TypesAllDefendersUsage.  # noqa: E501


        :return: The app_embedded of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: TypesDefenderUsage
        """
        return self._app_embedded

    @app_embedded.setter
    def app_embedded(self, app_embedded):
        """Sets the app_embedded of this TypesAllDefendersUsage.


        :param app_embedded: The app_embedded of this TypesAllDefendersUsage.  # noqa: E501
        :type app_embedded: TypesDefenderUsage
        """

        self._app_embedded = app_embedded

    @property
    def container(self):
        """Gets the container of this TypesAllDefendersUsage.  # noqa: E501


        :return: The container of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: TypesDefenderUsage
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this TypesAllDefendersUsage.


        :param container: The container of this TypesAllDefendersUsage.  # noqa: E501
        :type container: TypesDefenderUsage
        """

        self._container = container

    @property
    def host(self):
        """Gets the host of this TypesAllDefendersUsage.  # noqa: E501


        :return: The host of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: TypesDefenderUsage
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this TypesAllDefendersUsage.


        :param host: The host of this TypesAllDefendersUsage.  # noqa: E501
        :type host: TypesDefenderUsage
        """

        self._host = host

    @property
    def period(self):
        """Gets the period of this TypesAllDefendersUsage.  # noqa: E501

        Period is the date beginning of the usage period.   # noqa: E501

        :return: The period of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: datetime
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this TypesAllDefendersUsage.

        Period is the date beginning of the usage period.   # noqa: E501

        :param period: The period of this TypesAllDefendersUsage.  # noqa: E501
        :type period: datetime
        """

        self._period = period

    @property
    def remaining_credits(self):
        """Gets the remaining_credits of this TypesAllDefendersUsage.  # noqa: E501

        RemainingCredits is the amount of credits left at the beginning of the period.   # noqa: E501

        :return: The remaining_credits of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: int
        """
        return self._remaining_credits

    @remaining_credits.setter
    def remaining_credits(self, remaining_credits):
        """Sets the remaining_credits of this TypesAllDefendersUsage.

        RemainingCredits is the amount of credits left at the beginning of the period.   # noqa: E501

        :param remaining_credits: The remaining_credits of this TypesAllDefendersUsage.  # noqa: E501
        :type remaining_credits: int
        """

        self._remaining_credits = remaining_credits

    @property
    def serverless(self):
        """Gets the serverless of this TypesAllDefendersUsage.  # noqa: E501


        :return: The serverless of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: TypesServerlessUsage
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this TypesAllDefendersUsage.


        :param serverless: The serverless of this TypesAllDefendersUsage.  # noqa: E501
        :type serverless: TypesServerlessUsage
        """

        self._serverless = serverless

    @property
    def waas(self):
        """Gets the waas of this TypesAllDefendersUsage.  # noqa: E501


        :return: The waas of this TypesAllDefendersUsage.  # noqa: E501
        :rtype: TypesDefenderUsage
        """
        return self._waas

    @waas.setter
    def waas(self, waas):
        """Sets the waas of this TypesAllDefendersUsage.


        :param waas: The waas of this TypesAllDefendersUsage.  # noqa: E501
        :type waas: TypesDefenderUsage
        """

        self._waas = waas

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesAllDefendersUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesAllDefendersUsage):
            return True

        return self.to_dict() != other.to_dict()
