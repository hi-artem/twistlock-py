# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesVulnerabilityInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cve': 'str',
        'description': 'str',
        'highest_risk_factors': 'TypesRiskScoreFactors',
        'impacted_pkgs': 'list[str]',
        'impacted_resources_cnt': 'int',
        'link': 'str',
        'risk_factors': 'dict(str, str)',
        'risk_score': 'float',
        'status': 'str'
    }

    attribute_map = {
        'cve': 'cve',
        'description': 'description',
        'highest_risk_factors': 'highestRiskFactors',
        'impacted_pkgs': 'impactedPkgs',
        'impacted_resources_cnt': 'impactedResourcesCnt',
        'link': 'link',
        'risk_factors': 'riskFactors',
        'risk_score': 'riskScore',
        'status': 'status'
    }

    def __init__(self, cve=None, description=None, highest_risk_factors=None, impacted_pkgs=None, impacted_resources_cnt=None, link=None, risk_factors=None, risk_score=None, status=None, local_vars_configuration=None):  # noqa: E501
        """TypesVulnerabilityInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cve = None
        self._description = None
        self._highest_risk_factors = None
        self._impacted_pkgs = None
        self._impacted_resources_cnt = None
        self._link = None
        self._risk_factors = None
        self._risk_score = None
        self._status = None
        self.discriminator = None

        if cve is not None:
            self.cve = cve
        if description is not None:
            self.description = description
        if highest_risk_factors is not None:
            self.highest_risk_factors = highest_risk_factors
        if impacted_pkgs is not None:
            self.impacted_pkgs = impacted_pkgs
        if impacted_resources_cnt is not None:
            self.impacted_resources_cnt = impacted_resources_cnt
        if link is not None:
            self.link = link
        if risk_factors is not None:
            self.risk_factors = risk_factors
        if risk_score is not None:
            self.risk_score = risk_score
        if status is not None:
            self.status = status

    @property
    def cve(self):
        """Gets the cve of this TypesVulnerabilityInfo.  # noqa: E501

        CVE ID.   # noqa: E501

        :return: The cve of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """Sets the cve of this TypesVulnerabilityInfo.

        CVE ID.   # noqa: E501

        :param cve: The cve of this TypesVulnerabilityInfo.  # noqa: E501
        :type cve: str
        """

        self._cve = cve

    @property
    def description(self):
        """Gets the description of this TypesVulnerabilityInfo.  # noqa: E501

        Vulnerability description.   # noqa: E501

        :return: The description of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TypesVulnerabilityInfo.

        Vulnerability description.   # noqa: E501

        :param description: The description of this TypesVulnerabilityInfo.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def highest_risk_factors(self):
        """Gets the highest_risk_factors of this TypesVulnerabilityInfo.  # noqa: E501


        :return: The highest_risk_factors of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: TypesRiskScoreFactors
        """
        return self._highest_risk_factors

    @highest_risk_factors.setter
    def highest_risk_factors(self, highest_risk_factors):
        """Sets the highest_risk_factors of this TypesVulnerabilityInfo.


        :param highest_risk_factors: The highest_risk_factors of this TypesVulnerabilityInfo.  # noqa: E501
        :type highest_risk_factors: TypesRiskScoreFactors
        """

        self._highest_risk_factors = highest_risk_factors

    @property
    def impacted_pkgs(self):
        """Gets the impacted_pkgs of this TypesVulnerabilityInfo.  # noqa: E501

        Packages impacted by the vulnerability.   # noqa: E501

        :return: The impacted_pkgs of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._impacted_pkgs

    @impacted_pkgs.setter
    def impacted_pkgs(self, impacted_pkgs):
        """Sets the impacted_pkgs of this TypesVulnerabilityInfo.

        Packages impacted by the vulnerability.   # noqa: E501

        :param impacted_pkgs: The impacted_pkgs of this TypesVulnerabilityInfo.  # noqa: E501
        :type impacted_pkgs: list[str]
        """

        self._impacted_pkgs = impacted_pkgs

    @property
    def impacted_resources_cnt(self):
        """Gets the impacted_resources_cnt of this TypesVulnerabilityInfo.  # noqa: E501

        Number of resources impacted by this vulnerability.   # noqa: E501

        :return: The impacted_resources_cnt of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: int
        """
        return self._impacted_resources_cnt

    @impacted_resources_cnt.setter
    def impacted_resources_cnt(self, impacted_resources_cnt):
        """Sets the impacted_resources_cnt of this TypesVulnerabilityInfo.

        Number of resources impacted by this vulnerability.   # noqa: E501

        :param impacted_resources_cnt: The impacted_resources_cnt of this TypesVulnerabilityInfo.  # noqa: E501
        :type impacted_resources_cnt: int
        """

        self._impacted_resources_cnt = impacted_resources_cnt

    @property
    def link(self):
        """Gets the link of this TypesVulnerabilityInfo.  # noqa: E501

        Link to CVE.   # noqa: E501

        :return: The link of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this TypesVulnerabilityInfo.

        Link to CVE.   # noqa: E501

        :param link: The link of this TypesVulnerabilityInfo.  # noqa: E501
        :type link: str
        """

        self._link = link

    @property
    def risk_factors(self):
        """Gets the risk_factors of this TypesVulnerabilityInfo.  # noqa: E501

        RiskFactors maps the existence of vulnerability risk factors  # noqa: E501

        :return: The risk_factors of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._risk_factors

    @risk_factors.setter
    def risk_factors(self, risk_factors):
        """Sets the risk_factors of this TypesVulnerabilityInfo.

        RiskFactors maps the existence of vulnerability risk factors  # noqa: E501

        :param risk_factors: The risk_factors of this TypesVulnerabilityInfo.  # noqa: E501
        :type risk_factors: dict(str, str)
        """

        self._risk_factors = risk_factors

    @property
    def risk_score(self):
        """Gets the risk_score of this TypesVulnerabilityInfo.  # noqa: E501

        Risk score.   # noqa: E501

        :return: The risk_score of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: float
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this TypesVulnerabilityInfo.

        Risk score.   # noqa: E501

        :param risk_score: The risk_score of this TypesVulnerabilityInfo.  # noqa: E501
        :type risk_score: float
        """

        self._risk_score = risk_score

    @property
    def status(self):
        """Gets the status of this TypesVulnerabilityInfo.  # noqa: E501

        CVE status.   # noqa: E501

        :return: The status of this TypesVulnerabilityInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TypesVulnerabilityInfo.

        CVE status.   # noqa: E501

        :param status: The status of this TypesVulnerabilityInfo.  # noqa: E501
        :type status: str
        """

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesVulnerabilityInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesVulnerabilityInfo):
            return True

        return self.to_dict() != other.to_dict()
