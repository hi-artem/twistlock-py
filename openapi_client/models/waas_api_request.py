# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasAPIRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_id': 'str',
        'content_type': 'str',
        'method': 'str',
        'path': 'str',
        'query_parameters': 'list[str]',
        'response_content_type': 'str',
        'server': 'str',
        'source_ip': 'str',
        'status_code': 'int'
    }

    attribute_map = {
        'app_id': 'appID',
        'content_type': 'contentType',
        'method': 'method',
        'path': 'path',
        'query_parameters': 'queryParameters',
        'response_content_type': 'responseContentType',
        'server': 'server',
        'source_ip': 'sourceIP',
        'status_code': 'statusCode'
    }

    def __init__(self, app_id=None, content_type=None, method=None, path=None, query_parameters=None, response_content_type=None, server=None, source_ip=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """WaasAPIRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._app_id = None
        self._content_type = None
        self._method = None
        self._path = None
        self._query_parameters = None
        self._response_content_type = None
        self._server = None
        self._source_ip = None
        self._status_code = None
        self.discriminator = None

        if app_id is not None:
            self.app_id = app_id
        if content_type is not None:
            self.content_type = content_type
        if method is not None:
            self.method = method
        if path is not None:
            self.path = path
        if query_parameters is not None:
            self.query_parameters = query_parameters
        if response_content_type is not None:
            self.response_content_type = response_content_type
        if server is not None:
            self.server = server
        if source_ip is not None:
            self.source_ip = source_ip
        if status_code is not None:
            self.status_code = status_code

    @property
    def app_id(self):
        """Gets the app_id of this WaasAPIRequest.  # noqa: E501

        AppID is the application ID to which this request belongs.   # noqa: E501

        :return: The app_id of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this WaasAPIRequest.

        AppID is the application ID to which this request belongs.   # noqa: E501

        :param app_id: The app_id of this WaasAPIRequest.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def content_type(self):
        """Gets the content_type of this WaasAPIRequest.  # noqa: E501

        ContentType is the request content type.   # noqa: E501

        :return: The content_type of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this WaasAPIRequest.

        ContentType is the request content type.   # noqa: E501

        :param content_type: The content_type of this WaasAPIRequest.  # noqa: E501
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def method(self):
        """Gets the method of this WaasAPIRequest.  # noqa: E501

        Method is the HTTP Method of the API request.   # noqa: E501

        :return: The method of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this WaasAPIRequest.

        Method is the HTTP Method of the API request.   # noqa: E501

        :param method: The method of this WaasAPIRequest.  # noqa: E501
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this WaasAPIRequest.  # noqa: E501

        Path is the path of the API request.   # noqa: E501

        :return: The path of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this WaasAPIRequest.

        Path is the path of the API request.   # noqa: E501

        :param path: The path of this WaasAPIRequest.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def query_parameters(self):
        """Gets the query_parameters of this WaasAPIRequest.  # noqa: E501

        QueryParameters are the query parameters of the API request.   # noqa: E501

        :return: The query_parameters of this WaasAPIRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this WaasAPIRequest.

        QueryParameters are the query parameters of the API request.   # noqa: E501

        :param query_parameters: The query_parameters of this WaasAPIRequest.  # noqa: E501
        :type query_parameters: list[str]
        """

        self._query_parameters = query_parameters

    @property
    def response_content_type(self):
        """Gets the response_content_type of this WaasAPIRequest.  # noqa: E501

        ResponseContentType is the response content type.   # noqa: E501

        :return: The response_content_type of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_content_type

    @response_content_type.setter
    def response_content_type(self, response_content_type):
        """Sets the response_content_type of this WaasAPIRequest.

        ResponseContentType is the response content type.   # noqa: E501

        :param response_content_type: The response_content_type of this WaasAPIRequest.  # noqa: E501
        :type response_content_type: str
        """

        self._response_content_type = response_content_type

    @property
    def server(self):
        """Gets the server of this WaasAPIRequest.  # noqa: E501

        Server is the destination Server (including port and schema) of the API request.   # noqa: E501

        :return: The server of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this WaasAPIRequest.

        Server is the destination Server (including port and schema) of the API request.   # noqa: E501

        :param server: The server of this WaasAPIRequest.  # noqa: E501
        :type server: str
        """

        self._server = server

    @property
    def source_ip(self):
        """Gets the source_ip of this WaasAPIRequest.  # noqa: E501

        SourceIP is the source IP of the API request.   # noqa: E501

        :return: The source_ip of this WaasAPIRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this WaasAPIRequest.

        SourceIP is the source IP of the API request.   # noqa: E501

        :param source_ip: The source_ip of this WaasAPIRequest.  # noqa: E501
        :type source_ip: str
        """

        self._source_ip = source_ip

    @property
    def status_code(self):
        """Gets the status_code of this WaasAPIRequest.  # noqa: E501

        StatusCode is the response status code.   # noqa: E501

        :return: The status_code of this WaasAPIRequest.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this WaasAPIRequest.

        StatusCode is the response status code.   # noqa: E501

        :param status_code: The status_code of this WaasAPIRequest.  # noqa: E501
        :type status_code: int
        """

        self._status_code = status_code

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasAPIRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasAPIRequest):
            return True

        return self.to_dict() != other.to_dict()
