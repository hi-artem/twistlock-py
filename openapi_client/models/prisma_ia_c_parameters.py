# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PrismaIaCParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'files': 'list[str]',
        'folders': 'list[str]',
        'policy_id_filters': 'list[str]',
        'variable_files': 'list[str]',
        'variables': 'dict(str, str)'
    }

    attribute_map = {
        'files': 'files',
        'folders': 'folders',
        'policy_id_filters': 'policyIdFilters',
        'variable_files': 'variableFiles',
        'variables': 'variables'
    }

    def __init__(self, files=None, folders=None, policy_id_filters=None, variable_files=None, variables=None, local_vars_configuration=None):  # noqa: E501
        """PrismaIaCParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._files = None
        self._folders = None
        self._policy_id_filters = None
        self._variable_files = None
        self._variables = None
        self.discriminator = None

        if files is not None:
            self.files = files
        if folders is not None:
            self.folders = folders
        if policy_id_filters is not None:
            self.policy_id_filters = policy_id_filters
        if variable_files is not None:
            self.variable_files = variable_files
        if variables is not None:
            self.variables = variables

    @property
    def files(self):
        """Gets the files of this PrismaIaCParameters.  # noqa: E501

        Files is an optional list of files that should be scan from the repo.   # noqa: E501

        :return: The files of this PrismaIaCParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this PrismaIaCParameters.

        Files is an optional list of files that should be scan from the repo.   # noqa: E501

        :param files: The files of this PrismaIaCParameters.  # noqa: E501
        :type files: list[str]
        """

        self._files = files

    @property
    def folders(self):
        """Gets the folders of this PrismaIaCParameters.  # noqa: E501

        Folders is an optional list of folders that should be scanned from the repo.   # noqa: E501

        :return: The folders of this PrismaIaCParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this PrismaIaCParameters.

        Folders is an optional list of folders that should be scanned from the repo.   # noqa: E501

        :param folders: The folders of this PrismaIaCParameters.  # noqa: E501
        :type folders: list[str]
        """

        self._folders = folders

    @property
    def policy_id_filters(self):
        """Gets the policy_id_filters of this PrismaIaCParameters.  # noqa: E501

        PolicyIDFilters is an optional list of user provided policy IDs that the scan should filter.   # noqa: E501

        :return: The policy_id_filters of this PrismaIaCParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._policy_id_filters

    @policy_id_filters.setter
    def policy_id_filters(self, policy_id_filters):
        """Sets the policy_id_filters of this PrismaIaCParameters.

        PolicyIDFilters is an optional list of user provided policy IDs that the scan should filter.   # noqa: E501

        :param policy_id_filters: The policy_id_filters of this PrismaIaCParameters.  # noqa: E501
        :type policy_id_filters: list[str]
        """

        self._policy_id_filters = policy_id_filters

    @property
    def variable_files(self):
        """Gets the variable_files of this PrismaIaCParameters.  # noqa: E501

        VariableFiles is a list of files that can include variables for deducing values inside IaC files {\"variablefiles\" : [\"myvariables.tf\",...]}.   # noqa: E501

        :return: The variable_files of this PrismaIaCParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._variable_files

    @variable_files.setter
    def variable_files(self, variable_files):
        """Sets the variable_files of this PrismaIaCParameters.

        VariableFiles is a list of files that can include variables for deducing values inside IaC files {\"variablefiles\" : [\"myvariables.tf\",...]}.   # noqa: E501

        :param variable_files: The variable_files of this PrismaIaCParameters.  # noqa: E501
        :type variable_files: list[str]
        """

        self._variable_files = variable_files

    @property
    def variables(self):
        """Gets the variables of this PrismaIaCParameters.  # noqa: E501

        Variables represents key value variables used for deducing variable values inside IaC files.   # noqa: E501

        :return: The variables of this PrismaIaCParameters.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this PrismaIaCParameters.

        Variables represents key value variables used for deducing variable values inside IaC files.   # noqa: E501

        :param variables: The variables of this PrismaIaCParameters.  # noqa: E501
        :type variables: dict(str, str)
        """

        self._variables = variables

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrismaIaCParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrismaIaCParameters):
            return True

        return self.to_dict() != other.to_dict()
