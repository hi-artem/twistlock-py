# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedRuntimeAudit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'app': 'str',
        'app_id': 'str',
        'attack_techniques': 'list[MitreTechnique]',
        'attack_type': 'SharedRuntimeAttackType',
        'cluster': 'str',
        'collections': 'list[str]',
        'container': 'bool',
        'container_id': 'str',
        'container_name': 'str',
        'count': 'int',
        'country': 'str',
        'effect': 'RuntimeRuleEffect',
        'err': 'str',
        'fqdn': 'str',
        'function': 'str',
        'function_id': 'str',
        'hostname': 'str',
        'image_id': 'str',
        'image_name': 'str',
        'interactive': 'bool',
        'label': 'str',
        'labels': 'dict(str, str)',
        'msg': 'str',
        'namespace': 'str',
        'os': 'str',
        'pid': 'int',
        'process_path': 'str',
        'profile_id': 'str',
        'raw_event': 'str',
        'region': 'str',
        'request_id': 'str',
        'rule_name': 'str',
        'runtime': 'SharedLambdaRuntimeType',
        'severity': 'SharedRuntimeSeverity',
        'time': 'datetime',
        'type': 'SharedRuntimeType',
        'user': 'str',
        'version': 'str'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'app': 'app',
        'app_id': 'appID',
        'attack_techniques': 'attackTechniques',
        'attack_type': 'attackType',
        'cluster': 'cluster',
        'collections': 'collections',
        'container': 'container',
        'container_id': 'containerId',
        'container_name': 'containerName',
        'count': 'count',
        'country': 'country',
        'effect': 'effect',
        'err': 'err',
        'fqdn': 'fqdn',
        'function': 'function',
        'function_id': 'functionID',
        'hostname': 'hostname',
        'image_id': 'imageId',
        'image_name': 'imageName',
        'interactive': 'interactive',
        'label': 'label',
        'labels': 'labels',
        'msg': 'msg',
        'namespace': 'namespace',
        'os': 'os',
        'pid': 'pid',
        'process_path': 'processPath',
        'profile_id': 'profileId',
        'raw_event': 'rawEvent',
        'region': 'region',
        'request_id': 'requestID',
        'rule_name': 'ruleName',
        'runtime': 'runtime',
        'severity': 'severity',
        'time': 'time',
        'type': 'type',
        'user': 'user',
        'version': 'version'
    }

    def __init__(self, id=None, account_id=None, app=None, app_id=None, attack_techniques=None, attack_type=None, cluster=None, collections=None, container=None, container_id=None, container_name=None, count=None, country=None, effect=None, err=None, fqdn=None, function=None, function_id=None, hostname=None, image_id=None, image_name=None, interactive=None, label=None, labels=None, msg=None, namespace=None, os=None, pid=None, process_path=None, profile_id=None, raw_event=None, region=None, request_id=None, rule_name=None, runtime=None, severity=None, time=None, type=None, user=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SharedRuntimeAudit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._app = None
        self._app_id = None
        self._attack_techniques = None
        self._attack_type = None
        self._cluster = None
        self._collections = None
        self._container = None
        self._container_id = None
        self._container_name = None
        self._count = None
        self._country = None
        self._effect = None
        self._err = None
        self._fqdn = None
        self._function = None
        self._function_id = None
        self._hostname = None
        self._image_id = None
        self._image_name = None
        self._interactive = None
        self._label = None
        self._labels = None
        self._msg = None
        self._namespace = None
        self._os = None
        self._pid = None
        self._process_path = None
        self._profile_id = None
        self._raw_event = None
        self._region = None
        self._request_id = None
        self._rule_name = None
        self._runtime = None
        self._severity = None
        self._time = None
        self._type = None
        self._user = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if app is not None:
            self.app = app
        if app_id is not None:
            self.app_id = app_id
        if attack_techniques is not None:
            self.attack_techniques = attack_techniques
        if attack_type is not None:
            self.attack_type = attack_type
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if container is not None:
            self.container = container
        if container_id is not None:
            self.container_id = container_id
        if container_name is not None:
            self.container_name = container_name
        if count is not None:
            self.count = count
        if country is not None:
            self.country = country
        if effect is not None:
            self.effect = effect
        if err is not None:
            self.err = err
        if fqdn is not None:
            self.fqdn = fqdn
        if function is not None:
            self.function = function
        if function_id is not None:
            self.function_id = function_id
        if hostname is not None:
            self.hostname = hostname
        if image_id is not None:
            self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name
        if interactive is not None:
            self.interactive = interactive
        if label is not None:
            self.label = label
        if labels is not None:
            self.labels = labels
        if msg is not None:
            self.msg = msg
        if namespace is not None:
            self.namespace = namespace
        if os is not None:
            self.os = os
        if pid is not None:
            self.pid = pid
        if process_path is not None:
            self.process_path = process_path
        if profile_id is not None:
            self.profile_id = profile_id
        if raw_event is not None:
            self.raw_event = raw_event
        if region is not None:
            self.region = region
        if request_id is not None:
            self.request_id = request_id
        if rule_name is not None:
            self.rule_name = rule_name
        if runtime is not None:
            self.runtime = runtime
        if severity is not None:
            self.severity = severity
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this SharedRuntimeAudit.  # noqa: E501

        Internal ID (used for in-place updates).   # noqa: E501

        :return: The id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedRuntimeAudit.

        Internal ID (used for in-place updates).   # noqa: E501

        :param id: The id of this SharedRuntimeAudit.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this SharedRuntimeAudit.  # noqa: E501

        ID of the cloud account where the audit was generated.   # noqa: E501

        :return: The account_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedRuntimeAudit.

        ID of the cloud account where the audit was generated.   # noqa: E501

        :param account_id: The account_id of this SharedRuntimeAudit.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def app(self):
        """Gets the app of this SharedRuntimeAudit.  # noqa: E501

        Name of the service which violated the host policy.   # noqa: E501

        :return: The app of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this SharedRuntimeAudit.

        Name of the service which violated the host policy.   # noqa: E501

        :param app: The app of this SharedRuntimeAudit.  # noqa: E501
        :type app: str
        """

        self._app = app

    @property
    def app_id(self):
        """Gets the app_id of this SharedRuntimeAudit.  # noqa: E501

        Application ID.   # noqa: E501

        :return: The app_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SharedRuntimeAudit.

        Application ID.   # noqa: E501

        :param app_id: The app_id of this SharedRuntimeAudit.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def attack_techniques(self):
        """Gets the attack_techniques of this SharedRuntimeAudit.  # noqa: E501

        MITRE attack techniques.   # noqa: E501

        :return: The attack_techniques of this SharedRuntimeAudit.  # noqa: E501
        :rtype: list[MitreTechnique]
        """
        return self._attack_techniques

    @attack_techniques.setter
    def attack_techniques(self, attack_techniques):
        """Sets the attack_techniques of this SharedRuntimeAudit.

        MITRE attack techniques.   # noqa: E501

        :param attack_techniques: The attack_techniques of this SharedRuntimeAudit.  # noqa: E501
        :type attack_techniques: list[MitreTechnique]
        """

        self._attack_techniques = attack_techniques

    @property
    def attack_type(self):
        """Gets the attack_type of this SharedRuntimeAudit.  # noqa: E501


        :return: The attack_type of this SharedRuntimeAudit.  # noqa: E501
        :rtype: SharedRuntimeAttackType
        """
        return self._attack_type

    @attack_type.setter
    def attack_type(self, attack_type):
        """Sets the attack_type of this SharedRuntimeAudit.


        :param attack_type: The attack_type of this SharedRuntimeAudit.  # noqa: E501
        :type attack_type: SharedRuntimeAttackType
        """

        self._attack_type = attack_type

    @property
    def cluster(self):
        """Gets the cluster of this SharedRuntimeAudit.  # noqa: E501

        Cluster name.   # noqa: E501

        :return: The cluster of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedRuntimeAudit.

        Cluster name.   # noqa: E501

        :param cluster: The cluster of this SharedRuntimeAudit.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedRuntimeAudit.  # noqa: E501

        Collections to which this audit applies.   # noqa: E501

        :return: The collections of this SharedRuntimeAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedRuntimeAudit.

        Collections to which this audit applies.   # noqa: E501

        :param collections: The collections of this SharedRuntimeAudit.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def container(self):
        """Gets the container of this SharedRuntimeAudit.  # noqa: E501

        Indicates if this is a container audit (true) or host audit (false).   # noqa: E501

        :return: The container of this SharedRuntimeAudit.  # noqa: E501
        :rtype: bool
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this SharedRuntimeAudit.

        Indicates if this is a container audit (true) or host audit (false).   # noqa: E501

        :param container: The container of this SharedRuntimeAudit.  # noqa: E501
        :type container: bool
        """

        self._container = container

    @property
    def container_id(self):
        """Gets the container_id of this SharedRuntimeAudit.  # noqa: E501

        ID of the container that violates the rule.   # noqa: E501

        :return: The container_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this SharedRuntimeAudit.

        ID of the container that violates the rule.   # noqa: E501

        :param container_id: The container_id of this SharedRuntimeAudit.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_name(self):
        """Gets the container_name of this SharedRuntimeAudit.  # noqa: E501

        Container name.   # noqa: E501

        :return: The container_name of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this SharedRuntimeAudit.

        Container name.   # noqa: E501

        :param container_name: The container_name of this SharedRuntimeAudit.  # noqa: E501
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def count(self):
        """Gets the count of this SharedRuntimeAudit.  # noqa: E501

        Attack type audits count.   # noqa: E501

        :return: The count of this SharedRuntimeAudit.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SharedRuntimeAudit.

        Attack type audits count.   # noqa: E501

        :param count: The count of this SharedRuntimeAudit.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def country(self):
        """Gets the country of this SharedRuntimeAudit.  # noqa: E501

        Outbound country for outgoing network audits.   # noqa: E501

        :return: The country of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SharedRuntimeAudit.

        Outbound country for outgoing network audits.   # noqa: E501

        :param country: The country of this SharedRuntimeAudit.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def effect(self):
        """Gets the effect of this SharedRuntimeAudit.  # noqa: E501


        :return: The effect of this SharedRuntimeAudit.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this SharedRuntimeAudit.


        :param effect: The effect of this SharedRuntimeAudit.  # noqa: E501
        :type effect: RuntimeRuleEffect
        """

        self._effect = effect

    @property
    def err(self):
        """Gets the err of this SharedRuntimeAudit.  # noqa: E501

        Unknown error in the audit process.   # noqa: E501

        :return: The err of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this SharedRuntimeAudit.

        Unknown error in the audit process.   # noqa: E501

        :param err: The err of this SharedRuntimeAudit.  # noqa: E501
        :type err: str
        """

        self._err = err

    @property
    def fqdn(self):
        """Gets the fqdn of this SharedRuntimeAudit.  # noqa: E501

        Current full domain name used in audit alerts.   # noqa: E501

        :return: The fqdn of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this SharedRuntimeAudit.

        Current full domain name used in audit alerts.   # noqa: E501

        :param fqdn: The fqdn of this SharedRuntimeAudit.  # noqa: E501
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def function(self):
        """Gets the function of this SharedRuntimeAudit.  # noqa: E501

        Name of the serverless function that caused the audit.   # noqa: E501

        :return: The function of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this SharedRuntimeAudit.

        Name of the serverless function that caused the audit.   # noqa: E501

        :param function: The function of this SharedRuntimeAudit.  # noqa: E501
        :type function: str
        """

        self._function = function

    @property
    def function_id(self):
        """Gets the function_id of this SharedRuntimeAudit.  # noqa: E501

        ID of the function invoked.   # noqa: E501

        :return: The function_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this SharedRuntimeAudit.

        ID of the function invoked.   # noqa: E501

        :param function_id: The function_id of this SharedRuntimeAudit.  # noqa: E501
        :type function_id: str
        """

        self._function_id = function_id

    @property
    def hostname(self):
        """Gets the hostname of this SharedRuntimeAudit.  # noqa: E501

        Current hostname.   # noqa: E501

        :return: The hostname of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedRuntimeAudit.

        Current hostname.   # noqa: E501

        :param hostname: The hostname of this SharedRuntimeAudit.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image_id(self):
        """Gets the image_id of this SharedRuntimeAudit.  # noqa: E501

        Container image ID.   # noqa: E501

        :return: The image_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this SharedRuntimeAudit.

        Container image ID.   # noqa: E501

        :param image_id: The image_id of this SharedRuntimeAudit.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this SharedRuntimeAudit.  # noqa: E501

        Container image name.   # noqa: E501

        :return: The image_name of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this SharedRuntimeAudit.

        Container image name.   # noqa: E501

        :param image_name: The image_name of this SharedRuntimeAudit.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def interactive(self):
        """Gets the interactive of this SharedRuntimeAudit.  # noqa: E501

        Indicates if the audit was triggered from a process that was spawned in interactive mode (e.g., docker exec ...) (true) or not (false).   # noqa: E501

        :return: The interactive of this SharedRuntimeAudit.  # noqa: E501
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this SharedRuntimeAudit.

        Indicates if the audit was triggered from a process that was spawned in interactive mode (e.g., docker exec ...) (true) or not (false).   # noqa: E501

        :param interactive: The interactive of this SharedRuntimeAudit.  # noqa: E501
        :type interactive: bool
        """

        self._interactive = interactive

    @property
    def label(self):
        """Gets the label of this SharedRuntimeAudit.  # noqa: E501

        Container deployment label.   # noqa: E501

        :return: The label of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SharedRuntimeAudit.

        Container deployment label.   # noqa: E501

        :param label: The label of this SharedRuntimeAudit.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def labels(self):
        """Gets the labels of this SharedRuntimeAudit.  # noqa: E501

        Custom labels which augment the audit data.   # noqa: E501

        :return: The labels of this SharedRuntimeAudit.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SharedRuntimeAudit.

        Custom labels which augment the audit data.   # noqa: E501

        :param labels: The labels of this SharedRuntimeAudit.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def msg(self):
        """Gets the msg of this SharedRuntimeAudit.  # noqa: E501

        Blocking message text.   # noqa: E501

        :return: The msg of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this SharedRuntimeAudit.

        Blocking message text.   # noqa: E501

        :param msg: The msg of this SharedRuntimeAudit.  # noqa: E501
        :type msg: str
        """

        self._msg = msg

    @property
    def namespace(self):
        """Gets the namespace of this SharedRuntimeAudit.  # noqa: E501

        K8s deployment namespace.   # noqa: E501

        :return: The namespace of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SharedRuntimeAudit.

        K8s deployment namespace.   # noqa: E501

        :param namespace: The namespace of this SharedRuntimeAudit.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def os(self):
        """Gets the os of this SharedRuntimeAudit.  # noqa: E501

        Operating system distribution.   # noqa: E501

        :return: The os of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SharedRuntimeAudit.

        Operating system distribution.   # noqa: E501

        :param os: The os of this SharedRuntimeAudit.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def pid(self):
        """Gets the pid of this SharedRuntimeAudit.  # noqa: E501

        ID of the process that caused the audit event.   # noqa: E501

        :return: The pid of this SharedRuntimeAudit.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this SharedRuntimeAudit.

        ID of the process that caused the audit event.   # noqa: E501

        :param pid: The pid of this SharedRuntimeAudit.  # noqa: E501
        :type pid: int
        """

        self._pid = pid

    @property
    def process_path(self):
        """Gets the process_path of this SharedRuntimeAudit.  # noqa: E501

        Path of the process that caused the audit event.   # noqa: E501

        :return: The process_path of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._process_path

    @process_path.setter
    def process_path(self, process_path):
        """Sets the process_path of this SharedRuntimeAudit.

        Path of the process that caused the audit event.   # noqa: E501

        :param process_path: The process_path of this SharedRuntimeAudit.  # noqa: E501
        :type process_path: str
        """

        self._process_path = process_path

    @property
    def profile_id(self):
        """Gets the profile_id of this SharedRuntimeAudit.  # noqa: E501

        Profile of the audit.   # noqa: E501

        :return: The profile_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this SharedRuntimeAudit.

        Profile of the audit.   # noqa: E501

        :param profile_id: The profile_id of this SharedRuntimeAudit.  # noqa: E501
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def raw_event(self):
        """Gets the raw_event of this SharedRuntimeAudit.  # noqa: E501

        Unparsed function handler event input.   # noqa: E501

        :return: The raw_event of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._raw_event

    @raw_event.setter
    def raw_event(self, raw_event):
        """Sets the raw_event of this SharedRuntimeAudit.

        Unparsed function handler event input.   # noqa: E501

        :param raw_event: The raw_event of this SharedRuntimeAudit.  # noqa: E501
        :type raw_event: str
        """

        self._raw_event = raw_event

    @property
    def region(self):
        """Gets the region of this SharedRuntimeAudit.  # noqa: E501

        Name of the region in which the serverless function is located.   # noqa: E501

        :return: The region of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SharedRuntimeAudit.

        Name of the region in which the serverless function is located.   # noqa: E501

        :param region: The region of this SharedRuntimeAudit.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def request_id(self):
        """Gets the request_id of this SharedRuntimeAudit.  # noqa: E501

        ID of the lambda function invocation request.   # noqa: E501

        :return: The request_id of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SharedRuntimeAudit.

        ID of the lambda function invocation request.   # noqa: E501

        :param request_id: The request_id of this SharedRuntimeAudit.  # noqa: E501
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def rule_name(self):
        """Gets the rule_name of this SharedRuntimeAudit.  # noqa: E501

        Name of the rule that was applied, if blocked.   # noqa: E501

        :return: The rule_name of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SharedRuntimeAudit.

        Name of the rule that was applied, if blocked.   # noqa: E501

        :param rule_name: The rule_name of this SharedRuntimeAudit.  # noqa: E501
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def runtime(self):
        """Gets the runtime of this SharedRuntimeAudit.  # noqa: E501


        :return: The runtime of this SharedRuntimeAudit.  # noqa: E501
        :rtype: SharedLambdaRuntimeType
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this SharedRuntimeAudit.


        :param runtime: The runtime of this SharedRuntimeAudit.  # noqa: E501
        :type runtime: SharedLambdaRuntimeType
        """

        self._runtime = runtime

    @property
    def severity(self):
        """Gets the severity of this SharedRuntimeAudit.  # noqa: E501


        :return: The severity of this SharedRuntimeAudit.  # noqa: E501
        :rtype: SharedRuntimeSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this SharedRuntimeAudit.


        :param severity: The severity of this SharedRuntimeAudit.  # noqa: E501
        :type severity: SharedRuntimeSeverity
        """

        self._severity = severity

    @property
    def time(self):
        """Gets the time of this SharedRuntimeAudit.  # noqa: E501

        Time of the audit event (in UTC time).   # noqa: E501

        :return: The time of this SharedRuntimeAudit.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedRuntimeAudit.

        Time of the audit event (in UTC time).   # noqa: E501

        :param time: The time of this SharedRuntimeAudit.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this SharedRuntimeAudit.  # noqa: E501


        :return: The type of this SharedRuntimeAudit.  # noqa: E501
        :rtype: SharedRuntimeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedRuntimeAudit.


        :param type: The type of this SharedRuntimeAudit.  # noqa: E501
        :type type: SharedRuntimeType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this SharedRuntimeAudit.  # noqa: E501

        Service user.   # noqa: E501

        :return: The user of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SharedRuntimeAudit.

        Service user.   # noqa: E501

        :param user: The user of this SharedRuntimeAudit.  # noqa: E501
        :type user: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this SharedRuntimeAudit.  # noqa: E501

        Defender version.   # noqa: E501

        :return: The version of this SharedRuntimeAudit.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedRuntimeAudit.

        Defender version.   # noqa: E501

        :param version: The version of this SharedRuntimeAudit.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedRuntimeAudit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedRuntimeAudit):
            return True

        return self.to_dict() != other.to_dict()
