# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ApiAlertProfileWebhookSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca_cert': 'str',
        'credential_id': 'str',
        'enabled': 'bool',
        'json': 'str',
        'url': 'str'
    }

    attribute_map = {
        'ca_cert': 'caCert',
        'credential_id': 'credentialId',
        'enabled': 'enabled',
        'json': 'json',
        'url': 'url'
    }

    def __init__(self, ca_cert=None, credential_id=None, enabled=None, json=None, url=None, local_vars_configuration=None):  # noqa: E501
        """ApiAlertProfileWebhookSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ca_cert = None
        self._credential_id = None
        self._enabled = None
        self._json = None
        self._url = None
        self.discriminator = None

        if ca_cert is not None:
            self.ca_cert = ca_cert
        if credential_id is not None:
            self.credential_id = credential_id
        if enabled is not None:
            self.enabled = enabled
        if json is not None:
            self.json = json
        if url is not None:
            self.url = url

    @property
    def ca_cert(self):
        """Gets the ca_cert of this ApiAlertProfileWebhookSettings.  # noqa: E501

        CACert is the certificate used to verify the server.   # noqa: E501

        :return: The ca_cert of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this ApiAlertProfileWebhookSettings.

        CACert is the certificate used to verify the server.   # noqa: E501

        :param ca_cert: The ca_cert of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :type ca_cert: str
        """

        self._ca_cert = ca_cert

    @property
    def credential_id(self):
        """Gets the credential_id of this ApiAlertProfileWebhookSettings.  # noqa: E501

        CredentialID is the id of the basic authentication credential.   # noqa: E501

        :return: The credential_id of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this ApiAlertProfileWebhookSettings.

        CredentialID is the id of the basic authentication credential.   # noqa: E501

        :param credential_id: The credential_id of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def enabled(self):
        """Gets the enabled of this ApiAlertProfileWebhookSettings.  # noqa: E501

        Enabled is Webhook provider enabled/disabled indicator.   # noqa: E501

        :return: The enabled of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiAlertProfileWebhookSettings.

        Enabled is Webhook provider enabled/disabled indicator.   # noqa: E501

        :param enabled: The enabled of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def json(self):
        """Gets the json of this ApiAlertProfileWebhookSettings.  # noqa: E501

        Json is the custom json we send to the url.   # noqa: E501

        :return: The json of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this ApiAlertProfileWebhookSettings.

        Json is the custom json we send to the url.   # noqa: E501

        :param json: The json of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :type json: str
        """

        self._json = json

    @property
    def url(self):
        """Gets the url of this ApiAlertProfileWebhookSettings.  # noqa: E501

        URL is the Webhook address.   # noqa: E501

        :return: The url of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ApiAlertProfileWebhookSettings.

        URL is the Webhook address.   # noqa: E501

        :param url: The url of this ApiAlertProfileWebhookSettings.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAlertProfileWebhookSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiAlertProfileWebhookSettings):
            return True

        return self.to_dict() != other.to_dict()
