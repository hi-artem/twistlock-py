# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RuntimeHostDNSRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow': 'list[str]',
        'deny': 'list[str]',
        'deny_list_effect': 'RuntimeRuleEffect',
        'intelligence_feed': 'RuntimeRuleEffect'
    }

    attribute_map = {
        'allow': 'allow',
        'deny': 'deny',
        'deny_list_effect': 'denyListEffect',
        'intelligence_feed': 'intelligenceFeed'
    }

    def __init__(self, allow=None, deny=None, deny_list_effect=None, intelligence_feed=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeHostDNSRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._allow = None
        self._deny = None
        self._deny_list_effect = None
        self._intelligence_feed = None
        self.discriminator = None

        if allow is not None:
            self.allow = allow
        if deny is not None:
            self.deny = deny
        if deny_list_effect is not None:
            self.deny_list_effect = deny_list_effect
        if intelligence_feed is not None:
            self.intelligence_feed = intelligence_feed

    @property
    def allow(self):
        """Gets the allow of this RuntimeHostDNSRule.  # noqa: E501

        Allow is a list of user-defined domains to skip checks for.   # noqa: E501

        :return: The allow of this RuntimeHostDNSRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """Sets the allow of this RuntimeHostDNSRule.

        Allow is a list of user-defined domains to skip checks for.   # noqa: E501

        :param allow: The allow of this RuntimeHostDNSRule.  # noqa: E501
        :type allow: list[str]
        """

        self._allow = allow

    @property
    def deny(self):
        """Gets the deny of this RuntimeHostDNSRule.  # noqa: E501

        Deny is a list of user-defined domains to deny.   # noqa: E501

        :return: The deny of this RuntimeHostDNSRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._deny

    @deny.setter
    def deny(self, deny):
        """Sets the deny of this RuntimeHostDNSRule.

        Deny is a list of user-defined domains to deny.   # noqa: E501

        :param deny: The deny of this RuntimeHostDNSRule.  # noqa: E501
        :type deny: list[str]
        """

        self._deny = deny

    @property
    def deny_list_effect(self):
        """Gets the deny_list_effect of this RuntimeHostDNSRule.  # noqa: E501


        :return: The deny_list_effect of this RuntimeHostDNSRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._deny_list_effect

    @deny_list_effect.setter
    def deny_list_effect(self, deny_list_effect):
        """Sets the deny_list_effect of this RuntimeHostDNSRule.


        :param deny_list_effect: The deny_list_effect of this RuntimeHostDNSRule.  # noqa: E501
        :type deny_list_effect: RuntimeRuleEffect
        """

        self._deny_list_effect = deny_list_effect

    @property
    def intelligence_feed(self):
        """Gets the intelligence_feed of this RuntimeHostDNSRule.  # noqa: E501


        :return: The intelligence_feed of this RuntimeHostDNSRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._intelligence_feed

    @intelligence_feed.setter
    def intelligence_feed(self, intelligence_feed):
        """Sets the intelligence_feed of this RuntimeHostDNSRule.


        :param intelligence_feed: The intelligence_feed of this RuntimeHostDNSRule.  # noqa: E501
        :type intelligence_feed: RuntimeRuleEffect
        """

        self._intelligence_feed = intelligence_feed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeHostDNSRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeHostDNSRule):
            return True

        return self.to_dict() != other.to_dict()
