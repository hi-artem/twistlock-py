# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedFileIntegrityEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'cluster': 'str',
        'collections': 'list[str]',
        'description': 'str',
        'event_type': 'SharedFileIntegrityEventType',
        'file_type': 'int',
        'fqdn': 'str',
        'hostname': 'str',
        'metadata': 'SharedFileMetadata',
        'path': 'str',
        'process_name': 'str',
        'rule_name': 'str',
        'time': 'datetime',
        'user': 'str'
    }

    attribute_map = {
        'account_id': 'accountID',
        'cluster': 'cluster',
        'collections': 'collections',
        'description': 'description',
        'event_type': 'eventType',
        'file_type': 'fileType',
        'fqdn': 'fqdn',
        'hostname': 'hostname',
        'metadata': 'metadata',
        'path': 'path',
        'process_name': 'processName',
        'rule_name': 'ruleName',
        'time': 'time',
        'user': 'user'
    }

    def __init__(self, account_id=None, cluster=None, collections=None, description=None, event_type=None, file_type=None, fqdn=None, hostname=None, metadata=None, path=None, process_name=None, rule_name=None, time=None, user=None, local_vars_configuration=None):  # noqa: E501
        """SharedFileIntegrityEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._cluster = None
        self._collections = None
        self._description = None
        self._event_type = None
        self._file_type = None
        self._fqdn = None
        self._hostname = None
        self._metadata = None
        self._path = None
        self._process_name = None
        self._rule_name = None
        self._time = None
        self._user = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if description is not None:
            self.description = description
        if event_type is not None:
            self.event_type = event_type
        if file_type is not None:
            self.file_type = file_type
        if fqdn is not None:
            self.fqdn = fqdn
        if hostname is not None:
            self.hostname = hostname
        if metadata is not None:
            self.metadata = metadata
        if path is not None:
            self.path = path
        if process_name is not None:
            self.process_name = process_name
        if rule_name is not None:
            self.rule_name = rule_name
        if time is not None:
            self.time = time
        if user is not None:
            self.user = user

    @property
    def account_id(self):
        """Gets the account_id of this SharedFileIntegrityEvent.  # noqa: E501

        AccountID is the cloud account ID.   # noqa: E501

        :return: The account_id of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedFileIntegrityEvent.

        AccountID is the cloud account ID.   # noqa: E501

        :param account_id: The account_id of this SharedFileIntegrityEvent.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def cluster(self):
        """Gets the cluster of this SharedFileIntegrityEvent.  # noqa: E501

        Cluster is the cluster on which the event was found.   # noqa: E501

        :return: The cluster of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedFileIntegrityEvent.

        Cluster is the cluster on which the event was found.   # noqa: E501

        :param cluster: The cluster of this SharedFileIntegrityEvent.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedFileIntegrityEvent.  # noqa: E501

        Collections are collections to which this event applies.   # noqa: E501

        :return: The collections of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedFileIntegrityEvent.

        Collections are collections to which this event applies.   # noqa: E501

        :param collections: The collections of this SharedFileIntegrityEvent.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def description(self):
        """Gets the description of this SharedFileIntegrityEvent.  # noqa: E501

        Description is a human readable description of the action performed on the path.   # noqa: E501

        :return: The description of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SharedFileIntegrityEvent.

        Description is a human readable description of the action performed on the path.   # noqa: E501

        :param description: The description of this SharedFileIntegrityEvent.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def event_type(self):
        """Gets the event_type of this SharedFileIntegrityEvent.  # noqa: E501


        :return: The event_type of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: SharedFileIntegrityEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this SharedFileIntegrityEvent.


        :param event_type: The event_type of this SharedFileIntegrityEvent.  # noqa: E501
        :type event_type: SharedFileIntegrityEventType
        """

        self._event_type = event_type

    @property
    def file_type(self):
        """Gets the file_type of this SharedFileIntegrityEvent.  # noqa: E501

        FSFileType represents the file type  # noqa: E501

        :return: The file_type of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: int
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this SharedFileIntegrityEvent.

        FSFileType represents the file type  # noqa: E501

        :param file_type: The file_type of this SharedFileIntegrityEvent.  # noqa: E501
        :type file_type: int
        """

        self._file_type = file_type

    @property
    def fqdn(self):
        """Gets the fqdn of this SharedFileIntegrityEvent.  # noqa: E501

        FQDN is the current fully qualified domain name used in audit alerts.   # noqa: E501

        :return: The fqdn of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this SharedFileIntegrityEvent.

        FQDN is the current fully qualified domain name used in audit alerts.   # noqa: E501

        :param fqdn: The fqdn of this SharedFileIntegrityEvent.  # noqa: E501
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def hostname(self):
        """Gets the hostname of this SharedFileIntegrityEvent.  # noqa: E501

        Hostname is the hostname on which the event was found.   # noqa: E501

        :return: The hostname of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedFileIntegrityEvent.

        Hostname is the hostname on which the event was found.   # noqa: E501

        :param hostname: The hostname of this SharedFileIntegrityEvent.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def metadata(self):
        """Gets the metadata of this SharedFileIntegrityEvent.  # noqa: E501


        :return: The metadata of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: SharedFileMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SharedFileIntegrityEvent.


        :param metadata: The metadata of this SharedFileIntegrityEvent.  # noqa: E501
        :type metadata: SharedFileMetadata
        """

        self._metadata = metadata

    @property
    def path(self):
        """Gets the path of this SharedFileIntegrityEvent.  # noqa: E501

        Path is the absolute path of the event.   # noqa: E501

        :return: The path of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SharedFileIntegrityEvent.

        Path is the absolute path of the event.   # noqa: E501

        :param path: The path of this SharedFileIntegrityEvent.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def process_name(self):
        """Gets the process_name of this SharedFileIntegrityEvent.  # noqa: E501

        ProcessName is the name of the process initiated the event.   # noqa: E501

        :return: The process_name of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """Sets the process_name of this SharedFileIntegrityEvent.

        ProcessName is the name of the process initiated the event.   # noqa: E501

        :param process_name: The process_name of this SharedFileIntegrityEvent.  # noqa: E501
        :type process_name: str
        """

        self._process_name = process_name

    @property
    def rule_name(self):
        """Gets the rule_name of this SharedFileIntegrityEvent.  # noqa: E501

        RuleName is the name of the applied rule for auditing file integrity rules.   # noqa: E501

        :return: The rule_name of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SharedFileIntegrityEvent.

        RuleName is the name of the applied rule for auditing file integrity rules.   # noqa: E501

        :param rule_name: The rule_name of this SharedFileIntegrityEvent.  # noqa: E501
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def time(self):
        """Gets the time of this SharedFileIntegrityEvent.  # noqa: E501

        Time is the time of the event.   # noqa: E501

        :return: The time of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedFileIntegrityEvent.

        Time is the time of the event.   # noqa: E501

        :param time: The time of this SharedFileIntegrityEvent.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def user(self):
        """Gets the user of this SharedFileIntegrityEvent.  # noqa: E501

        User is the user initiated the event.   # noqa: E501

        :return: The user of this SharedFileIntegrityEvent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SharedFileIntegrityEvent.

        User is the user initiated the event.   # noqa: E501

        :param user: The user of this SharedFileIntegrityEvent.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedFileIntegrityEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedFileIntegrityEvent):
            return True

        return self.to_dict() != other.to_dict()
