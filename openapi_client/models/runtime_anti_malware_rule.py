# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RuntimeAntiMalwareRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_processes': 'list[str]',
        'crypto_miner': 'RuntimeRuleEffect',
        'custom_feed': 'RuntimeRuleEffect',
        'denied_processes': 'RuntimeDenyListRule',
        'detect_compiler_generated_binary': 'bool',
        'encrypted_binaries': 'RuntimeRuleEffect',
        'execution_flow_hijack': 'RuntimeRuleEffect',
        'intelligence_feed': 'RuntimeRuleEffect',
        'reverse_shell': 'RuntimeRuleEffect',
        'service_unknown_origin_binary': 'RuntimeRuleEffect',
        'skip_ssh_tracking': 'bool',
        'suspicious_elf_headers': 'RuntimeRuleEffect',
        'temp_fs_proc': 'RuntimeRuleEffect',
        'user_unknown_origin_binary': 'RuntimeRuleEffect',
        'web_shell': 'RuntimeRuleEffect',
        'wild_fire_analysis': 'RuntimeRuleEffect'
    }

    attribute_map = {
        'allowed_processes': 'allowedProcesses',
        'crypto_miner': 'cryptoMiner',
        'custom_feed': 'customFeed',
        'denied_processes': 'deniedProcesses',
        'detect_compiler_generated_binary': 'detectCompilerGeneratedBinary',
        'encrypted_binaries': 'encryptedBinaries',
        'execution_flow_hijack': 'executionFlowHijack',
        'intelligence_feed': 'intelligenceFeed',
        'reverse_shell': 'reverseShell',
        'service_unknown_origin_binary': 'serviceUnknownOriginBinary',
        'skip_ssh_tracking': 'skipSSHTracking',
        'suspicious_elf_headers': 'suspiciousELFHeaders',
        'temp_fs_proc': 'tempFSProc',
        'user_unknown_origin_binary': 'userUnknownOriginBinary',
        'web_shell': 'webShell',
        'wild_fire_analysis': 'wildFireAnalysis'
    }

    def __init__(self, allowed_processes=None, crypto_miner=None, custom_feed=None, denied_processes=None, detect_compiler_generated_binary=None, encrypted_binaries=None, execution_flow_hijack=None, intelligence_feed=None, reverse_shell=None, service_unknown_origin_binary=None, skip_ssh_tracking=None, suspicious_elf_headers=None, temp_fs_proc=None, user_unknown_origin_binary=None, web_shell=None, wild_fire_analysis=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeAntiMalwareRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_processes = None
        self._crypto_miner = None
        self._custom_feed = None
        self._denied_processes = None
        self._detect_compiler_generated_binary = None
        self._encrypted_binaries = None
        self._execution_flow_hijack = None
        self._intelligence_feed = None
        self._reverse_shell = None
        self._service_unknown_origin_binary = None
        self._skip_ssh_tracking = None
        self._suspicious_elf_headers = None
        self._temp_fs_proc = None
        self._user_unknown_origin_binary = None
        self._web_shell = None
        self._wild_fire_analysis = None
        self.discriminator = None

        if allowed_processes is not None:
            self.allowed_processes = allowed_processes
        if crypto_miner is not None:
            self.crypto_miner = crypto_miner
        if custom_feed is not None:
            self.custom_feed = custom_feed
        if denied_processes is not None:
            self.denied_processes = denied_processes
        if detect_compiler_generated_binary is not None:
            self.detect_compiler_generated_binary = detect_compiler_generated_binary
        if encrypted_binaries is not None:
            self.encrypted_binaries = encrypted_binaries
        if execution_flow_hijack is not None:
            self.execution_flow_hijack = execution_flow_hijack
        if intelligence_feed is not None:
            self.intelligence_feed = intelligence_feed
        if reverse_shell is not None:
            self.reverse_shell = reverse_shell
        if service_unknown_origin_binary is not None:
            self.service_unknown_origin_binary = service_unknown_origin_binary
        if skip_ssh_tracking is not None:
            self.skip_ssh_tracking = skip_ssh_tracking
        if suspicious_elf_headers is not None:
            self.suspicious_elf_headers = suspicious_elf_headers
        if temp_fs_proc is not None:
            self.temp_fs_proc = temp_fs_proc
        if user_unknown_origin_binary is not None:
            self.user_unknown_origin_binary = user_unknown_origin_binary
        if web_shell is not None:
            self.web_shell = web_shell
        if wild_fire_analysis is not None:
            self.wild_fire_analysis = wild_fire_analysis

    @property
    def allowed_processes(self):
        """Gets the allowed_processes of this RuntimeAntiMalwareRule.  # noqa: E501

        AllowedProcesses contains paths of files and processes for which we skip anti-malware checks.   # noqa: E501

        :return: The allowed_processes of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_processes

    @allowed_processes.setter
    def allowed_processes(self, allowed_processes):
        """Sets the allowed_processes of this RuntimeAntiMalwareRule.

        AllowedProcesses contains paths of files and processes for which we skip anti-malware checks.   # noqa: E501

        :param allowed_processes: The allowed_processes of this RuntimeAntiMalwareRule.  # noqa: E501
        :type allowed_processes: list[str]
        """

        self._allowed_processes = allowed_processes

    @property
    def crypto_miner(self):
        """Gets the crypto_miner of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The crypto_miner of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._crypto_miner

    @crypto_miner.setter
    def crypto_miner(self, crypto_miner):
        """Sets the crypto_miner of this RuntimeAntiMalwareRule.


        :param crypto_miner: The crypto_miner of this RuntimeAntiMalwareRule.  # noqa: E501
        :type crypto_miner: RuntimeRuleEffect
        """

        self._crypto_miner = crypto_miner

    @property
    def custom_feed(self):
        """Gets the custom_feed of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The custom_feed of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._custom_feed

    @custom_feed.setter
    def custom_feed(self, custom_feed):
        """Sets the custom_feed of this RuntimeAntiMalwareRule.


        :param custom_feed: The custom_feed of this RuntimeAntiMalwareRule.  # noqa: E501
        :type custom_feed: RuntimeRuleEffect
        """

        self._custom_feed = custom_feed

    @property
    def denied_processes(self):
        """Gets the denied_processes of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The denied_processes of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeDenyListRule
        """
        return self._denied_processes

    @denied_processes.setter
    def denied_processes(self, denied_processes):
        """Sets the denied_processes of this RuntimeAntiMalwareRule.


        :param denied_processes: The denied_processes of this RuntimeAntiMalwareRule.  # noqa: E501
        :type denied_processes: RuntimeDenyListRule
        """

        self._denied_processes = denied_processes

    @property
    def detect_compiler_generated_binary(self):
        """Gets the detect_compiler_generated_binary of this RuntimeAntiMalwareRule.  # noqa: E501

        DetectCompilerGeneratedBinary represents what happens when a compiler service writes a binary.   # noqa: E501

        :return: The detect_compiler_generated_binary of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: bool
        """
        return self._detect_compiler_generated_binary

    @detect_compiler_generated_binary.setter
    def detect_compiler_generated_binary(self, detect_compiler_generated_binary):
        """Sets the detect_compiler_generated_binary of this RuntimeAntiMalwareRule.

        DetectCompilerGeneratedBinary represents what happens when a compiler service writes a binary.   # noqa: E501

        :param detect_compiler_generated_binary: The detect_compiler_generated_binary of this RuntimeAntiMalwareRule.  # noqa: E501
        :type detect_compiler_generated_binary: bool
        """

        self._detect_compiler_generated_binary = detect_compiler_generated_binary

    @property
    def encrypted_binaries(self):
        """Gets the encrypted_binaries of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The encrypted_binaries of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._encrypted_binaries

    @encrypted_binaries.setter
    def encrypted_binaries(self, encrypted_binaries):
        """Sets the encrypted_binaries of this RuntimeAntiMalwareRule.


        :param encrypted_binaries: The encrypted_binaries of this RuntimeAntiMalwareRule.  # noqa: E501
        :type encrypted_binaries: RuntimeRuleEffect
        """

        self._encrypted_binaries = encrypted_binaries

    @property
    def execution_flow_hijack(self):
        """Gets the execution_flow_hijack of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The execution_flow_hijack of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._execution_flow_hijack

    @execution_flow_hijack.setter
    def execution_flow_hijack(self, execution_flow_hijack):
        """Sets the execution_flow_hijack of this RuntimeAntiMalwareRule.


        :param execution_flow_hijack: The execution_flow_hijack of this RuntimeAntiMalwareRule.  # noqa: E501
        :type execution_flow_hijack: RuntimeRuleEffect
        """

        self._execution_flow_hijack = execution_flow_hijack

    @property
    def intelligence_feed(self):
        """Gets the intelligence_feed of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The intelligence_feed of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._intelligence_feed

    @intelligence_feed.setter
    def intelligence_feed(self, intelligence_feed):
        """Sets the intelligence_feed of this RuntimeAntiMalwareRule.


        :param intelligence_feed: The intelligence_feed of this RuntimeAntiMalwareRule.  # noqa: E501
        :type intelligence_feed: RuntimeRuleEffect
        """

        self._intelligence_feed = intelligence_feed

    @property
    def reverse_shell(self):
        """Gets the reverse_shell of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The reverse_shell of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._reverse_shell

    @reverse_shell.setter
    def reverse_shell(self, reverse_shell):
        """Sets the reverse_shell of this RuntimeAntiMalwareRule.


        :param reverse_shell: The reverse_shell of this RuntimeAntiMalwareRule.  # noqa: E501
        :type reverse_shell: RuntimeRuleEffect
        """

        self._reverse_shell = reverse_shell

    @property
    def service_unknown_origin_binary(self):
        """Gets the service_unknown_origin_binary of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The service_unknown_origin_binary of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._service_unknown_origin_binary

    @service_unknown_origin_binary.setter
    def service_unknown_origin_binary(self, service_unknown_origin_binary):
        """Sets the service_unknown_origin_binary of this RuntimeAntiMalwareRule.


        :param service_unknown_origin_binary: The service_unknown_origin_binary of this RuntimeAntiMalwareRule.  # noqa: E501
        :type service_unknown_origin_binary: RuntimeRuleEffect
        """

        self._service_unknown_origin_binary = service_unknown_origin_binary

    @property
    def skip_ssh_tracking(self):
        """Gets the skip_ssh_tracking of this RuntimeAntiMalwareRule.  # noqa: E501

        SkipSSHTracking indicates whether host SSH tracking should be skipped.   # noqa: E501

        :return: The skip_ssh_tracking of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: bool
        """
        return self._skip_ssh_tracking

    @skip_ssh_tracking.setter
    def skip_ssh_tracking(self, skip_ssh_tracking):
        """Sets the skip_ssh_tracking of this RuntimeAntiMalwareRule.

        SkipSSHTracking indicates whether host SSH tracking should be skipped.   # noqa: E501

        :param skip_ssh_tracking: The skip_ssh_tracking of this RuntimeAntiMalwareRule.  # noqa: E501
        :type skip_ssh_tracking: bool
        """

        self._skip_ssh_tracking = skip_ssh_tracking

    @property
    def suspicious_elf_headers(self):
        """Gets the suspicious_elf_headers of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The suspicious_elf_headers of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._suspicious_elf_headers

    @suspicious_elf_headers.setter
    def suspicious_elf_headers(self, suspicious_elf_headers):
        """Sets the suspicious_elf_headers of this RuntimeAntiMalwareRule.


        :param suspicious_elf_headers: The suspicious_elf_headers of this RuntimeAntiMalwareRule.  # noqa: E501
        :type suspicious_elf_headers: RuntimeRuleEffect
        """

        self._suspicious_elf_headers = suspicious_elf_headers

    @property
    def temp_fs_proc(self):
        """Gets the temp_fs_proc of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The temp_fs_proc of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._temp_fs_proc

    @temp_fs_proc.setter
    def temp_fs_proc(self, temp_fs_proc):
        """Sets the temp_fs_proc of this RuntimeAntiMalwareRule.


        :param temp_fs_proc: The temp_fs_proc of this RuntimeAntiMalwareRule.  # noqa: E501
        :type temp_fs_proc: RuntimeRuleEffect
        """

        self._temp_fs_proc = temp_fs_proc

    @property
    def user_unknown_origin_binary(self):
        """Gets the user_unknown_origin_binary of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The user_unknown_origin_binary of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._user_unknown_origin_binary

    @user_unknown_origin_binary.setter
    def user_unknown_origin_binary(self, user_unknown_origin_binary):
        """Sets the user_unknown_origin_binary of this RuntimeAntiMalwareRule.


        :param user_unknown_origin_binary: The user_unknown_origin_binary of this RuntimeAntiMalwareRule.  # noqa: E501
        :type user_unknown_origin_binary: RuntimeRuleEffect
        """

        self._user_unknown_origin_binary = user_unknown_origin_binary

    @property
    def web_shell(self):
        """Gets the web_shell of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The web_shell of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._web_shell

    @web_shell.setter
    def web_shell(self, web_shell):
        """Sets the web_shell of this RuntimeAntiMalwareRule.


        :param web_shell: The web_shell of this RuntimeAntiMalwareRule.  # noqa: E501
        :type web_shell: RuntimeRuleEffect
        """

        self._web_shell = web_shell

    @property
    def wild_fire_analysis(self):
        """Gets the wild_fire_analysis of this RuntimeAntiMalwareRule.  # noqa: E501


        :return: The wild_fire_analysis of this RuntimeAntiMalwareRule.  # noqa: E501
        :rtype: RuntimeRuleEffect
        """
        return self._wild_fire_analysis

    @wild_fire_analysis.setter
    def wild_fire_analysis(self, wild_fire_analysis):
        """Sets the wild_fire_analysis of this RuntimeAntiMalwareRule.


        :param wild_fire_analysis: The wild_fire_analysis of this RuntimeAntiMalwareRule.  # noqa: E501
        :type wild_fire_analysis: RuntimeRuleEffect
        """

        self._wild_fire_analysis = wild_fire_analysis

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeAntiMalwareRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeAntiMalwareRule):
            return True

        return self.to_dict() != other.to_dict()
