# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesDiscoveredVM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'architecture': 'str',
        'arn': 'str',
        'collections': 'list[str]',
        'created_at': 'datetime',
        'fqdn': 'str',
        'has_defender': 'bool',
        'hostname': 'str',
        'image_id': 'str',
        'image_nameomitempty_name': 'str',
        'name': 'str',
        'os': 'str',
        'provider': 'CommonCloudProvider',
        'region': 'str',
        'tags': 'list[CommonExternalLabel]',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'architecture': 'architecture',
        'arn': 'arn',
        'collections': 'collections',
        'created_at': 'createdAt',
        'fqdn': 'fqdn',
        'has_defender': 'hasDefender',
        'hostname': 'hostname',
        'image_id': 'imageID',
        'image_nameomitempty_name': 'imageName,omitemptyName',
        'name': 'name',
        'os': 'os',
        'provider': 'provider',
        'region': 'region',
        'tags': 'tags',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, account_id=None, architecture=None, arn=None, collections=None, created_at=None, fqdn=None, has_defender=None, hostname=None, image_id=None, image_nameomitempty_name=None, name=None, os=None, provider=None, region=None, tags=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """TypesDiscoveredVM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._architecture = None
        self._arn = None
        self._collections = None
        self._created_at = None
        self._fqdn = None
        self._has_defender = None
        self._hostname = None
        self._image_id = None
        self._image_nameomitempty_name = None
        self._name = None
        self._os = None
        self._provider = None
        self._region = None
        self._tags = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if architecture is not None:
            self.architecture = architecture
        if arn is not None:
            self.arn = arn
        if collections is not None:
            self.collections = collections
        if created_at is not None:
            self.created_at = created_at
        if fqdn is not None:
            self.fqdn = fqdn
        if has_defender is not None:
            self.has_defender = has_defender
        if hostname is not None:
            self.hostname = hostname
        if image_id is not None:
            self.image_id = image_id
        if image_nameomitempty_name is not None:
            self.image_nameomitempty_name = image_nameomitempty_name
        if name is not None:
            self.name = name
        if os is not None:
            self.os = os
        if provider is not None:
            self.provider = provider
        if region is not None:
            self.region = region
        if tags is not None:
            self.tags = tags
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this TypesDiscoveredVM.  # noqa: E501

        ID is the instance id. E.g. \"i-5cd23551\".   # noqa: E501

        :return: The id of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesDiscoveredVM.

        ID is the instance id. E.g. \"i-5cd23551\".   # noqa: E501

        :param id: The id of this TypesDiscoveredVM.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this TypesDiscoveredVM.  # noqa: E501

        AccountID is the cloud provider account ID.   # noqa: E501

        :return: The account_id of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TypesDiscoveredVM.

        AccountID is the cloud provider account ID.   # noqa: E501

        :param account_id: The account_id of this TypesDiscoveredVM.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def architecture(self):
        """Gets the architecture of this TypesDiscoveredVM.  # noqa: E501

        Architecture is the architecture of the image.   # noqa: E501

        :return: The architecture of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this TypesDiscoveredVM.

        Architecture is the architecture of the image.   # noqa: E501

        :param architecture: The architecture of this TypesDiscoveredVM.  # noqa: E501
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def arn(self):
        """Gets the arn of this TypesDiscoveredVM.  # noqa: E501

        The Amazon Resource Name (ARN) assigned to the instance.   # noqa: E501

        :return: The arn of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this TypesDiscoveredVM.

        The Amazon Resource Name (ARN) assigned to the instance.   # noqa: E501

        :param arn: The arn of this TypesDiscoveredVM.  # noqa: E501
        :type arn: str
        """

        self._arn = arn

    @property
    def collections(self):
        """Gets the collections of this TypesDiscoveredVM.  # noqa: E501

        Collections is a list of the matched collections.   # noqa: E501

        :return: The collections of this TypesDiscoveredVM.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this TypesDiscoveredVM.

        Collections is a list of the matched collections.   # noqa: E501

        :param collections: The collections of this TypesDiscoveredVM.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def created_at(self):
        """Gets the created_at of this TypesDiscoveredVM.  # noqa: E501

        CreatedAt is the time when the instance was launched.   # noqa: E501

        :return: The created_at of this TypesDiscoveredVM.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TypesDiscoveredVM.

        CreatedAt is the time when the instance was launched.   # noqa: E501

        :param created_at: The created_at of this TypesDiscoveredVM.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def fqdn(self):
        """Gets the fqdn of this TypesDiscoveredVM.  # noqa: E501

        FQDN is the host's fully qualified domain name . E.g. \"ip-192-0-2-0.us-east-2.compute.internal\".   # noqa: E501

        :return: The fqdn of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this TypesDiscoveredVM.

        FQDN is the host's fully qualified domain name . E.g. \"ip-192-0-2-0.us-east-2.compute.internal\".   # noqa: E501

        :param fqdn: The fqdn of this TypesDiscoveredVM.  # noqa: E501
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def has_defender(self):
        """Gets the has_defender of this TypesDiscoveredVM.  # noqa: E501

        HasDefender indicates that the instance has a defender installed on it.   # noqa: E501

        :return: The has_defender of this TypesDiscoveredVM.  # noqa: E501
        :rtype: bool
        """
        return self._has_defender

    @has_defender.setter
    def has_defender(self, has_defender):
        """Sets the has_defender of this TypesDiscoveredVM.

        HasDefender indicates that the instance has a defender installed on it.   # noqa: E501

        :param has_defender: The has_defender of this TypesDiscoveredVM.  # noqa: E501
        :type has_defender: bool
        """

        self._has_defender = has_defender

    @property
    def hostname(self):
        """Gets the hostname of this TypesDiscoveredVM.  # noqa: E501

        Hostname is the hostname. E.g. \"ip-192-0-2-0\" or \"custom\".   # noqa: E501

        :return: The hostname of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this TypesDiscoveredVM.

        Hostname is the hostname. E.g. \"ip-192-0-2-0\" or \"custom\".   # noqa: E501

        :param hostname: The hostname of this TypesDiscoveredVM.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image_id(self):
        """Gets the image_id of this TypesDiscoveredVM.  # noqa: E501

        ImageID is the the ID of the AMI used to launch the instance. E.g. \"ami-35501205\".   # noqa: E501

        :return: The image_id of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this TypesDiscoveredVM.

        ImageID is the the ID of the AMI used to launch the instance. E.g. \"ami-35501205\".   # noqa: E501

        :param image_id: The image_id of this TypesDiscoveredVM.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_nameomitempty_name(self):
        """Gets the image_nameomitempty_name of this TypesDiscoveredVM.  # noqa: E501

        ImageName is the the name of the AMI used to launch the instance.   # noqa: E501

        :return: The image_nameomitempty_name of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._image_nameomitempty_name

    @image_nameomitempty_name.setter
    def image_nameomitempty_name(self, image_nameomitempty_name):
        """Sets the image_nameomitempty_name of this TypesDiscoveredVM.

        ImageName is the the name of the AMI used to launch the instance.   # noqa: E501

        :param image_nameomitempty_name: The image_nameomitempty_name of this TypesDiscoveredVM.  # noqa: E501
        :type image_nameomitempty_name: str
        """

        self._image_nameomitempty_name = image_nameomitempty_name

    @property
    def name(self):
        """Gets the name of this TypesDiscoveredVM.  # noqa: E501

        Name is the instance name.   # noqa: E501

        :return: The name of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TypesDiscoveredVM.

        Name is the instance name.   # noqa: E501

        :param name: The name of this TypesDiscoveredVM.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def os(self):
        """Gets the os of this TypesDiscoveredVM.  # noqa: E501

        OS is the Operating System installed on the instance.   # noqa: E501

        :return: The os of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this TypesDiscoveredVM.

        OS is the Operating System installed on the instance.   # noqa: E501

        :param os: The os of this TypesDiscoveredVM.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def provider(self):
        """Gets the provider of this TypesDiscoveredVM.  # noqa: E501


        :return: The provider of this TypesDiscoveredVM.  # noqa: E501
        :rtype: CommonCloudProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this TypesDiscoveredVM.


        :param provider: The provider of this TypesDiscoveredVM.  # noqa: E501
        :type provider: CommonCloudProvider
        """

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this TypesDiscoveredVM.  # noqa: E501

        Region is the region the VM is located at.   # noqa: E501

        :return: The region of this TypesDiscoveredVM.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TypesDiscoveredVM.

        Region is the region the VM is located at.   # noqa: E501

        :param region: The region of this TypesDiscoveredVM.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def tags(self):
        """Gets the tags of this TypesDiscoveredVM.  # noqa: E501

        Tags are the tags of the VM instance.   # noqa: E501

        :return: The tags of this TypesDiscoveredVM.  # noqa: E501
        :rtype: list[CommonExternalLabel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TypesDiscoveredVM.

        Tags are the tags of the VM instance.   # noqa: E501

        :param tags: The tags of this TypesDiscoveredVM.  # noqa: E501
        :type tags: list[CommonExternalLabel]
        """

        self._tags = tags

    @property
    def timestamp(self):
        """Gets the timestamp of this TypesDiscoveredVM.  # noqa: E501

        Timestamp is the time in which the instance info was fetched.   # noqa: E501

        :return: The timestamp of this TypesDiscoveredVM.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TypesDiscoveredVM.

        Timestamp is the time in which the instance info was fetched.   # noqa: E501

        :param timestamp: The timestamp of this TypesDiscoveredVM.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesDiscoveredVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesDiscoveredVM):
            return True

        return self.to_dict() != other.to_dict()
