# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'access': 'TypesAccessStats',
        'app_embedded_app_firewall': 'dict(str, int)',
        'container': 'TypesRuntimeStats',
        'container_app_firewall': 'dict(str, int)',
        'container_network_firewall': 'TypesNetworkFirewallStats',
        'host': 'TypesRuntimeStats',
        'host_app_firewall': 'dict(str, int)',
        'host_compliance_count': 'int',
        'host_network_firewall': 'TypesNetworkFirewallStats',
        'incidents_count': 'int',
        'serverless': 'TypesRuntimeStats',
        'serverless_app_firewall': 'dict(str, int)',
        'time': 'int',
        'vulnerabilities': 'TypesVulnerabilitiesStats'
    }

    attribute_map = {
        'id': '_id',
        'access': 'access',
        'app_embedded_app_firewall': 'appEmbeddedAppFirewall',
        'container': 'container',
        'container_app_firewall': 'containerAppFirewall',
        'container_network_firewall': 'containerNetworkFirewall',
        'host': 'host',
        'host_app_firewall': 'hostAppFirewall',
        'host_compliance_count': 'hostComplianceCount',
        'host_network_firewall': 'hostNetworkFirewall',
        'incidents_count': 'incidentsCount',
        'serverless': 'serverless',
        'serverless_app_firewall': 'serverlessAppFirewall',
        'time': 'time',
        'vulnerabilities': 'vulnerabilities'
    }

    def __init__(self, id=None, access=None, app_embedded_app_firewall=None, container=None, container_app_firewall=None, container_network_firewall=None, host=None, host_app_firewall=None, host_compliance_count=None, host_network_firewall=None, incidents_count=None, serverless=None, serverless_app_firewall=None, time=None, vulnerabilities=None, local_vars_configuration=None):  # noqa: E501
        """TypesStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._access = None
        self._app_embedded_app_firewall = None
        self._container = None
        self._container_app_firewall = None
        self._container_network_firewall = None
        self._host = None
        self._host_app_firewall = None
        self._host_compliance_count = None
        self._host_network_firewall = None
        self._incidents_count = None
        self._serverless = None
        self._serverless_app_firewall = None
        self._time = None
        self._vulnerabilities = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if access is not None:
            self.access = access
        if app_embedded_app_firewall is not None:
            self.app_embedded_app_firewall = app_embedded_app_firewall
        if container is not None:
            self.container = container
        if container_app_firewall is not None:
            self.container_app_firewall = container_app_firewall
        if container_network_firewall is not None:
            self.container_network_firewall = container_network_firewall
        if host is not None:
            self.host = host
        if host_app_firewall is not None:
            self.host_app_firewall = host_app_firewall
        if host_compliance_count is not None:
            self.host_compliance_count = host_compliance_count
        if host_network_firewall is not None:
            self.host_network_firewall = host_network_firewall
        if incidents_count is not None:
            self.incidents_count = incidents_count
        if serverless is not None:
            self.serverless = serverless
        if serverless_app_firewall is not None:
            self.serverless_app_firewall = serverless_app_firewall
        if time is not None:
            self.time = time
        if vulnerabilities is not None:
            self.vulnerabilities = vulnerabilities

    @property
    def id(self):
        """Gets the id of this TypesStats.  # noqa: E501

        Id is the metric type.   # noqa: E501

        :return: The id of this TypesStats.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesStats.

        Id is the metric type.   # noqa: E501

        :param id: The id of this TypesStats.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def access(self):
        """Gets the access of this TypesStats.  # noqa: E501


        :return: The access of this TypesStats.  # noqa: E501
        :rtype: TypesAccessStats
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this TypesStats.


        :param access: The access of this TypesStats.  # noqa: E501
        :type access: TypesAccessStats
        """

        self._access = access

    @property
    def app_embedded_app_firewall(self):
        """Gets the app_embedded_app_firewall of this TypesStats.  # noqa: E501

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :return: The app_embedded_app_firewall of this TypesStats.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._app_embedded_app_firewall

    @app_embedded_app_firewall.setter
    def app_embedded_app_firewall(self, app_embedded_app_firewall):
        """Sets the app_embedded_app_firewall of this TypesStats.

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :param app_embedded_app_firewall: The app_embedded_app_firewall of this TypesStats.  # noqa: E501
        :type app_embedded_app_firewall: dict(str, int)
        """

        self._app_embedded_app_firewall = app_embedded_app_firewall

    @property
    def container(self):
        """Gets the container of this TypesStats.  # noqa: E501


        :return: The container of this TypesStats.  # noqa: E501
        :rtype: TypesRuntimeStats
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this TypesStats.


        :param container: The container of this TypesStats.  # noqa: E501
        :type container: TypesRuntimeStats
        """

        self._container = container

    @property
    def container_app_firewall(self):
        """Gets the container_app_firewall of this TypesStats.  # noqa: E501

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :return: The container_app_firewall of this TypesStats.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._container_app_firewall

    @container_app_firewall.setter
    def container_app_firewall(self, container_app_firewall):
        """Sets the container_app_firewall of this TypesStats.

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :param container_app_firewall: The container_app_firewall of this TypesStats.  # noqa: E501
        :type container_app_firewall: dict(str, int)
        """

        self._container_app_firewall = container_app_firewall

    @property
    def container_network_firewall(self):
        """Gets the container_network_firewall of this TypesStats.  # noqa: E501


        :return: The container_network_firewall of this TypesStats.  # noqa: E501
        :rtype: TypesNetworkFirewallStats
        """
        return self._container_network_firewall

    @container_network_firewall.setter
    def container_network_firewall(self, container_network_firewall):
        """Sets the container_network_firewall of this TypesStats.


        :param container_network_firewall: The container_network_firewall of this TypesStats.  # noqa: E501
        :type container_network_firewall: TypesNetworkFirewallStats
        """

        self._container_network_firewall = container_network_firewall

    @property
    def host(self):
        """Gets the host of this TypesStats.  # noqa: E501


        :return: The host of this TypesStats.  # noqa: E501
        :rtype: TypesRuntimeStats
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this TypesStats.


        :param host: The host of this TypesStats.  # noqa: E501
        :type host: TypesRuntimeStats
        """

        self._host = host

    @property
    def host_app_firewall(self):
        """Gets the host_app_firewall of this TypesStats.  # noqa: E501

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :return: The host_app_firewall of this TypesStats.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._host_app_firewall

    @host_app_firewall.setter
    def host_app_firewall(self, host_app_firewall):
        """Sets the host_app_firewall of this TypesStats.

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :param host_app_firewall: The host_app_firewall of this TypesStats.  # noqa: E501
        :type host_app_firewall: dict(str, int)
        """

        self._host_app_firewall = host_app_firewall

    @property
    def host_compliance_count(self):
        """Gets the host_compliance_count of this TypesStats.  # noqa: E501

        HostComplianceCount is the host compliance count.   # noqa: E501

        :return: The host_compliance_count of this TypesStats.  # noqa: E501
        :rtype: int
        """
        return self._host_compliance_count

    @host_compliance_count.setter
    def host_compliance_count(self, host_compliance_count):
        """Sets the host_compliance_count of this TypesStats.

        HostComplianceCount is the host compliance count.   # noqa: E501

        :param host_compliance_count: The host_compliance_count of this TypesStats.  # noqa: E501
        :type host_compliance_count: int
        """

        self._host_compliance_count = host_compliance_count

    @property
    def host_network_firewall(self):
        """Gets the host_network_firewall of this TypesStats.  # noqa: E501


        :return: The host_network_firewall of this TypesStats.  # noqa: E501
        :rtype: TypesNetworkFirewallStats
        """
        return self._host_network_firewall

    @host_network_firewall.setter
    def host_network_firewall(self, host_network_firewall):
        """Sets the host_network_firewall of this TypesStats.


        :param host_network_firewall: The host_network_firewall of this TypesStats.  # noqa: E501
        :type host_network_firewall: TypesNetworkFirewallStats
        """

        self._host_network_firewall = host_network_firewall

    @property
    def incidents_count(self):
        """Gets the incidents_count of this TypesStats.  # noqa: E501

        IncidentsCount is the incidents count.   # noqa: E501

        :return: The incidents_count of this TypesStats.  # noqa: E501
        :rtype: int
        """
        return self._incidents_count

    @incidents_count.setter
    def incidents_count(self, incidents_count):
        """Sets the incidents_count of this TypesStats.

        IncidentsCount is the incidents count.   # noqa: E501

        :param incidents_count: The incidents_count of this TypesStats.  # noqa: E501
        :type incidents_count: int
        """

        self._incidents_count = incidents_count

    @property
    def serverless(self):
        """Gets the serverless of this TypesStats.  # noqa: E501


        :return: The serverless of this TypesStats.  # noqa: E501
        :rtype: TypesRuntimeStats
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this TypesStats.


        :param serverless: The serverless of this TypesStats.  # noqa: E501
        :type serverless: TypesRuntimeStats
        """

        self._serverless = serverless

    @property
    def serverless_app_firewall(self):
        """Gets the serverless_app_firewall of this TypesStats.  # noqa: E501

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :return: The serverless_app_firewall of this TypesStats.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._serverless_app_firewall

    @serverless_app_firewall.setter
    def serverless_app_firewall(self, serverless_app_firewall):
        """Sets the serverless_app_firewall of this TypesStats.

        AppFirewallStats are the daily stats for app firewall audits TODO #20802 - replace string key with WAAS attack type type when mongo changed to avoid encoding map keys without stringer  # noqa: E501

        :param serverless_app_firewall: The serverless_app_firewall of this TypesStats.  # noqa: E501
        :type serverless_app_firewall: dict(str, int)
        """

        self._serverless_app_firewall = serverless_app_firewall

    @property
    def time(self):
        """Gets the time of this TypesStats.  # noqa: E501

        UnixTimestamp is the unix timestamp.   # noqa: E501

        :return: The time of this TypesStats.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TypesStats.

        UnixTimestamp is the unix timestamp.   # noqa: E501

        :param time: The time of this TypesStats.  # noqa: E501
        :type time: int
        """

        self._time = time

    @property
    def vulnerabilities(self):
        """Gets the vulnerabilities of this TypesStats.  # noqa: E501


        :return: The vulnerabilities of this TypesStats.  # noqa: E501
        :rtype: TypesVulnerabilitiesStats
        """
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, vulnerabilities):
        """Sets the vulnerabilities of this TypesStats.


        :param vulnerabilities: The vulnerabilities of this TypesStats.  # noqa: E501
        :type vulnerabilities: TypesVulnerabilitiesStats
        """

        self._vulnerabilities = vulnerabilities

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesStats):
            return True

        return self.to_dict() != other.to_dict()
