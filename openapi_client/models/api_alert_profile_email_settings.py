# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ApiAlertProfileEmailSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credential_id': 'str',
        'enabled': 'bool',
        '_from': 'str',
        'labels': 'list[str]',
        'port': 'int',
        'recipients': 'list[str]',
        'smtp_address': 'str',
        'ssl': 'bool'
    }

    attribute_map = {
        'credential_id': 'credentialId',
        'enabled': 'enabled',
        '_from': 'from',
        'labels': 'labels',
        'port': 'port',
        'recipients': 'recipients',
        'smtp_address': 'smtpAddress',
        'ssl': 'ssl'
    }

    def __init__(self, credential_id=None, enabled=None, _from=None, labels=None, port=None, recipients=None, smtp_address=None, ssl=None, local_vars_configuration=None):  # noqa: E501
        """ApiAlertProfileEmailSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._credential_id = None
        self._enabled = None
        self.__from = None
        self._labels = None
        self._port = None
        self._recipients = None
        self._smtp_address = None
        self._ssl = None
        self.discriminator = None

        if credential_id is not None:
            self.credential_id = credential_id
        if enabled is not None:
            self.enabled = enabled
        if _from is not None:
            self._from = _from
        if labels is not None:
            self.labels = labels
        if port is not None:
            self.port = port
        if recipients is not None:
            self.recipients = recipients
        if smtp_address is not None:
            self.smtp_address = smtp_address
        if ssl is not None:
            self.ssl = ssl

    @property
    def credential_id(self):
        """Gets the credential_id of this ApiAlertProfileEmailSettings.  # noqa: E501

        CredentialID is the Email authentication credentials id.   # noqa: E501

        :return: The credential_id of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this ApiAlertProfileEmailSettings.

        CredentialID is the Email authentication credentials id.   # noqa: E501

        :param credential_id: The credential_id of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def enabled(self):
        """Gets the enabled of this ApiAlertProfileEmailSettings.  # noqa: E501

        .   # noqa: E501

        :return: The enabled of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiAlertProfileEmailSettings.

        .   # noqa: E501

        :param enabled: The enabled of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def _from(self):
        """Gets the _from of this ApiAlertProfileEmailSettings.  # noqa: E501

        From is the from address of the mail.   # noqa: E501

        :return: The _from of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ApiAlertProfileEmailSettings.

        From is the from address of the mail.   # noqa: E501

        :param _from: The _from of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type _from: str
        """

        self.__from = _from

    @property
    def labels(self):
        """Gets the labels of this ApiAlertProfileEmailSettings.  # noqa: E501

        Labels are custom label names from which the mail recipients are extracted, allowing to dynamically extract the target of the alerts.   # noqa: E501

        :return: The labels of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ApiAlertProfileEmailSettings.

        Labels are custom label names from which the mail recipients are extracted, allowing to dynamically extract the target of the alerts.   # noqa: E501

        :param labels: The labels of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def port(self):
        """Gets the port of this ApiAlertProfileEmailSettings.  # noqa: E501

        .   # noqa: E501

        :return: The port of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ApiAlertProfileEmailSettings.

        .   # noqa: E501

        :param port: The port of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def recipients(self):
        """Gets the recipients of this ApiAlertProfileEmailSettings.  # noqa: E501

        .   # noqa: E501

        :return: The recipients of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ApiAlertProfileEmailSettings.

        .   # noqa: E501

        :param recipients: The recipients of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type recipients: list[str]
        """

        self._recipients = recipients

    @property
    def smtp_address(self):
        """Gets the smtp_address of this ApiAlertProfileEmailSettings.  # noqa: E501

        .   # noqa: E501

        :return: The smtp_address of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: str
        """
        return self._smtp_address

    @smtp_address.setter
    def smtp_address(self, smtp_address):
        """Sets the smtp_address of this ApiAlertProfileEmailSettings.

        .   # noqa: E501

        :param smtp_address: The smtp_address of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type smtp_address: str
        """

        self._smtp_address = smtp_address

    @property
    def ssl(self):
        """Gets the ssl of this ApiAlertProfileEmailSettings.  # noqa: E501

        .   # noqa: E501

        :return: The ssl of this ApiAlertProfileEmailSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this ApiAlertProfileEmailSettings.

        .   # noqa: E501

        :param ssl: The ssl of this ApiAlertProfileEmailSettings.  # noqa: E501
        :type ssl: bool
        """

        self._ssl = ssl

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAlertProfileEmailSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiAlertProfileEmailSettings):
            return True

        return self.to_dict() != other.to_dict()
