# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedHostActivity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'affected_services': 'list[str]',
        'cluster': 'str',
        'collections': 'list[str]',
        'command': 'str',
        'hostname': 'str',
        'interactive': 'bool',
        'modified_files': 'list[str]',
        'rule_name': 'str',
        'service': 'str',
        'time': 'datetime',
        'type': 'SharedActivityType',
        'user': 'str'
    }

    attribute_map = {
        'account_id': 'accountID',
        'affected_services': 'affectedServices',
        'cluster': 'cluster',
        'collections': 'collections',
        'command': 'command',
        'hostname': 'hostname',
        'interactive': 'interactive',
        'modified_files': 'modifiedFiles',
        'rule_name': 'ruleName',
        'service': 'service',
        'time': 'time',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, account_id=None, affected_services=None, cluster=None, collections=None, command=None, hostname=None, interactive=None, modified_files=None, rule_name=None, service=None, time=None, type=None, user=None, local_vars_configuration=None):  # noqa: E501
        """SharedHostActivity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._affected_services = None
        self._cluster = None
        self._collections = None
        self._command = None
        self._hostname = None
        self._interactive = None
        self._modified_files = None
        self._rule_name = None
        self._service = None
        self._time = None
        self._type = None
        self._user = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if affected_services is not None:
            self.affected_services = affected_services
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if command is not None:
            self.command = command
        if hostname is not None:
            self.hostname = hostname
        if interactive is not None:
            self.interactive = interactive
        if modified_files is not None:
            self.modified_files = modified_files
        if rule_name is not None:
            self.rule_name = rule_name
        if service is not None:
            self.service = service
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user

    @property
    def account_id(self):
        """Gets the account_id of this SharedHostActivity.  # noqa: E501

        AccountID is the cloud account ID.   # noqa: E501

        :return: The account_id of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedHostActivity.

        AccountID is the cloud account ID.   # noqa: E501

        :param account_id: The account_id of this SharedHostActivity.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def affected_services(self):
        """Gets the affected_services of this SharedHostActivity.  # noqa: E501

        AffectedServices is the affected systemd service.   # noqa: E501

        :return: The affected_services of this SharedHostActivity.  # noqa: E501
        :rtype: list[str]
        """
        return self._affected_services

    @affected_services.setter
    def affected_services(self, affected_services):
        """Sets the affected_services of this SharedHostActivity.

        AffectedServices is the affected systemd service.   # noqa: E501

        :param affected_services: The affected_services of this SharedHostActivity.  # noqa: E501
        :type affected_services: list[str]
        """

        self._affected_services = affected_services

    @property
    def cluster(self):
        """Gets the cluster of this SharedHostActivity.  # noqa: E501

        Cluster is the cluster from which the audit originated.   # noqa: E501

        :return: The cluster of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedHostActivity.

        Cluster is the cluster from which the audit originated.   # noqa: E501

        :param cluster: The cluster of this SharedHostActivity.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedHostActivity.  # noqa: E501

        Collections are collections to which this host activity applies.   # noqa: E501

        :return: The collections of this SharedHostActivity.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedHostActivity.

        Collections are collections to which this host activity applies.   # noqa: E501

        :param collections: The collections of this SharedHostActivity.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def command(self):
        """Gets the command of this SharedHostActivity.  # noqa: E501

        Command is the original (with arguments) command the user invoked.   # noqa: E501

        :return: The command of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this SharedHostActivity.

        Command is the original (with arguments) command the user invoked.   # noqa: E501

        :param command: The command of this SharedHostActivity.  # noqa: E501
        :type command: str
        """

        self._command = command

    @property
    def hostname(self):
        """Gets the hostname of this SharedHostActivity.  # noqa: E501

        Hostname the activity originated from.   # noqa: E501

        :return: The hostname of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedHostActivity.

        Hostname the activity originated from.   # noqa: E501

        :param hostname: The hostname of this SharedHostActivity.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def interactive(self):
        """Gets the interactive of this SharedHostActivity.  # noqa: E501

        Interactive indicates that the target process was spawned in an interactive session.   # noqa: E501

        :return: The interactive of this SharedHostActivity.  # noqa: E501
        :rtype: bool
        """
        return self._interactive

    @interactive.setter
    def interactive(self, interactive):
        """Sets the interactive of this SharedHostActivity.

        Interactive indicates that the target process was spawned in an interactive session.   # noqa: E501

        :param interactive: The interactive of this SharedHostActivity.  # noqa: E501
        :type interactive: bool
        """

        self._interactive = interactive

    @property
    def modified_files(self):
        """Gets the modified_files of this SharedHostActivity.  # noqa: E501

        ModifiedFiles is the related modified files.   # noqa: E501

        :return: The modified_files of this SharedHostActivity.  # noqa: E501
        :rtype: list[str]
        """
        return self._modified_files

    @modified_files.setter
    def modified_files(self, modified_files):
        """Sets the modified_files of this SharedHostActivity.

        ModifiedFiles is the related modified files.   # noqa: E501

        :param modified_files: The modified_files of this SharedHostActivity.  # noqa: E501
        :type modified_files: list[str]
        """

        self._modified_files = modified_files

    @property
    def rule_name(self):
        """Gets the rule_name of this SharedHostActivity.  # noqa: E501

        RuleName is the name of the rule applied to the host activity.   # noqa: E501

        :return: The rule_name of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SharedHostActivity.

        RuleName is the name of the rule applied to the host activity.   # noqa: E501

        :param rule_name: The rule_name of this SharedHostActivity.  # noqa: E501
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def service(self):
        """Gets the service of this SharedHostActivity.  # noqa: E501

        Service is the owning systemd service.   # noqa: E501

        :return: The service of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this SharedHostActivity.

        Service is the owning systemd service.   # noqa: E501

        :param service: The service of this SharedHostActivity.  # noqa: E501
        :type service: str
        """

        self._service = service

    @property
    def time(self):
        """Gets the time of this SharedHostActivity.  # noqa: E501

        Time is time of the activity.   # noqa: E501

        :return: The time of this SharedHostActivity.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedHostActivity.

        Time is time of the activity.   # noqa: E501

        :param time: The time of this SharedHostActivity.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this SharedHostActivity.  # noqa: E501


        :return: The type of this SharedHostActivity.  # noqa: E501
        :rtype: SharedActivityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedHostActivity.


        :param type: The type of this SharedHostActivity.  # noqa: E501
        :type type: SharedActivityType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this SharedHostActivity.  # noqa: E501

        Username of the user that triggered the activity.   # noqa: E501

        :return: The user of this SharedHostActivity.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SharedHostActivity.

        Username of the user that triggered the activity.   # noqa: E501

        :param user: The user of this SharedHostActivity.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedHostActivity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedHostActivity):
            return True

        return self.to_dict() != other.to_dict()
