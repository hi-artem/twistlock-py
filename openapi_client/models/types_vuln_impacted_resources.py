# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesVulnImpactedResources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'functions': 'dict(str, str)',
        'hosts': 'list[str]',
        'risk_tree': 'dict(str, list)'
    }

    attribute_map = {
        'id': '_id',
        'functions': 'functions',
        'hosts': 'hosts',
        'risk_tree': 'riskTree'
    }

    def __init__(self, id=None, functions=None, hosts=None, risk_tree=None, local_vars_configuration=None):  # noqa: E501
        """TypesVulnImpactedResources - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._functions = None
        self._hosts = None
        self._risk_tree = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if functions is not None:
            self.functions = functions
        if hosts is not None:
            self.hosts = hosts
        if risk_tree is not None:
            self.risk_tree = risk_tree

    @property
    def id(self):
        """Gets the id of this TypesVulnImpactedResources.  # noqa: E501

        Id is the CVE ID (index for the impacted resources).   # noqa: E501

        :return: The id of this TypesVulnImpactedResources.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesVulnImpactedResources.

        Id is the CVE ID (index for the impacted resources).   # noqa: E501

        :param id: The id of this TypesVulnImpactedResources.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def functions(self):
        """Gets the functions of this TypesVulnImpactedResources.  # noqa: E501

        Functions is a map between function id to its details.   # noqa: E501

        :return: The functions of this TypesVulnImpactedResources.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._functions

    @functions.setter
    def functions(self, functions):
        """Sets the functions of this TypesVulnImpactedResources.

        Functions is a map between function id to its details.   # noqa: E501

        :param functions: The functions of this TypesVulnImpactedResources.  # noqa: E501
        :type functions: dict(str, str)
        """

        self._functions = functions

    @property
    def hosts(self):
        """Gets the hosts of this TypesVulnImpactedResources.  # noqa: E501

        Hosts is the list of impacted hosts.   # noqa: E501

        :return: The hosts of this TypesVulnImpactedResources.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this TypesVulnImpactedResources.

        Hosts is the list of impacted hosts.   # noqa: E501

        :param hosts: The hosts of this TypesVulnImpactedResources.  # noqa: E501
        :type hosts: list[str]
        """

        self._hosts = hosts

    @property
    def risk_tree(self):
        """Gets the risk_tree of this TypesVulnImpactedResources.  # noqa: E501

        RiskTree is the risk tree associated with the CVE ID.   # noqa: E501

        :return: The risk_tree of this TypesVulnImpactedResources.  # noqa: E501
        :rtype: dict(str, list)
        """
        return self._risk_tree

    @risk_tree.setter
    def risk_tree(self, risk_tree):
        """Sets the risk_tree of this TypesVulnImpactedResources.

        RiskTree is the risk tree associated with the CVE ID.   # noqa: E501

        :param risk_tree: The risk_tree of this TypesVulnImpactedResources.  # noqa: E501
        :type risk_tree: dict(str, list)
        """

        self._risk_tree = risk_tree

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesVulnImpactedResources):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesVulnImpactedResources):
            return True

        return self.to_dict() != other.to_dict()
