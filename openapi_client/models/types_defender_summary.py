# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesDefenderSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'DefenderCategory',
        'connected': 'int',
        'deployed': 'int',
        'licensed': 'int'
    }

    attribute_map = {
        'category': 'category',
        'connected': 'connected',
        'deployed': 'deployed',
        'licensed': 'licensed'
    }

    def __init__(self, category=None, connected=None, deployed=None, licensed=None, local_vars_configuration=None):  # noqa: E501
        """TypesDefenderSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._connected = None
        self._deployed = None
        self._licensed = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if connected is not None:
            self.connected = connected
        if deployed is not None:
            self.deployed = deployed
        if licensed is not None:
            self.licensed = licensed

    @property
    def category(self):
        """Gets the category of this TypesDefenderSummary.  # noqa: E501


        :return: The category of this TypesDefenderSummary.  # noqa: E501
        :rtype: DefenderCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TypesDefenderSummary.


        :param category: The category of this TypesDefenderSummary.  # noqa: E501
        :type category: DefenderCategory
        """

        self._category = category

    @property
    def connected(self):
        """Gets the connected of this TypesDefenderSummary.  # noqa: E501

        Connected counts how many defenders are connected for this category.   # noqa: E501

        :return: The connected of this TypesDefenderSummary.  # noqa: E501
        :rtype: int
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this TypesDefenderSummary.

        Connected counts how many defenders are connected for this category.   # noqa: E501

        :param connected: The connected of this TypesDefenderSummary.  # noqa: E501
        :type connected: int
        """

        self._connected = connected

    @property
    def deployed(self):
        """Gets the deployed of this TypesDefenderSummary.  # noqa: E501

        Deployed counts how many defenders are deployed for this category.   # noqa: E501

        :return: The deployed of this TypesDefenderSummary.  # noqa: E501
        :rtype: int
        """
        return self._deployed

    @deployed.setter
    def deployed(self, deployed):
        """Sets the deployed of this TypesDefenderSummary.

        Deployed counts how many defenders are deployed for this category.   # noqa: E501

        :param deployed: The deployed of this TypesDefenderSummary.  # noqa: E501
        :type deployed: int
        """

        self._deployed = deployed

    @property
    def licensed(self):
        """Gets the licensed of this TypesDefenderSummary.  # noqa: E501

        Licensed counts how many defenders are licensed for this category.   # noqa: E501

        :return: The licensed of this TypesDefenderSummary.  # noqa: E501
        :rtype: int
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this TypesDefenderSummary.

        Licensed counts how many defenders are licensed for this category.   # noqa: E501

        :param licensed: The licensed of this TypesDefenderSummary.  # noqa: E501
        :type licensed: int
        """

        self._licensed = licensed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesDefenderSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesDefenderSummary):
            return True

        return self.to_dict() != other.to_dict()
