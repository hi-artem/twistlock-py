# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesRiskScoreFactors(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'internet': 'bool',
        'network': 'bool',
        'no_security_profile': 'bool',
        'privileged_container': 'bool',
        'root_privilege': 'bool'
    }

    attribute_map = {
        'internet': 'internet',
        'network': 'network',
        'no_security_profile': 'noSecurityProfile',
        'privileged_container': 'privilegedContainer',
        'root_privilege': 'rootPrivilege'
    }

    def __init__(self, internet=None, network=None, no_security_profile=None, privileged_container=None, root_privilege=None, local_vars_configuration=None):  # noqa: E501
        """TypesRiskScoreFactors - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._internet = None
        self._network = None
        self._no_security_profile = None
        self._privileged_container = None
        self._root_privilege = None
        self.discriminator = None

        if internet is not None:
            self.internet = internet
        if network is not None:
            self.network = network
        if no_security_profile is not None:
            self.no_security_profile = no_security_profile
        if privileged_container is not None:
            self.privileged_container = privileged_container
        if root_privilege is not None:
            self.root_privilege = root_privilege

    @property
    def internet(self):
        """Gets the internet of this TypesRiskScoreFactors.  # noqa: E501

        Internet indicates whether a container has internet access.   # noqa: E501

        :return: The internet of this TypesRiskScoreFactors.  # noqa: E501
        :rtype: bool
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this TypesRiskScoreFactors.

        Internet indicates whether a container has internet access.   # noqa: E501

        :param internet: The internet of this TypesRiskScoreFactors.  # noqa: E501
        :type internet: bool
        """

        self._internet = internet

    @property
    def network(self):
        """Gets the network of this TypesRiskScoreFactors.  # noqa: E501

        Network indicates whether a container is listening to ports.   # noqa: E501

        :return: The network of this TypesRiskScoreFactors.  # noqa: E501
        :rtype: bool
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this TypesRiskScoreFactors.

        Network indicates whether a container is listening to ports.   # noqa: E501

        :param network: The network of this TypesRiskScoreFactors.  # noqa: E501
        :type network: bool
        """

        self._network = network

    @property
    def no_security_profile(self):
        """Gets the no_security_profile of this TypesRiskScoreFactors.  # noqa: E501

        NoSecurityProfile indicates whether a container has security profile issue.   # noqa: E501

        :return: The no_security_profile of this TypesRiskScoreFactors.  # noqa: E501
        :rtype: bool
        """
        return self._no_security_profile

    @no_security_profile.setter
    def no_security_profile(self, no_security_profile):
        """Sets the no_security_profile of this TypesRiskScoreFactors.

        NoSecurityProfile indicates whether a container has security profile issue.   # noqa: E501

        :param no_security_profile: The no_security_profile of this TypesRiskScoreFactors.  # noqa: E501
        :type no_security_profile: bool
        """

        self._no_security_profile = no_security_profile

    @property
    def privileged_container(self):
        """Gets the privileged_container of this TypesRiskScoreFactors.  # noqa: E501

        PrivilegedContainer indicates whether a container runs using the --privileged flag.   # noqa: E501

        :return: The privileged_container of this TypesRiskScoreFactors.  # noqa: E501
        :rtype: bool
        """
        return self._privileged_container

    @privileged_container.setter
    def privileged_container(self, privileged_container):
        """Sets the privileged_container of this TypesRiskScoreFactors.

        PrivilegedContainer indicates whether a container runs using the --privileged flag.   # noqa: E501

        :param privileged_container: The privileged_container of this TypesRiskScoreFactors.  # noqa: E501
        :type privileged_container: bool
        """

        self._privileged_container = privileged_container

    @property
    def root_privilege(self):
        """Gets the root_privilege of this TypesRiskScoreFactors.  # noqa: E501

        RootPrivilege indicates whether a container runs as root.   # noqa: E501

        :return: The root_privilege of this TypesRiskScoreFactors.  # noqa: E501
        :rtype: bool
        """
        return self._root_privilege

    @root_privilege.setter
    def root_privilege(self, root_privilege):
        """Sets the root_privilege of this TypesRiskScoreFactors.

        RootPrivilege indicates whether a container runs as root.   # noqa: E501

        :param root_privilege: The root_privilege of this TypesRiskScoreFactors.  # noqa: E501
        :type root_privilege: bool
        """

        self._root_privilege = root_privilege

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesRiskScoreFactors):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesRiskScoreFactors):
            return True

        return self.to_dict() != other.to_dict()
