# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesRiskTreeResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container': 'str',
        'factors': 'TypesRiskScoreFactors',
        'host': 'str',
        'image': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'container': 'container',
        'factors': 'factors',
        'host': 'host',
        'image': 'image',
        'namespace': 'namespace'
    }

    def __init__(self, container=None, factors=None, host=None, image=None, namespace=None, local_vars_configuration=None):  # noqa: E501
        """TypesRiskTreeResource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._container = None
        self._factors = None
        self._host = None
        self._image = None
        self._namespace = None
        self.discriminator = None

        if container is not None:
            self.container = container
        if factors is not None:
            self.factors = factors
        if host is not None:
            self.host = host
        if image is not None:
            self.image = image
        if namespace is not None:
            self.namespace = namespace

    @property
    def container(self):
        """Gets the container of this TypesRiskTreeResource.  # noqa: E501

        .   # noqa: E501

        :return: The container of this TypesRiskTreeResource.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this TypesRiskTreeResource.

        .   # noqa: E501

        :param container: The container of this TypesRiskTreeResource.  # noqa: E501
        :type container: str
        """

        self._container = container

    @property
    def factors(self):
        """Gets the factors of this TypesRiskTreeResource.  # noqa: E501


        :return: The factors of this TypesRiskTreeResource.  # noqa: E501
        :rtype: TypesRiskScoreFactors
        """
        return self._factors

    @factors.setter
    def factors(self, factors):
        """Sets the factors of this TypesRiskTreeResource.


        :param factors: The factors of this TypesRiskTreeResource.  # noqa: E501
        :type factors: TypesRiskScoreFactors
        """

        self._factors = factors

    @property
    def host(self):
        """Gets the host of this TypesRiskTreeResource.  # noqa: E501

        .   # noqa: E501

        :return: The host of this TypesRiskTreeResource.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this TypesRiskTreeResource.

        .   # noqa: E501

        :param host: The host of this TypesRiskTreeResource.  # noqa: E501
        :type host: str
        """

        self._host = host

    @property
    def image(self):
        """Gets the image of this TypesRiskTreeResource.  # noqa: E501

        .   # noqa: E501

        :return: The image of this TypesRiskTreeResource.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this TypesRiskTreeResource.

        .   # noqa: E501

        :param image: The image of this TypesRiskTreeResource.  # noqa: E501
        :type image: str
        """

        self._image = image

    @property
    def namespace(self):
        """Gets the namespace of this TypesRiskTreeResource.  # noqa: E501

        .   # noqa: E501

        :return: The namespace of this TypesRiskTreeResource.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TypesRiskTreeResource.

        .   # noqa: E501

        :param namespace: The namespace of this TypesRiskTreeResource.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesRiskTreeResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesRiskTreeResource):
            return True

        return self.to_dict() != other.to_dict()
