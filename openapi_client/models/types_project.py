# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'address': 'str',
        'ca': 'list[str]',
        'creation_time': 'datetime',
        'err': 'str',
        'password': 'CommonSecret',
        'skip_certificate_verification': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'id': '_id',
        'address': 'address',
        'ca': 'ca',
        'creation_time': 'creationTime',
        'err': 'err',
        'password': 'password',
        'skip_certificate_verification': 'skipCertificateVerification',
        'username': 'username'
    }

    def __init__(self, id=None, address=None, ca=None, creation_time=None, err=None, password=None, skip_certificate_verification=None, username=None, local_vars_configuration=None):  # noqa: E501
        """TypesProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._address = None
        self._ca = None
        self._creation_time = None
        self._err = None
        self._password = None
        self._skip_certificate_verification = None
        self._username = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address is not None:
            self.address = address
        if ca is not None:
            self.ca = ca
        if creation_time is not None:
            self.creation_time = creation_time
        if err is not None:
            self.err = err
        if password is not None:
            self.password = password
        if skip_certificate_verification is not None:
            self.skip_certificate_verification = skip_certificate_verification
        if username is not None:
            self.username = username

    @property
    def id(self):
        """Gets the id of this TypesProject.  # noqa: E501

        ID is the project name (primary index).   # noqa: E501

        :return: The id of this TypesProject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesProject.

        ID is the project name (primary index).   # noqa: E501

        :param id: The id of this TypesProject.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this TypesProject.  # noqa: E501

        Address is the project address.   # noqa: E501

        :return: The address of this TypesProject.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TypesProject.

        Address is the project address.   # noqa: E501

        :param address: The address of this TypesProject.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def ca(self):
        """Gets the ca of this TypesProject.  # noqa: E501

        CACertificate is the remote console CA certificate.   # noqa: E501

        :return: The ca of this TypesProject.  # noqa: E501
        :rtype: list[str]
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this TypesProject.

        CACertificate is the remote console CA certificate.   # noqa: E501

        :param ca: The ca of this TypesProject.  # noqa: E501
        :type ca: list[str]
        """

        self._ca = ca

    @property
    def creation_time(self):
        """Gets the creation_time of this TypesProject.  # noqa: E501

        CreationTime is the remote project creation time.   # noqa: E501

        :return: The creation_time of this TypesProject.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TypesProject.

        CreationTime is the remote project creation time.   # noqa: E501

        :param creation_time: The creation_time of this TypesProject.  # noqa: E501
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def err(self):
        """Gets the err of this TypesProject.  # noqa: E501

        Err are errors that happened during project synchronization / setup.   # noqa: E501

        :return: The err of this TypesProject.  # noqa: E501
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this TypesProject.

        Err are errors that happened during project synchronization / setup.   # noqa: E501

        :param err: The err of this TypesProject.  # noqa: E501
        :type err: str
        """

        self._err = err

    @property
    def password(self):
        """Gets the password of this TypesProject.  # noqa: E501


        :return: The password of this TypesProject.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TypesProject.


        :param password: The password of this TypesProject.  # noqa: E501
        :type password: CommonSecret
        """

        self._password = password

    @property
    def skip_certificate_verification(self):
        """Gets the skip_certificate_verification of this TypesProject.  # noqa: E501

        SkipCertificateVerification indicates that the connection to the secondary project is done on insecure channel, this is used when secondary project is behind a proxy or when customer is using custom certs.   # noqa: E501

        :return: The skip_certificate_verification of this TypesProject.  # noqa: E501
        :rtype: bool
        """
        return self._skip_certificate_verification

    @skip_certificate_verification.setter
    def skip_certificate_verification(self, skip_certificate_verification):
        """Sets the skip_certificate_verification of this TypesProject.

        SkipCertificateVerification indicates that the connection to the secondary project is done on insecure channel, this is used when secondary project is behind a proxy or when customer is using custom certs.   # noqa: E501

        :param skip_certificate_verification: The skip_certificate_verification of this TypesProject.  # noqa: E501
        :type skip_certificate_verification: bool
        """

        self._skip_certificate_verification = skip_certificate_verification

    @property
    def username(self):
        """Gets the username of this TypesProject.  # noqa: E501

        Username is the remote project username.   # noqa: E501

        :return: The username of this TypesProject.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TypesProject.

        Username is the remote project username.   # noqa: E501

        :param username: The username of this TypesProject.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesProject):
            return True

        return self.to_dict() != other.to_dict()
