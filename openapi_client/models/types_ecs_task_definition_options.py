# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesEcsTaskDefinitionOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster': 'str',
        'collect_pod_labels': 'bool',
        'console_addr': 'str',
        'credential_id': 'str',
        'cri': 'bool',
        'docker_socket_path': 'str',
        'image': 'str',
        'istio': 'bool',
        'namespace': 'str',
        'node_selector': 'str',
        'orchestration': 'str',
        'privileged': 'bool',
        'proxy': 'CommonDefenderProxyOpt',
        'region': 'str',
        'secretsname': 'str',
        'selinux': 'bool',
        'serviceaccounts': 'bool',
        'task_name': 'str'
    }

    attribute_map = {
        'cluster': 'cluster',
        'collect_pod_labels': 'collectPodLabels',
        'console_addr': 'consoleAddr',
        'credential_id': 'credentialID',
        'cri': 'cri',
        'docker_socket_path': 'dockerSocketPath',
        'image': 'image',
        'istio': 'istio',
        'namespace': 'namespace',
        'node_selector': 'nodeSelector',
        'orchestration': 'orchestration',
        'privileged': 'privileged',
        'proxy': 'proxy',
        'region': 'region',
        'secretsname': 'secretsname',
        'selinux': 'selinux',
        'serviceaccounts': 'serviceaccounts',
        'task_name': 'taskName'
    }

    def __init__(self, cluster=None, collect_pod_labels=None, console_addr=None, credential_id=None, cri=None, docker_socket_path=None, image=None, istio=None, namespace=None, node_selector=None, orchestration=None, privileged=None, proxy=None, region=None, secretsname=None, selinux=None, serviceaccounts=None, task_name=None, local_vars_configuration=None):  # noqa: E501
        """TypesEcsTaskDefinitionOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster = None
        self._collect_pod_labels = None
        self._console_addr = None
        self._credential_id = None
        self._cri = None
        self._docker_socket_path = None
        self._image = None
        self._istio = None
        self._namespace = None
        self._node_selector = None
        self._orchestration = None
        self._privileged = None
        self._proxy = None
        self._region = None
        self._secretsname = None
        self._selinux = None
        self._serviceaccounts = None
        self._task_name = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if collect_pod_labels is not None:
            self.collect_pod_labels = collect_pod_labels
        if console_addr is not None:
            self.console_addr = console_addr
        if credential_id is not None:
            self.credential_id = credential_id
        if cri is not None:
            self.cri = cri
        if docker_socket_path is not None:
            self.docker_socket_path = docker_socket_path
        if image is not None:
            self.image = image
        if istio is not None:
            self.istio = istio
        if namespace is not None:
            self.namespace = namespace
        if node_selector is not None:
            self.node_selector = node_selector
        if orchestration is not None:
            self.orchestration = orchestration
        if privileged is not None:
            self.privileged = privileged
        if proxy is not None:
            self.proxy = proxy
        if region is not None:
            self.region = region
        if secretsname is not None:
            self.secretsname = secretsname
        if selinux is not None:
            self.selinux = selinux
        if serviceaccounts is not None:
            self.serviceaccounts = serviceaccounts
        if task_name is not None:
            self.task_name = task_name

    @property
    def cluster(self):
        """Gets the cluster of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        Cluster is the kubernetes or ecs cluster name.   # noqa: E501

        :return: The cluster of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this TypesEcsTaskDefinitionOptions.

        Cluster is the kubernetes or ecs cluster name.   # noqa: E501

        :param cluster: The cluster of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collect_pod_labels(self):
        """Gets the collect_pod_labels of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        CollectPodLabels indicates whether to collect pod related labels resource labels.   # noqa: E501

        :return: The collect_pod_labels of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._collect_pod_labels

    @collect_pod_labels.setter
    def collect_pod_labels(self, collect_pod_labels):
        """Sets the collect_pod_labels of this TypesEcsTaskDefinitionOptions.

        CollectPodLabels indicates whether to collect pod related labels resource labels.   # noqa: E501

        :param collect_pod_labels: The collect_pod_labels of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type collect_pod_labels: bool
        """

        self._collect_pod_labels = collect_pod_labels

    @property
    def console_addr(self):
        """Gets the console_addr of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        ConsoleAddr is the console address for defender communication.   # noqa: E501

        :return: The console_addr of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._console_addr

    @console_addr.setter
    def console_addr(self, console_addr):
        """Sets the console_addr of this TypesEcsTaskDefinitionOptions.

        ConsoleAddr is the console address for defender communication.   # noqa: E501

        :param console_addr: The console_addr of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type console_addr: str
        """

        self._console_addr = console_addr

    @property
    def credential_id(self):
        """Gets the credential_id of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        CredentialID is the name of the credential used.   # noqa: E501

        :return: The credential_id of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this TypesEcsTaskDefinitionOptions.

        CredentialID is the name of the credential used.   # noqa: E501

        :param credential_id: The credential_id of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def cri(self):
        """Gets the cri of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        CRI indicates defender uses CRI instead of docker.   # noqa: E501

        :return: The cri of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._cri

    @cri.setter
    def cri(self, cri):
        """Sets the cri of this TypesEcsTaskDefinitionOptions.

        CRI indicates defender uses CRI instead of docker.   # noqa: E501

        :param cri: The cri of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type cri: bool
        """

        self._cri = cri

    @property
    def docker_socket_path(self):
        """Gets the docker_socket_path of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        DockerSocketPath is the path of the docker socket file.   # noqa: E501

        :return: The docker_socket_path of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._docker_socket_path

    @docker_socket_path.setter
    def docker_socket_path(self, docker_socket_path):
        """Sets the docker_socket_path of this TypesEcsTaskDefinitionOptions.

        DockerSocketPath is the path of the docker socket file.   # noqa: E501

        :param docker_socket_path: The docker_socket_path of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type docker_socket_path: str
        """

        self._docker_socket_path = docker_socket_path

    @property
    def image(self):
        """Gets the image of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        Image is the full daemonset image name.   # noqa: E501

        :return: The image of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this TypesEcsTaskDefinitionOptions.

        Image is the full daemonset image name.   # noqa: E501

        :param image: The image of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type image: str
        """

        self._image = image

    @property
    def istio(self):
        """Gets the istio of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        MonitorIstio indicates whether to monitor Istio.   # noqa: E501

        :return: The istio of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._istio

    @istio.setter
    def istio(self, istio):
        """Sets the istio of this TypesEcsTaskDefinitionOptions.

        MonitorIstio indicates whether to monitor Istio.   # noqa: E501

        :param istio: The istio of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type istio: bool
        """

        self._istio = istio

    @property
    def namespace(self):
        """Gets the namespace of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        Namespace is the target deamonset namespaces.   # noqa: E501

        :return: The namespace of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TypesEcsTaskDefinitionOptions.

        Namespace is the target deamonset namespaces.   # noqa: E501

        :param namespace: The namespace of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def node_selector(self):
        """Gets the node_selector of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        NodeSelector is a key/value node selector.   # noqa: E501

        :return: The node_selector of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this TypesEcsTaskDefinitionOptions.

        NodeSelector is a key/value node selector.   # noqa: E501

        :param node_selector: The node_selector of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type node_selector: str
        """

        self._node_selector = node_selector

    @property
    def orchestration(self):
        """Gets the orchestration of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        Orchestration is the orchestration type.   # noqa: E501

        :return: The orchestration of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._orchestration

    @orchestration.setter
    def orchestration(self, orchestration):
        """Sets the orchestration of this TypesEcsTaskDefinitionOptions.

        Orchestration is the orchestration type.   # noqa: E501

        :param orchestration: The orchestration of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type orchestration: str
        """

        self._orchestration = orchestration

    @property
    def privileged(self):
        """Gets the privileged of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        Privileged indicates whether to run defenders as privileged.   # noqa: E501

        :return: The privileged of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged):
        """Sets the privileged of this TypesEcsTaskDefinitionOptions.

        Privileged indicates whether to run defenders as privileged.   # noqa: E501

        :param privileged: The privileged of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def proxy(self):
        """Gets the proxy of this TypesEcsTaskDefinitionOptions.  # noqa: E501


        :return: The proxy of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: CommonDefenderProxyOpt
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this TypesEcsTaskDefinitionOptions.


        :param proxy: The proxy of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type proxy: CommonDefenderProxyOpt
        """

        self._proxy = proxy

    @property
    def region(self):
        """Gets the region of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        Region is the kubernetes cluster location region.   # noqa: E501

        :return: The region of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TypesEcsTaskDefinitionOptions.

        Region is the kubernetes cluster location region.   # noqa: E501

        :param region: The region of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def secretsname(self):
        """Gets the secretsname of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        SecretName is the secret.   # noqa: E501

        :return: The secretsname of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._secretsname

    @secretsname.setter
    def secretsname(self, secretsname):
        """Sets the secretsname of this TypesEcsTaskDefinitionOptions.

        SecretName is the secret.   # noqa: E501

        :param secretsname: The secretsname of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type secretsname: str
        """

        self._secretsname = secretsname

    @property
    def selinux(self):
        """Gets the selinux of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        SelinuxEnforced indicates whether selinux is enforced on the target host.   # noqa: E501

        :return: The selinux of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._selinux

    @selinux.setter
    def selinux(self, selinux):
        """Sets the selinux of this TypesEcsTaskDefinitionOptions.

        SelinuxEnforced indicates whether selinux is enforced on the target host.   # noqa: E501

        :param selinux: The selinux of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type selinux: bool
        """

        self._selinux = selinux

    @property
    def serviceaccounts(self):
        """Gets the serviceaccounts of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        MonitorServiceAccounts indicates whether to monitor service accounts.   # noqa: E501

        :return: The serviceaccounts of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._serviceaccounts

    @serviceaccounts.setter
    def serviceaccounts(self, serviceaccounts):
        """Sets the serviceaccounts of this TypesEcsTaskDefinitionOptions.

        MonitorServiceAccounts indicates whether to monitor service accounts.   # noqa: E501

        :param serviceaccounts: The serviceaccounts of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type serviceaccounts: bool
        """

        self._serviceaccounts = serviceaccounts

    @property
    def task_name(self):
        """Gets the task_name of this TypesEcsTaskDefinitionOptions.  # noqa: E501

        TaskName is the name used for the task definition.   # noqa: E501

        :return: The task_name of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TypesEcsTaskDefinitionOptions.

        TaskName is the name used for the task definition.   # noqa: E501

        :param task_name: The task_name of this TypesEcsTaskDefinitionOptions.  # noqa: E501
        :type task_name: str
        """

        self._task_name = task_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesEcsTaskDefinitionOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesEcsTaskDefinitionOptions):
            return True

        return self.to_dict() != other.to_dict()
