# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ApiAlertRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_rules': 'bool',
        'enabled': 'bool',
        'rules': 'list[str]'
    }

    attribute_map = {
        'all_rules': 'allRules',
        'enabled': 'enabled',
        'rules': 'rules'
    }

    def __init__(self, all_rules=None, enabled=None, rules=None, local_vars_configuration=None):  # noqa: E501
        """ApiAlertRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._all_rules = None
        self._enabled = None
        self._rules = None
        self.discriminator = None

        if all_rules is not None:
            self.all_rules = all_rules
        if enabled is not None:
            self.enabled = enabled
        if rules is not None:
            self.rules = rules

    @property
    def all_rules(self):
        """Gets the all_rules of this ApiAlertRule.  # noqa: E501

        AllRules controls whether an alert is sent out for audits on all policy rules.   # noqa: E501

        :return: The all_rules of this ApiAlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._all_rules

    @all_rules.setter
    def all_rules(self, all_rules):
        """Sets the all_rules of this ApiAlertRule.

        AllRules controls whether an alert is sent out for audits on all policy rules.   # noqa: E501

        :param all_rules: The all_rules of this ApiAlertRule.  # noqa: E501
        :type all_rules: bool
        """

        self._all_rules = all_rules

    @property
    def enabled(self):
        """Gets the enabled of this ApiAlertRule.  # noqa: E501

        Enabled controls whether the rule is enabled.   # noqa: E501

        :return: The enabled of this ApiAlertRule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiAlertRule.

        Enabled controls whether the rule is enabled.   # noqa: E501

        :param enabled: The enabled of this ApiAlertRule.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def rules(self):
        """Gets the rules of this ApiAlertRule.  # noqa: E501

        AssociatedRules defines the specific rules whose audits will generate alerts (relevant only if AllRules is false).   # noqa: E501

        :return: The rules of this ApiAlertRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ApiAlertRule.

        AssociatedRules defines the specific rules whose audits will generate alerts (relevant only if AllRules is false).   # noqa: E501

        :param rules: The rules of this ApiAlertRule.  # noqa: E501
        :type rules: list[str]
        """

        self._rules = rules

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAlertRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiAlertRule):
            return True

        return self.to_dict() != other.to_dict()
