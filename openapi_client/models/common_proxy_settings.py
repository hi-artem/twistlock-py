# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CommonProxySettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca': 'str',
        'http_proxy': 'str',
        'no_proxy': 'str',
        'password': 'CommonSecret',
        'user': 'str'
    }

    attribute_map = {
        'ca': 'ca',
        'http_proxy': 'httpProxy',
        'no_proxy': 'noProxy',
        'password': 'password',
        'user': 'user'
    }

    def __init__(self, ca=None, http_proxy=None, no_proxy=None, password=None, user=None, local_vars_configuration=None):  # noqa: E501
        """CommonProxySettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ca = None
        self._http_proxy = None
        self._no_proxy = None
        self._password = None
        self._user = None
        self.discriminator = None

        if ca is not None:
            self.ca = ca
        if http_proxy is not None:
            self.http_proxy = http_proxy
        if no_proxy is not None:
            self.no_proxy = no_proxy
        if password is not None:
            self.password = password
        if user is not None:
            self.user = user

    @property
    def ca(self):
        """Gets the ca of this CommonProxySettings.  # noqa: E501

        Proxy's CA for Defender to trust. Required when using TLS intercept proxies.   # noqa: E501

        :return: The ca of this CommonProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this CommonProxySettings.

        Proxy's CA for Defender to trust. Required when using TLS intercept proxies.   # noqa: E501

        :param ca: The ca of this CommonProxySettings.  # noqa: E501
        :type ca: str
        """

        self._ca = ca

    @property
    def http_proxy(self):
        """Gets the http_proxy of this CommonProxySettings.  # noqa: E501

        Proxy address.   # noqa: E501

        :return: The http_proxy of this CommonProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._http_proxy

    @http_proxy.setter
    def http_proxy(self, http_proxy):
        """Sets the http_proxy of this CommonProxySettings.

        Proxy address.   # noqa: E501

        :param http_proxy: The http_proxy of this CommonProxySettings.  # noqa: E501
        :type http_proxy: str
        """

        self._http_proxy = http_proxy

    @property
    def no_proxy(self):
        """Gets the no_proxy of this CommonProxySettings.  # noqa: E501

        List of addresses for which the proxy should not be used.   # noqa: E501

        :return: The no_proxy of this CommonProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._no_proxy

    @no_proxy.setter
    def no_proxy(self, no_proxy):
        """Sets the no_proxy of this CommonProxySettings.

        List of addresses for which the proxy should not be used.   # noqa: E501

        :param no_proxy: The no_proxy of this CommonProxySettings.  # noqa: E501
        :type no_proxy: str
        """

        self._no_proxy = no_proxy

    @property
    def password(self):
        """Gets the password of this CommonProxySettings.  # noqa: E501


        :return: The password of this CommonProxySettings.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CommonProxySettings.


        :param password: The password of this CommonProxySettings.  # noqa: E501
        :type password: CommonSecret
        """

        self._password = password

    @property
    def user(self):
        """Gets the user of this CommonProxySettings.  # noqa: E501

        Username to authenticate with the proxy.   # noqa: E501

        :return: The user of this CommonProxySettings.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CommonProxySettings.

        Username to authenticate with the proxy.   # noqa: E501

        :param user: The user of this CommonProxySettings.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonProxySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommonProxySettings):
            return True

        return self.to_dict() != other.to_dict()
