# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RuntimeHostPolicyRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'anti_malware': 'RuntimeAntiMalwareRule',
        'collections': 'list[CollectionCollection]',
        'custom_rules': 'list[CustomrulesRef]',
        'disabled': 'bool',
        'dns': 'RuntimeHostDNSRule',
        'file_integrity_rules': 'list[RuntimeFileIntegrityRule]',
        'forensic': 'CommonHostForensicSettings',
        'log_inspection_rules': 'list[RuntimeLogInspectionRule]',
        'modified': 'datetime',
        'name': 'str',
        'network': 'RuntimeHostNetworkRule',
        'notes': 'str',
        'owner': 'str',
        'previous_name': 'str'
    }

    attribute_map = {
        'anti_malware': 'antiMalware',
        'collections': 'collections',
        'custom_rules': 'customRules',
        'disabled': 'disabled',
        'dns': 'dns',
        'file_integrity_rules': 'fileIntegrityRules',
        'forensic': 'forensic',
        'log_inspection_rules': 'logInspectionRules',
        'modified': 'modified',
        'name': 'name',
        'network': 'network',
        'notes': 'notes',
        'owner': 'owner',
        'previous_name': 'previousName'
    }

    def __init__(self, anti_malware=None, collections=None, custom_rules=None, disabled=None, dns=None, file_integrity_rules=None, forensic=None, log_inspection_rules=None, modified=None, name=None, network=None, notes=None, owner=None, previous_name=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeHostPolicyRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._anti_malware = None
        self._collections = None
        self._custom_rules = None
        self._disabled = None
        self._dns = None
        self._file_integrity_rules = None
        self._forensic = None
        self._log_inspection_rules = None
        self._modified = None
        self._name = None
        self._network = None
        self._notes = None
        self._owner = None
        self._previous_name = None
        self.discriminator = None

        if anti_malware is not None:
            self.anti_malware = anti_malware
        if collections is not None:
            self.collections = collections
        if custom_rules is not None:
            self.custom_rules = custom_rules
        if disabled is not None:
            self.disabled = disabled
        if dns is not None:
            self.dns = dns
        if file_integrity_rules is not None:
            self.file_integrity_rules = file_integrity_rules
        if forensic is not None:
            self.forensic = forensic
        if log_inspection_rules is not None:
            self.log_inspection_rules = log_inspection_rules
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if network is not None:
            self.network = network
        if notes is not None:
            self.notes = notes
        if owner is not None:
            self.owner = owner
        if previous_name is not None:
            self.previous_name = previous_name

    @property
    def anti_malware(self):
        """Gets the anti_malware of this RuntimeHostPolicyRule.  # noqa: E501


        :return: The anti_malware of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: RuntimeAntiMalwareRule
        """
        return self._anti_malware

    @anti_malware.setter
    def anti_malware(self, anti_malware):
        """Sets the anti_malware of this RuntimeHostPolicyRule.


        :param anti_malware: The anti_malware of this RuntimeHostPolicyRule.  # noqa: E501
        :type anti_malware: RuntimeAntiMalwareRule
        """

        self._anti_malware = anti_malware

    @property
    def collections(self):
        """Gets the collections of this RuntimeHostPolicyRule.  # noqa: E501

        Collections is a list of collections the rule applies to.   # noqa: E501

        :return: The collections of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: list[CollectionCollection]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this RuntimeHostPolicyRule.

        Collections is a list of collections the rule applies to.   # noqa: E501

        :param collections: The collections of this RuntimeHostPolicyRule.  # noqa: E501
        :type collections: list[CollectionCollection]
        """

        self._collections = collections

    @property
    def custom_rules(self):
        """Gets the custom_rules of this RuntimeHostPolicyRule.  # noqa: E501

        CustomRules is a list of custom rules associated with the container runtime policy.   # noqa: E501

        :return: The custom_rules of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: list[CustomrulesRef]
        """
        return self._custom_rules

    @custom_rules.setter
    def custom_rules(self, custom_rules):
        """Sets the custom_rules of this RuntimeHostPolicyRule.

        CustomRules is a list of custom rules associated with the container runtime policy.   # noqa: E501

        :param custom_rules: The custom_rules of this RuntimeHostPolicyRule.  # noqa: E501
        :type custom_rules: list[CustomrulesRef]
        """

        self._custom_rules = custom_rules

    @property
    def disabled(self):
        """Gets the disabled of this RuntimeHostPolicyRule.  # noqa: E501

        Indicates if the rule is currently disabled (true) or not (false).   # noqa: E501

        :return: The disabled of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this RuntimeHostPolicyRule.

        Indicates if the rule is currently disabled (true) or not (false).   # noqa: E501

        :param disabled: The disabled of this RuntimeHostPolicyRule.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def dns(self):
        """Gets the dns of this RuntimeHostPolicyRule.  # noqa: E501


        :return: The dns of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: RuntimeHostDNSRule
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this RuntimeHostPolicyRule.


        :param dns: The dns of this RuntimeHostPolicyRule.  # noqa: E501
        :type dns: RuntimeHostDNSRule
        """

        self._dns = dns

    @property
    def file_integrity_rules(self):
        """Gets the file_integrity_rules of this RuntimeHostPolicyRule.  # noqa: E501

        FileIntegrityRules are the file integrity monitoring rules.   # noqa: E501

        :return: The file_integrity_rules of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: list[RuntimeFileIntegrityRule]
        """
        return self._file_integrity_rules

    @file_integrity_rules.setter
    def file_integrity_rules(self, file_integrity_rules):
        """Sets the file_integrity_rules of this RuntimeHostPolicyRule.

        FileIntegrityRules are the file integrity monitoring rules.   # noqa: E501

        :param file_integrity_rules: The file_integrity_rules of this RuntimeHostPolicyRule.  # noqa: E501
        :type file_integrity_rules: list[RuntimeFileIntegrityRule]
        """

        self._file_integrity_rules = file_integrity_rules

    @property
    def forensic(self):
        """Gets the forensic of this RuntimeHostPolicyRule.  # noqa: E501


        :return: The forensic of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: CommonHostForensicSettings
        """
        return self._forensic

    @forensic.setter
    def forensic(self, forensic):
        """Sets the forensic of this RuntimeHostPolicyRule.


        :param forensic: The forensic of this RuntimeHostPolicyRule.  # noqa: E501
        :type forensic: CommonHostForensicSettings
        """

        self._forensic = forensic

    @property
    def log_inspection_rules(self):
        """Gets the log_inspection_rules of this RuntimeHostPolicyRule.  # noqa: E501

        LogInspectionRules is a list of log inspection rules.   # noqa: E501

        :return: The log_inspection_rules of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: list[RuntimeLogInspectionRule]
        """
        return self._log_inspection_rules

    @log_inspection_rules.setter
    def log_inspection_rules(self, log_inspection_rules):
        """Sets the log_inspection_rules of this RuntimeHostPolicyRule.

        LogInspectionRules is a list of log inspection rules.   # noqa: E501

        :param log_inspection_rules: The log_inspection_rules of this RuntimeHostPolicyRule.  # noqa: E501
        :type log_inspection_rules: list[RuntimeLogInspectionRule]
        """

        self._log_inspection_rules = log_inspection_rules

    @property
    def modified(self):
        """Gets the modified of this RuntimeHostPolicyRule.  # noqa: E501

        Datetime when the rule was last modified.   # noqa: E501

        :return: The modified of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this RuntimeHostPolicyRule.

        Datetime when the rule was last modified.   # noqa: E501

        :param modified: The modified of this RuntimeHostPolicyRule.  # noqa: E501
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this RuntimeHostPolicyRule.  # noqa: E501

        Name of the rule.   # noqa: E501

        :return: The name of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuntimeHostPolicyRule.

        Name of the rule.   # noqa: E501

        :param name: The name of this RuntimeHostPolicyRule.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this RuntimeHostPolicyRule.  # noqa: E501


        :return: The network of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: RuntimeHostNetworkRule
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this RuntimeHostPolicyRule.


        :param network: The network of this RuntimeHostPolicyRule.  # noqa: E501
        :type network: RuntimeHostNetworkRule
        """

        self._network = network

    @property
    def notes(self):
        """Gets the notes of this RuntimeHostPolicyRule.  # noqa: E501

        Free-form text.   # noqa: E501

        :return: The notes of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RuntimeHostPolicyRule.

        Free-form text.   # noqa: E501

        :param notes: The notes of this RuntimeHostPolicyRule.  # noqa: E501
        :type notes: str
        """

        self._notes = notes

    @property
    def owner(self):
        """Gets the owner of this RuntimeHostPolicyRule.  # noqa: E501

        User who created or last modified the rule.   # noqa: E501

        :return: The owner of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this RuntimeHostPolicyRule.

        User who created or last modified the rule.   # noqa: E501

        :param owner: The owner of this RuntimeHostPolicyRule.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def previous_name(self):
        """Gets the previous_name of this RuntimeHostPolicyRule.  # noqa: E501

        Previous name of the rule. Required for rule renaming.   # noqa: E501

        :return: The previous_name of this RuntimeHostPolicyRule.  # noqa: E501
        :rtype: str
        """
        return self._previous_name

    @previous_name.setter
    def previous_name(self, previous_name):
        """Sets the previous_name of this RuntimeHostPolicyRule.

        Previous name of the rule. Required for rule renaming.   # noqa: E501

        :param previous_name: The previous_name of this RuntimeHostPolicyRule.  # noqa: E501
        :type previous_name: str
        """

        self._previous_name = previous_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeHostPolicyRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeHostPolicyRule):
            return True

        return self.to_dict() != other.to_dict()
