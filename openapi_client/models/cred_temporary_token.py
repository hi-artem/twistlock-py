# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CredTemporaryToken(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_access_key_id': 'str',
        'aws_secret_access_key': 'CommonSecret',
        'duration': 'int',
        'expiration_time': 'datetime',
        'token': 'CommonSecret'
    }

    attribute_map = {
        'aws_access_key_id': 'awsAccessKeyId',
        'aws_secret_access_key': 'awsSecretAccessKey',
        'duration': 'duration',
        'expiration_time': 'expirationTime',
        'token': 'token'
    }

    def __init__(self, aws_access_key_id=None, aws_secret_access_key=None, duration=None, expiration_time=None, token=None, local_vars_configuration=None):  # noqa: E501
        """CredTemporaryToken - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._aws_access_key_id = None
        self._aws_secret_access_key = None
        self._duration = None
        self._expiration_time = None
        self._token = None
        self.discriminator = None

        if aws_access_key_id is not None:
            self.aws_access_key_id = aws_access_key_id
        if aws_secret_access_key is not None:
            self.aws_secret_access_key = aws_secret_access_key
        if duration is not None:
            self.duration = duration
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if token is not None:
            self.token = token

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this CredTemporaryToken.  # noqa: E501

        Temporary access key.   # noqa: E501

        :return: The aws_access_key_id of this CredTemporaryToken.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this CredTemporaryToken.

        Temporary access key.   # noqa: E501

        :param aws_access_key_id: The aws_access_key_id of this CredTemporaryToken.  # noqa: E501
        :type aws_access_key_id: str
        """

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this CredTemporaryToken.  # noqa: E501


        :return: The aws_secret_access_key of this CredTemporaryToken.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this CredTemporaryToken.


        :param aws_secret_access_key: The aws_secret_access_key of this CredTemporaryToken.  # noqa: E501
        :type aws_secret_access_key: CommonSecret
        """

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def duration(self):
        """Gets the duration of this CredTemporaryToken.  # noqa: E501

        Duration of the token.   # noqa: E501

        :return: The duration of this CredTemporaryToken.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CredTemporaryToken.

        Duration of the token.   # noqa: E501

        :param duration: The duration of this CredTemporaryToken.  # noqa: E501
        :type duration: int
        """

        self._duration = duration

    @property
    def expiration_time(self):
        """Gets the expiration_time of this CredTemporaryToken.  # noqa: E501

        Expiration time for the token.   # noqa: E501

        :return: The expiration_time of this CredTemporaryToken.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this CredTemporaryToken.

        Expiration time for the token.   # noqa: E501

        :param expiration_time: The expiration_time of this CredTemporaryToken.  # noqa: E501
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def token(self):
        """Gets the token of this CredTemporaryToken.  # noqa: E501


        :return: The token of this CredTemporaryToken.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CredTemporaryToken.


        :param token: The token of this CredTemporaryToken.  # noqa: E501
        :type token: CommonSecret
        """

        self._token = token

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredTemporaryToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CredTemporaryToken):
            return True

        return self.to_dict() != other.to_dict()
