# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class DefenderDefender(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'DefenderCategory',
        'certificate_expiration': 'datetime',
        'cloud_metadata': 'CommonCloudMetadata',
        'cluster': 'str',
        'cluster_id': 'str',
        'collections': 'list[str]',
        'compatible_version': 'bool',
        'connected': 'bool',
        'features': 'DefenderFeatures',
        'firewall_protection': 'WaasProtectionStatus',
        'fqdn': 'str',
        'hostname': 'str',
        'last_modified': 'datetime',
        'port': 'int',
        'proxy': 'CommonProxySettings',
        'remote_logging_supported': 'bool',
        'remote_mgmt_supported': 'bool',
        'status': 'DefenderStatus',
        'system_info': 'DefenderSystemInfo',
        'tas_cluster_id': 'str',
        'type': 'DefenderType',
        'version': 'str'
    }

    attribute_map = {
        'category': 'category',
        'certificate_expiration': 'certificateExpiration',
        'cloud_metadata': 'cloudMetadata',
        'cluster': 'cluster',
        'cluster_id': 'clusterID',
        'collections': 'collections',
        'compatible_version': 'compatibleVersion',
        'connected': 'connected',
        'features': 'features',
        'firewall_protection': 'firewallProtection',
        'fqdn': 'fqdn',
        'hostname': 'hostname',
        'last_modified': 'lastModified',
        'port': 'port',
        'proxy': 'proxy',
        'remote_logging_supported': 'remoteLoggingSupported',
        'remote_mgmt_supported': 'remoteMgmtSupported',
        'status': 'status',
        'system_info': 'systemInfo',
        'tas_cluster_id': 'tasClusterID',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, category=None, certificate_expiration=None, cloud_metadata=None, cluster=None, cluster_id=None, collections=None, compatible_version=None, connected=None, features=None, firewall_protection=None, fqdn=None, hostname=None, last_modified=None, port=None, proxy=None, remote_logging_supported=None, remote_mgmt_supported=None, status=None, system_info=None, tas_cluster_id=None, type=None, version=None, local_vars_configuration=None):  # noqa: E501
        """DefenderDefender - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._certificate_expiration = None
        self._cloud_metadata = None
        self._cluster = None
        self._cluster_id = None
        self._collections = None
        self._compatible_version = None
        self._connected = None
        self._features = None
        self._firewall_protection = None
        self._fqdn = None
        self._hostname = None
        self._last_modified = None
        self._port = None
        self._proxy = None
        self._remote_logging_supported = None
        self._remote_mgmt_supported = None
        self._status = None
        self._system_info = None
        self._tas_cluster_id = None
        self._type = None
        self._version = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if certificate_expiration is not None:
            self.certificate_expiration = certificate_expiration
        if cloud_metadata is not None:
            self.cloud_metadata = cloud_metadata
        if cluster is not None:
            self.cluster = cluster
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if collections is not None:
            self.collections = collections
        if compatible_version is not None:
            self.compatible_version = compatible_version
        if connected is not None:
            self.connected = connected
        if features is not None:
            self.features = features
        if firewall_protection is not None:
            self.firewall_protection = firewall_protection
        if fqdn is not None:
            self.fqdn = fqdn
        if hostname is not None:
            self.hostname = hostname
        if last_modified is not None:
            self.last_modified = last_modified
        if port is not None:
            self.port = port
        if proxy is not None:
            self.proxy = proxy
        if remote_logging_supported is not None:
            self.remote_logging_supported = remote_logging_supported
        if remote_mgmt_supported is not None:
            self.remote_mgmt_supported = remote_mgmt_supported
        if status is not None:
            self.status = status
        if system_info is not None:
            self.system_info = system_info
        if tas_cluster_id is not None:
            self.tas_cluster_id = tas_cluster_id
        if type is not None:
            self.type = type
        if version is not None:
            self.version = version

    @property
    def category(self):
        """Gets the category of this DefenderDefender.  # noqa: E501


        :return: The category of this DefenderDefender.  # noqa: E501
        :rtype: DefenderCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DefenderDefender.


        :param category: The category of this DefenderDefender.  # noqa: E501
        :type category: DefenderCategory
        """

        self._category = category

    @property
    def certificate_expiration(self):
        """Gets the certificate_expiration of this DefenderDefender.  # noqa: E501

        Client certificate expiration time.   # noqa: E501

        :return: The certificate_expiration of this DefenderDefender.  # noqa: E501
        :rtype: datetime
        """
        return self._certificate_expiration

    @certificate_expiration.setter
    def certificate_expiration(self, certificate_expiration):
        """Sets the certificate_expiration of this DefenderDefender.

        Client certificate expiration time.   # noqa: E501

        :param certificate_expiration: The certificate_expiration of this DefenderDefender.  # noqa: E501
        :type certificate_expiration: datetime
        """

        self._certificate_expiration = certificate_expiration

    @property
    def cloud_metadata(self):
        """Gets the cloud_metadata of this DefenderDefender.  # noqa: E501


        :return: The cloud_metadata of this DefenderDefender.  # noqa: E501
        :rtype: CommonCloudMetadata
        """
        return self._cloud_metadata

    @cloud_metadata.setter
    def cloud_metadata(self, cloud_metadata):
        """Sets the cloud_metadata of this DefenderDefender.


        :param cloud_metadata: The cloud_metadata of this DefenderDefender.  # noqa: E501
        :type cloud_metadata: CommonCloudMetadata
        """

        self._cloud_metadata = cloud_metadata

    @property
    def cluster(self):
        """Gets the cluster of this DefenderDefender.  # noqa: E501

        Cluster name (fallback is internal IP).   # noqa: E501

        :return: The cluster of this DefenderDefender.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DefenderDefender.

        Cluster name (fallback is internal IP).   # noqa: E501

        :param cluster: The cluster of this DefenderDefender.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def cluster_id(self):
        """Gets the cluster_id of this DefenderDefender.  # noqa: E501

        Unique ID generated for each DaemonSet. Used to group Defenders by clusters. Note: Kubernetes does not provide a cluster name as part of its API.   # noqa: E501

        :return: The cluster_id of this DefenderDefender.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this DefenderDefender.

        Unique ID generated for each DaemonSet. Used to group Defenders by clusters. Note: Kubernetes does not provide a cluster name as part of its API.   # noqa: E501

        :param cluster_id: The cluster_id of this DefenderDefender.  # noqa: E501
        :type cluster_id: str
        """

        self._cluster_id = cluster_id

    @property
    def collections(self):
        """Gets the collections of this DefenderDefender.  # noqa: E501

        Collections to which this Defender belongs.   # noqa: E501

        :return: The collections of this DefenderDefender.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this DefenderDefender.

        Collections to which this Defender belongs.   # noqa: E501

        :param collections: The collections of this DefenderDefender.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def compatible_version(self):
        """Gets the compatible_version of this DefenderDefender.  # noqa: E501

        Indicates if Defender has a compatible version for communication (e.g., request logs) (true) or not (false).   # noqa: E501

        :return: The compatible_version of this DefenderDefender.  # noqa: E501
        :rtype: bool
        """
        return self._compatible_version

    @compatible_version.setter
    def compatible_version(self, compatible_version):
        """Sets the compatible_version of this DefenderDefender.

        Indicates if Defender has a compatible version for communication (e.g., request logs) (true) or not (false).   # noqa: E501

        :param compatible_version: The compatible_version of this DefenderDefender.  # noqa: E501
        :type compatible_version: bool
        """

        self._compatible_version = compatible_version

    @property
    def connected(self):
        """Gets the connected of this DefenderDefender.  # noqa: E501

        Indicates whether Defender is connected (true) or not (false).   # noqa: E501

        :return: The connected of this DefenderDefender.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this DefenderDefender.

        Indicates whether Defender is connected (true) or not (false).   # noqa: E501

        :param connected: The connected of this DefenderDefender.  # noqa: E501
        :type connected: bool
        """

        self._connected = connected

    @property
    def features(self):
        """Gets the features of this DefenderDefender.  # noqa: E501


        :return: The features of this DefenderDefender.  # noqa: E501
        :rtype: DefenderFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DefenderDefender.


        :param features: The features of this DefenderDefender.  # noqa: E501
        :type features: DefenderFeatures
        """

        self._features = features

    @property
    def firewall_protection(self):
        """Gets the firewall_protection of this DefenderDefender.  # noqa: E501


        :return: The firewall_protection of this DefenderDefender.  # noqa: E501
        :rtype: WaasProtectionStatus
        """
        return self._firewall_protection

    @firewall_protection.setter
    def firewall_protection(self, firewall_protection):
        """Sets the firewall_protection of this DefenderDefender.


        :param firewall_protection: The firewall_protection of this DefenderDefender.  # noqa: E501
        :type firewall_protection: WaasProtectionStatus
        """

        self._firewall_protection = firewall_protection

    @property
    def fqdn(self):
        """Gets the fqdn of this DefenderDefender.  # noqa: E501

        Full domain name of the host. Used in audit alerts to identify specific hosts.   # noqa: E501

        :return: The fqdn of this DefenderDefender.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this DefenderDefender.

        Full domain name of the host. Used in audit alerts to identify specific hosts.   # noqa: E501

        :param fqdn: The fqdn of this DefenderDefender.  # noqa: E501
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def hostname(self):
        """Gets the hostname of this DefenderDefender.  # noqa: E501

        Name of host where Defender is deployed.   # noqa: E501

        :return: The hostname of this DefenderDefender.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DefenderDefender.

        Name of host where Defender is deployed.   # noqa: E501

        :param hostname: The hostname of this DefenderDefender.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def last_modified(self):
        """Gets the last_modified of this DefenderDefender.  # noqa: E501

        Datetime when the Defender's connectivity status last changed.   # noqa: E501

        :return: The last_modified of this DefenderDefender.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DefenderDefender.

        Datetime when the Defender's connectivity status last changed.   # noqa: E501

        :param last_modified: The last_modified of this DefenderDefender.  # noqa: E501
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def port(self):
        """Gets the port of this DefenderDefender.  # noqa: E501

        Port that Defender uses to connect to Console.   # noqa: E501

        :return: The port of this DefenderDefender.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DefenderDefender.

        Port that Defender uses to connect to Console.   # noqa: E501

        :param port: The port of this DefenderDefender.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def proxy(self):
        """Gets the proxy of this DefenderDefender.  # noqa: E501


        :return: The proxy of this DefenderDefender.  # noqa: E501
        :rtype: CommonProxySettings
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this DefenderDefender.


        :param proxy: The proxy of this DefenderDefender.  # noqa: E501
        :type proxy: CommonProxySettings
        """

        self._proxy = proxy

    @property
    def remote_logging_supported(self):
        """Gets the remote_logging_supported of this DefenderDefender.  # noqa: E501

        Indicates if Defender logs can be retrieved remotely (true) or not (false).   # noqa: E501

        :return: The remote_logging_supported of this DefenderDefender.  # noqa: E501
        :rtype: bool
        """
        return self._remote_logging_supported

    @remote_logging_supported.setter
    def remote_logging_supported(self, remote_logging_supported):
        """Sets the remote_logging_supported of this DefenderDefender.

        Indicates if Defender logs can be retrieved remotely (true) or not (false).   # noqa: E501

        :param remote_logging_supported: The remote_logging_supported of this DefenderDefender.  # noqa: E501
        :type remote_logging_supported: bool
        """

        self._remote_logging_supported = remote_logging_supported

    @property
    def remote_mgmt_supported(self):
        """Gets the remote_mgmt_supported of this DefenderDefender.  # noqa: E501

        Indicates if Defender can be remotely managed (upgraded, restarted) (true) or not (false).   # noqa: E501

        :return: The remote_mgmt_supported of this DefenderDefender.  # noqa: E501
        :rtype: bool
        """
        return self._remote_mgmt_supported

    @remote_mgmt_supported.setter
    def remote_mgmt_supported(self, remote_mgmt_supported):
        """Sets the remote_mgmt_supported of this DefenderDefender.

        Indicates if Defender can be remotely managed (upgraded, restarted) (true) or not (false).   # noqa: E501

        :param remote_mgmt_supported: The remote_mgmt_supported of this DefenderDefender.  # noqa: E501
        :type remote_mgmt_supported: bool
        """

        self._remote_mgmt_supported = remote_mgmt_supported

    @property
    def status(self):
        """Gets the status of this DefenderDefender.  # noqa: E501


        :return: The status of this DefenderDefender.  # noqa: E501
        :rtype: DefenderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DefenderDefender.


        :param status: The status of this DefenderDefender.  # noqa: E501
        :type status: DefenderStatus
        """

        self._status = status

    @property
    def system_info(self):
        """Gets the system_info of this DefenderDefender.  # noqa: E501


        :return: The system_info of this DefenderDefender.  # noqa: E501
        :rtype: DefenderSystemInfo
        """
        return self._system_info

    @system_info.setter
    def system_info(self, system_info):
        """Sets the system_info of this DefenderDefender.


        :param system_info: The system_info of this DefenderDefender.  # noqa: E501
        :type system_info: DefenderSystemInfo
        """

        self._system_info = system_info

    @property
    def tas_cluster_id(self):
        """Gets the tas_cluster_id of this DefenderDefender.  # noqa: E501

        TAS cluster ID where Defender runs. This is typically set to the Cloud controller's API address.   # noqa: E501

        :return: The tas_cluster_id of this DefenderDefender.  # noqa: E501
        :rtype: str
        """
        return self._tas_cluster_id

    @tas_cluster_id.setter
    def tas_cluster_id(self, tas_cluster_id):
        """Sets the tas_cluster_id of this DefenderDefender.

        TAS cluster ID where Defender runs. This is typically set to the Cloud controller's API address.   # noqa: E501

        :param tas_cluster_id: The tas_cluster_id of this DefenderDefender.  # noqa: E501
        :type tas_cluster_id: str
        """

        self._tas_cluster_id = tas_cluster_id

    @property
    def type(self):
        """Gets the type of this DefenderDefender.  # noqa: E501


        :return: The type of this DefenderDefender.  # noqa: E501
        :rtype: DefenderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DefenderDefender.


        :param type: The type of this DefenderDefender.  # noqa: E501
        :type type: DefenderType
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this DefenderDefender.  # noqa: E501

        Defender version.   # noqa: E501

        :return: The version of this DefenderDefender.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DefenderDefender.

        Defender version.   # noqa: E501

        :param version: The version of this DefenderDefender.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefenderDefender):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefenderDefender):
            return True

        return self.to_dict() != other.to_dict()
