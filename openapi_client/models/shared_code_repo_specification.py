# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedCodeRepoSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credential_id': 'str',
        'excluded_manifest_paths': 'list[str]',
        'explicit_manifest_names': 'list[str]',
        'public_only': 'bool',
        'repositories': 'list[str]',
        'target_python_version': 'str',
        'type': 'SharedCodeRepoProviderType'
    }

    attribute_map = {
        'credential_id': 'credentialID',
        'excluded_manifest_paths': 'excludedManifestPaths',
        'explicit_manifest_names': 'explicitManifestNames',
        'public_only': 'publicOnly',
        'repositories': 'repositories',
        'target_python_version': 'targetPythonVersion',
        'type': 'type'
    }

    def __init__(self, credential_id=None, excluded_manifest_paths=None, explicit_manifest_names=None, public_only=None, repositories=None, target_python_version=None, type=None, local_vars_configuration=None):  # noqa: E501
        """SharedCodeRepoSpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._credential_id = None
        self._excluded_manifest_paths = None
        self._explicit_manifest_names = None
        self._public_only = None
        self._repositories = None
        self._target_python_version = None
        self._type = None
        self.discriminator = None

        if credential_id is not None:
            self.credential_id = credential_id
        if excluded_manifest_paths is not None:
            self.excluded_manifest_paths = excluded_manifest_paths
        if explicit_manifest_names is not None:
            self.explicit_manifest_names = explicit_manifest_names
        if public_only is not None:
            self.public_only = public_only
        if repositories is not None:
            self.repositories = repositories
        if target_python_version is not None:
            self.target_python_version = target_python_version
        if type is not None:
            self.type = type

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedCodeRepoSpecification.  # noqa: E501

        ID of the credentials in the credentials store to use for authenticating with the code repo service provider.   # noqa: E501

        :return: The credential_id of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedCodeRepoSpecification.

        ID of the credentials in the credentials store to use for authenticating with the code repo service provider.   # noqa: E501

        :param credential_id: The credential_id of this SharedCodeRepoSpecification.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def excluded_manifest_paths(self):
        """Gets the excluded_manifest_paths of this SharedCodeRepoSpecification.  # noqa: E501

        Paths in the repository the scanner ignores when looking for manifest files to evaluate.   # noqa: E501

        :return: The excluded_manifest_paths of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_manifest_paths

    @excluded_manifest_paths.setter
    def excluded_manifest_paths(self, excluded_manifest_paths):
        """Sets the excluded_manifest_paths of this SharedCodeRepoSpecification.

        Paths in the repository the scanner ignores when looking for manifest files to evaluate.   # noqa: E501

        :param excluded_manifest_paths: The excluded_manifest_paths of this SharedCodeRepoSpecification.  # noqa: E501
        :type excluded_manifest_paths: list[str]
        """

        self._excluded_manifest_paths = excluded_manifest_paths

    @property
    def explicit_manifest_names(self):
        """Gets the explicit_manifest_names of this SharedCodeRepoSpecification.  # noqa: E501

        Additional manifest files for the scanner to evaluate. Explicitly specify manifest filenames when you use non-standard naming schemes. (e.g., prod-requirements.txt).   # noqa: E501

        :return: The explicit_manifest_names of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._explicit_manifest_names

    @explicit_manifest_names.setter
    def explicit_manifest_names(self, explicit_manifest_names):
        """Sets the explicit_manifest_names of this SharedCodeRepoSpecification.

        Additional manifest files for the scanner to evaluate. Explicitly specify manifest filenames when you use non-standard naming schemes. (e.g., prod-requirements.txt).   # noqa: E501

        :param explicit_manifest_names: The explicit_manifest_names of this SharedCodeRepoSpecification.  # noqa: E501
        :type explicit_manifest_names: list[str]
        """

        self._explicit_manifest_names = explicit_manifest_names

    @property
    def public_only(self):
        """Gets the public_only of this SharedCodeRepoSpecification.  # noqa: E501

        Indicates whether this specification is meant for (unauthenticated) public-only scanning (true) or private as well (false).   # noqa: E501

        :return: The public_only of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._public_only

    @public_only.setter
    def public_only(self, public_only):
        """Sets the public_only of this SharedCodeRepoSpecification.

        Indicates whether this specification is meant for (unauthenticated) public-only scanning (true) or private as well (false).   # noqa: E501

        :param public_only: The public_only of this SharedCodeRepoSpecification.  # noqa: E501
        :type public_only: bool
        """

        self._public_only = public_only

    @property
    def repositories(self):
        """Gets the repositories of this SharedCodeRepoSpecification.  # noqa: E501

        Repository names to scan. The format is <owner>/<repo_name>.   # noqa: E501

        :return: The repositories of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this SharedCodeRepoSpecification.

        Repository names to scan. The format is <owner>/<repo_name>.   # noqa: E501

        :param repositories: The repositories of this SharedCodeRepoSpecification.  # noqa: E501
        :type repositories: list[str]
        """

        self._repositories = repositories

    @property
    def target_python_version(self):
        """Gets the target_python_version of this SharedCodeRepoSpecification.  # noqa: E501

        Python version to consider when resolving Python dependencies. The default value is the latest version.   # noqa: E501

        :return: The target_python_version of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: str
        """
        return self._target_python_version

    @target_python_version.setter
    def target_python_version(self, target_python_version):
        """Sets the target_python_version of this SharedCodeRepoSpecification.

        Python version to consider when resolving Python dependencies. The default value is the latest version.   # noqa: E501

        :param target_python_version: The target_python_version of this SharedCodeRepoSpecification.  # noqa: E501
        :type target_python_version: str
        """

        self._target_python_version = target_python_version

    @property
    def type(self):
        """Gets the type of this SharedCodeRepoSpecification.  # noqa: E501


        :return: The type of this SharedCodeRepoSpecification.  # noqa: E501
        :rtype: SharedCodeRepoProviderType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedCodeRepoSpecification.


        :param type: The type of this SharedCodeRepoSpecification.  # noqa: E501
        :type type: SharedCodeRepoProviderType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedCodeRepoSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedCodeRepoSpecification):
            return True

        return self.to_dict() != other.to_dict()
