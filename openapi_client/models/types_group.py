# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'group_id': 'str',
        'group_name': 'str',
        'last_modified': 'datetime',
        'ldap_group': 'bool',
        'oauth_group': 'bool',
        'oidc_group': 'bool',
        'owner': 'str',
        'permissions': 'list[ApiPermission]',
        'role': 'str',
        'saml_group': 'bool',
        'user': 'list[SharedUser]'
    }

    attribute_map = {
        'id': '_id',
        'group_id': 'groupId',
        'group_name': 'groupName',
        'last_modified': 'lastModified',
        'ldap_group': 'ldapGroup',
        'oauth_group': 'oauthGroup',
        'oidc_group': 'oidcGroup',
        'owner': 'owner',
        'permissions': 'permissions',
        'role': 'role',
        'saml_group': 'samlGroup',
        'user': 'user'
    }

    def __init__(self, id=None, group_id=None, group_name=None, last_modified=None, ldap_group=None, oauth_group=None, oidc_group=None, owner=None, permissions=None, role=None, saml_group=None, user=None, local_vars_configuration=None):  # noqa: E501
        """TypesGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._group_id = None
        self._group_name = None
        self._last_modified = None
        self._ldap_group = None
        self._oauth_group = None
        self._oidc_group = None
        self._owner = None
        self._permissions = None
        self._role = None
        self._saml_group = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if last_modified is not None:
            self.last_modified = last_modified
        if ldap_group is not None:
            self.ldap_group = ldap_group
        if oauth_group is not None:
            self.oauth_group = oauth_group
        if oidc_group is not None:
            self.oidc_group = oidc_group
        if owner is not None:
            self.owner = owner
        if permissions is not None:
            self.permissions = permissions
        if role is not None:
            self.role = role
        if saml_group is not None:
            self.saml_group = saml_group
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this TypesGroup.  # noqa: E501

        Group name.   # noqa: E501

        :return: The id of this TypesGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesGroup.

        Group name.   # noqa: E501

        :param id: The id of this TypesGroup.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this TypesGroup.  # noqa: E501

        Group identifier in the Azure SAML identification process.   # noqa: E501

        :return: The group_id of this TypesGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this TypesGroup.

        Group identifier in the Azure SAML identification process.   # noqa: E501

        :param group_id: The group_id of this TypesGroup.  # noqa: E501
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this TypesGroup.  # noqa: E501

        Group name.   # noqa: E501

        :return: The group_name of this TypesGroup.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this TypesGroup.

        Group name.   # noqa: E501

        :param group_name: The group_name of this TypesGroup.  # noqa: E501
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def last_modified(self):
        """Gets the last_modified of this TypesGroup.  # noqa: E501

        Datetime when the group was created or last modified.   # noqa: E501

        :return: The last_modified of this TypesGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this TypesGroup.

        Datetime when the group was created or last modified.   # noqa: E501

        :param last_modified: The last_modified of this TypesGroup.  # noqa: E501
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def ldap_group(self):
        """Gets the ldap_group of this TypesGroup.  # noqa: E501

        Indicates if the group is an LDAP group (true) or not (false).   # noqa: E501

        :return: The ldap_group of this TypesGroup.  # noqa: E501
        :rtype: bool
        """
        return self._ldap_group

    @ldap_group.setter
    def ldap_group(self, ldap_group):
        """Sets the ldap_group of this TypesGroup.

        Indicates if the group is an LDAP group (true) or not (false).   # noqa: E501

        :param ldap_group: The ldap_group of this TypesGroup.  # noqa: E501
        :type ldap_group: bool
        """

        self._ldap_group = ldap_group

    @property
    def oauth_group(self):
        """Gets the oauth_group of this TypesGroup.  # noqa: E501

        Indicates if the group is an OAuth group (true) or not (false).   # noqa: E501

        :return: The oauth_group of this TypesGroup.  # noqa: E501
        :rtype: bool
        """
        return self._oauth_group

    @oauth_group.setter
    def oauth_group(self, oauth_group):
        """Sets the oauth_group of this TypesGroup.

        Indicates if the group is an OAuth group (true) or not (false).   # noqa: E501

        :param oauth_group: The oauth_group of this TypesGroup.  # noqa: E501
        :type oauth_group: bool
        """

        self._oauth_group = oauth_group

    @property
    def oidc_group(self):
        """Gets the oidc_group of this TypesGroup.  # noqa: E501

        Indicates if the group is an OpenID Connect group (true) or not (false).   # noqa: E501

        :return: The oidc_group of this TypesGroup.  # noqa: E501
        :rtype: bool
        """
        return self._oidc_group

    @oidc_group.setter
    def oidc_group(self, oidc_group):
        """Sets the oidc_group of this TypesGroup.

        Indicates if the group is an OpenID Connect group (true) or not (false).   # noqa: E501

        :param oidc_group: The oidc_group of this TypesGroup.  # noqa: E501
        :type oidc_group: bool
        """

        self._oidc_group = oidc_group

    @property
    def owner(self):
        """Gets the owner of this TypesGroup.  # noqa: E501

        User who created or modified the group.   # noqa: E501

        :return: The owner of this TypesGroup.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TypesGroup.

        User who created or modified the group.   # noqa: E501

        :param owner: The owner of this TypesGroup.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def permissions(self):
        """Gets the permissions of this TypesGroup.  # noqa: E501

        Permissions is a list of permissions  # noqa: E501

        :return: The permissions of this TypesGroup.  # noqa: E501
        :rtype: list[ApiPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this TypesGroup.

        Permissions is a list of permissions  # noqa: E501

        :param permissions: The permissions of this TypesGroup.  # noqa: E501
        :type permissions: list[ApiPermission]
        """

        self._permissions = permissions

    @property
    def role(self):
        """Gets the role of this TypesGroup.  # noqa: E501

        Role of the group.   # noqa: E501

        :return: The role of this TypesGroup.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TypesGroup.

        Role of the group.   # noqa: E501

        :param role: The role of this TypesGroup.  # noqa: E501
        :type role: str
        """

        self._role = role

    @property
    def saml_group(self):
        """Gets the saml_group of this TypesGroup.  # noqa: E501

        Indicates if the group is a SAML group (true) or not (false).   # noqa: E501

        :return: The saml_group of this TypesGroup.  # noqa: E501
        :rtype: bool
        """
        return self._saml_group

    @saml_group.setter
    def saml_group(self, saml_group):
        """Sets the saml_group of this TypesGroup.

        Indicates if the group is a SAML group (true) or not (false).   # noqa: E501

        :param saml_group: The saml_group of this TypesGroup.  # noqa: E501
        :type saml_group: bool
        """

        self._saml_group = saml_group

    @property
    def user(self):
        """Gets the user of this TypesGroup.  # noqa: E501

        Users in the group.   # noqa: E501

        :return: The user of this TypesGroup.  # noqa: E501
        :rtype: list[SharedUser]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TypesGroup.

        Users in the group.   # noqa: E501

        :param user: The user of this TypesGroup.  # noqa: E501
        :type user: list[SharedUser]
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesGroup):
            return True

        return self.to_dict() != other.to_dict()
