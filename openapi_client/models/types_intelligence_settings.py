# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesIntelligenceSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'custom_endpoint': 'str',
        'custom_endpoint_ca_cert': 'str',
        'custom_endpoint_credential_id': 'str',
        'custom_endpoint_enabled': 'bool',
        'enabled': 'bool',
        'token': 'str',
        'upload_disabled': 'bool',
        'windows_feed_enabled': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'custom_endpoint': 'customEndpoint',
        'custom_endpoint_ca_cert': 'customEndpointCACert',
        'custom_endpoint_credential_id': 'customEndpointCredentialID',
        'custom_endpoint_enabled': 'customEndpointEnabled',
        'enabled': 'enabled',
        'token': 'token',
        'upload_disabled': 'uploadDisabled',
        'windows_feed_enabled': 'windowsFeedEnabled'
    }

    def __init__(self, address=None, custom_endpoint=None, custom_endpoint_ca_cert=None, custom_endpoint_credential_id=None, custom_endpoint_enabled=None, enabled=None, token=None, upload_disabled=None, windows_feed_enabled=None, local_vars_configuration=None):  # noqa: E501
        """TypesIntelligenceSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._custom_endpoint = None
        self._custom_endpoint_ca_cert = None
        self._custom_endpoint_credential_id = None
        self._custom_endpoint_enabled = None
        self._enabled = None
        self._token = None
        self._upload_disabled = None
        self._windows_feed_enabled = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if custom_endpoint is not None:
            self.custom_endpoint = custom_endpoint
        if custom_endpoint_ca_cert is not None:
            self.custom_endpoint_ca_cert = custom_endpoint_ca_cert
        if custom_endpoint_credential_id is not None:
            self.custom_endpoint_credential_id = custom_endpoint_credential_id
        if custom_endpoint_enabled is not None:
            self.custom_endpoint_enabled = custom_endpoint_enabled
        if enabled is not None:
            self.enabled = enabled
        if token is not None:
            self.token = token
        if upload_disabled is not None:
            self.upload_disabled = upload_disabled
        if windows_feed_enabled is not None:
            self.windows_feed_enabled = windows_feed_enabled

    @property
    def address(self):
        """Gets the address of this TypesIntelligenceSettings.  # noqa: E501

        Address is the intelligence service address.   # noqa: E501

        :return: The address of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TypesIntelligenceSettings.

        Address is the intelligence service address.   # noqa: E501

        :param address: The address of this TypesIntelligenceSettings.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def custom_endpoint(self):
        """Gets the custom_endpoint of this TypesIntelligenceSettings.  # noqa: E501

        CustomEndpoint is the user defined custom endpoint.   # noqa: E501

        :return: The custom_endpoint of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: str
        """
        return self._custom_endpoint

    @custom_endpoint.setter
    def custom_endpoint(self, custom_endpoint):
        """Sets the custom_endpoint of this TypesIntelligenceSettings.

        CustomEndpoint is the user defined custom endpoint.   # noqa: E501

        :param custom_endpoint: The custom_endpoint of this TypesIntelligenceSettings.  # noqa: E501
        :type custom_endpoint: str
        """

        self._custom_endpoint = custom_endpoint

    @property
    def custom_endpoint_ca_cert(self):
        """Gets the custom_endpoint_ca_cert of this TypesIntelligenceSettings.  # noqa: E501

        CustomEndpointCACert is the custom CA cert bundle for trusting the custom endpoint.   # noqa: E501

        :return: The custom_endpoint_ca_cert of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: str
        """
        return self._custom_endpoint_ca_cert

    @custom_endpoint_ca_cert.setter
    def custom_endpoint_ca_cert(self, custom_endpoint_ca_cert):
        """Sets the custom_endpoint_ca_cert of this TypesIntelligenceSettings.

        CustomEndpointCACert is the custom CA cert bundle for trusting the custom endpoint.   # noqa: E501

        :param custom_endpoint_ca_cert: The custom_endpoint_ca_cert of this TypesIntelligenceSettings.  # noqa: E501
        :type custom_endpoint_ca_cert: str
        """

        self._custom_endpoint_ca_cert = custom_endpoint_ca_cert

    @property
    def custom_endpoint_credential_id(self):
        """Gets the custom_endpoint_credential_id of this TypesIntelligenceSettings.  # noqa: E501

        CustomEndpointCredentialID is the custom endpoint credential ID.   # noqa: E501

        :return: The custom_endpoint_credential_id of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: str
        """
        return self._custom_endpoint_credential_id

    @custom_endpoint_credential_id.setter
    def custom_endpoint_credential_id(self, custom_endpoint_credential_id):
        """Sets the custom_endpoint_credential_id of this TypesIntelligenceSettings.

        CustomEndpointCredentialID is the custom endpoint credential ID.   # noqa: E501

        :param custom_endpoint_credential_id: The custom_endpoint_credential_id of this TypesIntelligenceSettings.  # noqa: E501
        :type custom_endpoint_credential_id: str
        """

        self._custom_endpoint_credential_id = custom_endpoint_credential_id

    @property
    def custom_endpoint_enabled(self):
        """Gets the custom_endpoint_enabled of this TypesIntelligenceSettings.  # noqa: E501

        CustomEndpointEnabled indicates that the user custom endpoint is enabled.   # noqa: E501

        :return: The custom_endpoint_enabled of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._custom_endpoint_enabled

    @custom_endpoint_enabled.setter
    def custom_endpoint_enabled(self, custom_endpoint_enabled):
        """Sets the custom_endpoint_enabled of this TypesIntelligenceSettings.

        CustomEndpointEnabled indicates that the user custom endpoint is enabled.   # noqa: E501

        :param custom_endpoint_enabled: The custom_endpoint_enabled of this TypesIntelligenceSettings.  # noqa: E501
        :type custom_endpoint_enabled: bool
        """

        self._custom_endpoint_enabled = custom_endpoint_enabled

    @property
    def enabled(self):
        """Gets the enabled of this TypesIntelligenceSettings.  # noqa: E501

        Enabled indicates whether intelligence service is enabled.   # noqa: E501

        :return: The enabled of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TypesIntelligenceSettings.

        Enabled indicates whether intelligence service is enabled.   # noqa: E501

        :param enabled: The enabled of this TypesIntelligenceSettings.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def token(self):
        """Gets the token of this TypesIntelligenceSettings.  # noqa: E501

        Token is the token used to access intelligence service.   # noqa: E501

        :return: The token of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TypesIntelligenceSettings.

        Token is the token used to access intelligence service.   # noqa: E501

        :param token: The token of this TypesIntelligenceSettings.  # noqa: E501
        :type token: str
        """

        self._token = token

    @property
    def upload_disabled(self):
        """Gets the upload_disabled of this TypesIntelligenceSettings.  # noqa: E501

        UploadDisabled indicates whether logs uploading is disabled.   # noqa: E501

        :return: The upload_disabled of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._upload_disabled

    @upload_disabled.setter
    def upload_disabled(self, upload_disabled):
        """Sets the upload_disabled of this TypesIntelligenceSettings.

        UploadDisabled indicates whether logs uploading is disabled.   # noqa: E501

        :param upload_disabled: The upload_disabled of this TypesIntelligenceSettings.  # noqa: E501
        :type upload_disabled: bool
        """

        self._upload_disabled = upload_disabled

    @property
    def windows_feed_enabled(self):
        """Gets the windows_feed_enabled of this TypesIntelligenceSettings.  # noqa: E501

        WindowsFeedEnabled indicates whether windows feed is enabled.   # noqa: E501

        :return: The windows_feed_enabled of this TypesIntelligenceSettings.  # noqa: E501
        :rtype: bool
        """
        return self._windows_feed_enabled

    @windows_feed_enabled.setter
    def windows_feed_enabled(self, windows_feed_enabled):
        """Sets the windows_feed_enabled of this TypesIntelligenceSettings.

        WindowsFeedEnabled indicates whether windows feed is enabled.   # noqa: E501

        :param windows_feed_enabled: The windows_feed_enabled of this TypesIntelligenceSettings.  # noqa: E501
        :type windows_feed_enabled: bool
        """

        self._windows_feed_enabled = windows_feed_enabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesIntelligenceSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesIntelligenceSettings):
            return True

        return self.to_dict() != other.to_dict()
