# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedImage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created': 'datetime',
        'entrypoint': 'list[str]',
        'env': 'list[str]',
        'healthcheck': 'bool',
        'history': 'list[SharedImageHistory]',
        'id': 'str',
        'labels': 'dict(str, str)',
        'layers': 'list[str]',
        'os': 'str',
        'repo_digest': 'list[str]',
        'repo_tags': 'list[str]',
        'user': 'str',
        'working_dir': 'str'
    }

    attribute_map = {
        'created': 'created',
        'entrypoint': 'entrypoint',
        'env': 'env',
        'healthcheck': 'healthcheck',
        'history': 'history',
        'id': 'id',
        'labels': 'labels',
        'layers': 'layers',
        'os': 'os',
        'repo_digest': 'repoDigest',
        'repo_tags': 'repoTags',
        'user': 'user',
        'working_dir': 'workingDir'
    }

    def __init__(self, created=None, entrypoint=None, env=None, healthcheck=None, history=None, id=None, labels=None, layers=None, os=None, repo_digest=None, repo_tags=None, user=None, working_dir=None, local_vars_configuration=None):  # noqa: E501
        """SharedImage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created = None
        self._entrypoint = None
        self._env = None
        self._healthcheck = None
        self._history = None
        self._id = None
        self._labels = None
        self._layers = None
        self._os = None
        self._repo_digest = None
        self._repo_tags = None
        self._user = None
        self._working_dir = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if healthcheck is not None:
            self.healthcheck = healthcheck
        if history is not None:
            self.history = history
        if id is not None:
            self.id = id
        if labels is not None:
            self.labels = labels
        if layers is not None:
            self.layers = layers
        if os is not None:
            self.os = os
        if repo_digest is not None:
            self.repo_digest = repo_digest
        if repo_tags is not None:
            self.repo_tags = repo_tags
        if user is not None:
            self.user = user
        if working_dir is not None:
            self.working_dir = working_dir

    @property
    def created(self):
        """Gets the created of this SharedImage.  # noqa: E501

        Date/time when the image was created.   # noqa: E501

        :return: The created of this SharedImage.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SharedImage.

        Date/time when the image was created.   # noqa: E501

        :param created: The created of this SharedImage.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def entrypoint(self):
        """Gets the entrypoint of this SharedImage.  # noqa: E501

        Combined entrypoint of the image (entrypoint + CMD).   # noqa: E501

        :return: The entrypoint of this SharedImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint):
        """Sets the entrypoint of this SharedImage.

        Combined entrypoint of the image (entrypoint + CMD).   # noqa: E501

        :param entrypoint: The entrypoint of this SharedImage.  # noqa: E501
        :type entrypoint: list[str]
        """

        self._entrypoint = entrypoint

    @property
    def env(self):
        """Gets the env of this SharedImage.  # noqa: E501

        Image environment variables.   # noqa: E501

        :return: The env of this SharedImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this SharedImage.

        Image environment variables.   # noqa: E501

        :param env: The env of this SharedImage.  # noqa: E501
        :type env: list[str]
        """

        self._env = env

    @property
    def healthcheck(self):
        """Gets the healthcheck of this SharedImage.  # noqa: E501

        Indicates if health checks are enabled (true) or not (false).   # noqa: E501

        :return: The healthcheck of this SharedImage.  # noqa: E501
        :rtype: bool
        """
        return self._healthcheck

    @healthcheck.setter
    def healthcheck(self, healthcheck):
        """Sets the healthcheck of this SharedImage.

        Indicates if health checks are enabled (true) or not (false).   # noqa: E501

        :param healthcheck: The healthcheck of this SharedImage.  # noqa: E501
        :type healthcheck: bool
        """

        self._healthcheck = healthcheck

    @property
    def history(self):
        """Gets the history of this SharedImage.  # noqa: E501

        Holds the image history.   # noqa: E501

        :return: The history of this SharedImage.  # noqa: E501
        :rtype: list[SharedImageHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this SharedImage.

        Holds the image history.   # noqa: E501

        :param history: The history of this SharedImage.  # noqa: E501
        :type history: list[SharedImageHistory]
        """

        self._history = history

    @property
    def id(self):
        """Gets the id of this SharedImage.  # noqa: E501

        ID of the image.   # noqa: E501

        :return: The id of this SharedImage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedImage.

        ID of the image.   # noqa: E501

        :param id: The id of this SharedImage.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this SharedImage.  # noqa: E501

        Image labels.   # noqa: E501

        :return: The labels of this SharedImage.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SharedImage.

        Image labels.   # noqa: E501

        :param labels: The labels of this SharedImage.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def layers(self):
        """Gets the layers of this SharedImage.  # noqa: E501

        Image filesystem layers.   # noqa: E501

        :return: The layers of this SharedImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this SharedImage.

        Image filesystem layers.   # noqa: E501

        :param layers: The layers of this SharedImage.  # noqa: E501
        :type layers: list[str]
        """

        self._layers = layers

    @property
    def os(self):
        """Gets the os of this SharedImage.  # noqa: E501

        Image os type.   # noqa: E501

        :return: The os of this SharedImage.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SharedImage.

        Image os type.   # noqa: E501

        :param os: The os of this SharedImage.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def repo_digest(self):
        """Gets the repo_digest of this SharedImage.  # noqa: E501

        Image repo digests.   # noqa: E501

        :return: The repo_digest of this SharedImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_digest

    @repo_digest.setter
    def repo_digest(self, repo_digest):
        """Sets the repo_digest of this SharedImage.

        Image repo digests.   # noqa: E501

        :param repo_digest: The repo_digest of this SharedImage.  # noqa: E501
        :type repo_digest: list[str]
        """

        self._repo_digest = repo_digest

    @property
    def repo_tags(self):
        """Gets the repo_tags of this SharedImage.  # noqa: E501

        Image repo tags.   # noqa: E501

        :return: The repo_tags of this SharedImage.  # noqa: E501
        :rtype: list[str]
        """
        return self._repo_tags

    @repo_tags.setter
    def repo_tags(self, repo_tags):
        """Sets the repo_tags of this SharedImage.

        Image repo tags.   # noqa: E501

        :param repo_tags: The repo_tags of this SharedImage.  # noqa: E501
        :type repo_tags: list[str]
        """

        self._repo_tags = repo_tags

    @property
    def user(self):
        """Gets the user of this SharedImage.  # noqa: E501

        Image user.   # noqa: E501

        :return: The user of this SharedImage.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SharedImage.

        Image user.   # noqa: E501

        :param user: The user of this SharedImage.  # noqa: E501
        :type user: str
        """

        self._user = user

    @property
    def working_dir(self):
        """Gets the working_dir of this SharedImage.  # noqa: E501

        Base working directory of the image.   # noqa: E501

        :return: The working_dir of this SharedImage.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this SharedImage.

        Base working directory of the image.   # noqa: E501

        :param working_dir: The working_dir of this SharedImage.  # noqa: E501
        :type working_dir: str
        """

        self._working_dir = working_dir

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedImage):
            return True

        return self.to_dict() != other.to_dict()
