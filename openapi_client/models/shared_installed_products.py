# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedInstalledProducts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'apache': 'str',
        'aws_cloud': 'bool',
        'crio': 'bool',
        'docker': 'str',
        'docker_enterprise': 'bool',
        'has_package_manager': 'bool',
        'k8s_api_server': 'bool',
        'k8s_controller_manager': 'bool',
        'k8s_etcd': 'bool',
        'k8s_federation_api_server': 'bool',
        'k8s_federation_controller_manager': 'bool',
        'k8s_kubelet': 'bool',
        'k8s_proxy': 'bool',
        'k8s_scheduler': 'bool',
        'kubernetes': 'str',
        'openshift': 'bool',
        'os_distro': 'str',
        'serverless': 'bool',
        'swarm_manager': 'bool',
        'swarm_node': 'bool'
    }

    attribute_map = {
        'apache': 'apache',
        'aws_cloud': 'awsCloud',
        'crio': 'crio',
        'docker': 'docker',
        'docker_enterprise': 'dockerEnterprise',
        'has_package_manager': 'hasPackageManager',
        'k8s_api_server': 'k8sApiServer',
        'k8s_controller_manager': 'k8sControllerManager',
        'k8s_etcd': 'k8sEtcd',
        'k8s_federation_api_server': 'k8sFederationApiServer',
        'k8s_federation_controller_manager': 'k8sFederationControllerManager',
        'k8s_kubelet': 'k8sKubelet',
        'k8s_proxy': 'k8sProxy',
        'k8s_scheduler': 'k8sScheduler',
        'kubernetes': 'kubernetes',
        'openshift': 'openshift',
        'os_distro': 'osDistro',
        'serverless': 'serverless',
        'swarm_manager': 'swarmManager',
        'swarm_node': 'swarmNode'
    }

    def __init__(self, apache=None, aws_cloud=None, crio=None, docker=None, docker_enterprise=None, has_package_manager=None, k8s_api_server=None, k8s_controller_manager=None, k8s_etcd=None, k8s_federation_api_server=None, k8s_federation_controller_manager=None, k8s_kubelet=None, k8s_proxy=None, k8s_scheduler=None, kubernetes=None, openshift=None, os_distro=None, serverless=None, swarm_manager=None, swarm_node=None, local_vars_configuration=None):  # noqa: E501
        """SharedInstalledProducts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._apache = None
        self._aws_cloud = None
        self._crio = None
        self._docker = None
        self._docker_enterprise = None
        self._has_package_manager = None
        self._k8s_api_server = None
        self._k8s_controller_manager = None
        self._k8s_etcd = None
        self._k8s_federation_api_server = None
        self._k8s_federation_controller_manager = None
        self._k8s_kubelet = None
        self._k8s_proxy = None
        self._k8s_scheduler = None
        self._kubernetes = None
        self._openshift = None
        self._os_distro = None
        self._serverless = None
        self._swarm_manager = None
        self._swarm_node = None
        self.discriminator = None

        if apache is not None:
            self.apache = apache
        if aws_cloud is not None:
            self.aws_cloud = aws_cloud
        if crio is not None:
            self.crio = crio
        if docker is not None:
            self.docker = docker
        if docker_enterprise is not None:
            self.docker_enterprise = docker_enterprise
        if has_package_manager is not None:
            self.has_package_manager = has_package_manager
        if k8s_api_server is not None:
            self.k8s_api_server = k8s_api_server
        if k8s_controller_manager is not None:
            self.k8s_controller_manager = k8s_controller_manager
        if k8s_etcd is not None:
            self.k8s_etcd = k8s_etcd
        if k8s_federation_api_server is not None:
            self.k8s_federation_api_server = k8s_federation_api_server
        if k8s_federation_controller_manager is not None:
            self.k8s_federation_controller_manager = k8s_federation_controller_manager
        if k8s_kubelet is not None:
            self.k8s_kubelet = k8s_kubelet
        if k8s_proxy is not None:
            self.k8s_proxy = k8s_proxy
        if k8s_scheduler is not None:
            self.k8s_scheduler = k8s_scheduler
        if kubernetes is not None:
            self.kubernetes = kubernetes
        if openshift is not None:
            self.openshift = openshift
        if os_distro is not None:
            self.os_distro = os_distro
        if serverless is not None:
            self.serverless = serverless
        if swarm_manager is not None:
            self.swarm_manager = swarm_manager
        if swarm_node is not None:
            self.swarm_node = swarm_node

    @property
    def apache(self):
        """Gets the apache of this SharedInstalledProducts.  # noqa: E501

        Apache indicates the apache server version, empty in case apache not running.   # noqa: E501

        :return: The apache of this SharedInstalledProducts.  # noqa: E501
        :rtype: str
        """
        return self._apache

    @apache.setter
    def apache(self, apache):
        """Sets the apache of this SharedInstalledProducts.

        Apache indicates the apache server version, empty in case apache not running.   # noqa: E501

        :param apache: The apache of this SharedInstalledProducts.  # noqa: E501
        :type apache: str
        """

        self._apache = apache

    @property
    def aws_cloud(self):
        """Gets the aws_cloud of this SharedInstalledProducts.  # noqa: E501

        AWSCloud indicates whether AWS cloud is used.   # noqa: E501

        :return: The aws_cloud of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._aws_cloud

    @aws_cloud.setter
    def aws_cloud(self, aws_cloud):
        """Sets the aws_cloud of this SharedInstalledProducts.

        AWSCloud indicates whether AWS cloud is used.   # noqa: E501

        :param aws_cloud: The aws_cloud of this SharedInstalledProducts.  # noqa: E501
        :type aws_cloud: bool
        """

        self._aws_cloud = aws_cloud

    @property
    def crio(self):
        """Gets the crio of this SharedInstalledProducts.  # noqa: E501

        CRI indicates whether the container runtime is CRI (and not docker).   # noqa: E501

        :return: The crio of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._crio

    @crio.setter
    def crio(self, crio):
        """Sets the crio of this SharedInstalledProducts.

        CRI indicates whether the container runtime is CRI (and not docker).   # noqa: E501

        :param crio: The crio of this SharedInstalledProducts.  # noqa: E501
        :type crio: bool
        """

        self._crio = crio

    @property
    def docker(self):
        """Gets the docker of this SharedInstalledProducts.  # noqa: E501

        Docker represents the docker daemon version.   # noqa: E501

        :return: The docker of this SharedInstalledProducts.  # noqa: E501
        :rtype: str
        """
        return self._docker

    @docker.setter
    def docker(self, docker):
        """Sets the docker of this SharedInstalledProducts.

        Docker represents the docker daemon version.   # noqa: E501

        :param docker: The docker of this SharedInstalledProducts.  # noqa: E501
        :type docker: str
        """

        self._docker = docker

    @property
    def docker_enterprise(self):
        """Gets the docker_enterprise of this SharedInstalledProducts.  # noqa: E501

        DockerEnterprise indicates whether the enterprise version of Docker is installed.   # noqa: E501

        :return: The docker_enterprise of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._docker_enterprise

    @docker_enterprise.setter
    def docker_enterprise(self, docker_enterprise):
        """Sets the docker_enterprise of this SharedInstalledProducts.

        DockerEnterprise indicates whether the enterprise version of Docker is installed.   # noqa: E501

        :param docker_enterprise: The docker_enterprise of this SharedInstalledProducts.  # noqa: E501
        :type docker_enterprise: bool
        """

        self._docker_enterprise = docker_enterprise

    @property
    def has_package_manager(self):
        """Gets the has_package_manager of this SharedInstalledProducts.  # noqa: E501

        HasPackageManager indicates whether package manager is installed on the OS.   # noqa: E501

        :return: The has_package_manager of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._has_package_manager

    @has_package_manager.setter
    def has_package_manager(self, has_package_manager):
        """Sets the has_package_manager of this SharedInstalledProducts.

        HasPackageManager indicates whether package manager is installed on the OS.   # noqa: E501

        :param has_package_manager: The has_package_manager of this SharedInstalledProducts.  # noqa: E501
        :type has_package_manager: bool
        """

        self._has_package_manager = has_package_manager

    @property
    def k8s_api_server(self):
        """Gets the k8s_api_server of this SharedInstalledProducts.  # noqa: E501

        K8sApiServer indicates whether a kubernetes api server is running.   # noqa: E501

        :return: The k8s_api_server of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_api_server

    @k8s_api_server.setter
    def k8s_api_server(self, k8s_api_server):
        """Sets the k8s_api_server of this SharedInstalledProducts.

        K8sApiServer indicates whether a kubernetes api server is running.   # noqa: E501

        :param k8s_api_server: The k8s_api_server of this SharedInstalledProducts.  # noqa: E501
        :type k8s_api_server: bool
        """

        self._k8s_api_server = k8s_api_server

    @property
    def k8s_controller_manager(self):
        """Gets the k8s_controller_manager of this SharedInstalledProducts.  # noqa: E501

        K8sControllerManager indicates whether a kubernetes controller manager is running.   # noqa: E501

        :return: The k8s_controller_manager of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_controller_manager

    @k8s_controller_manager.setter
    def k8s_controller_manager(self, k8s_controller_manager):
        """Sets the k8s_controller_manager of this SharedInstalledProducts.

        K8sControllerManager indicates whether a kubernetes controller manager is running.   # noqa: E501

        :param k8s_controller_manager: The k8s_controller_manager of this SharedInstalledProducts.  # noqa: E501
        :type k8s_controller_manager: bool
        """

        self._k8s_controller_manager = k8s_controller_manager

    @property
    def k8s_etcd(self):
        """Gets the k8s_etcd of this SharedInstalledProducts.  # noqa: E501

        K8sEtcd indicates whether etcd is running.   # noqa: E501

        :return: The k8s_etcd of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_etcd

    @k8s_etcd.setter
    def k8s_etcd(self, k8s_etcd):
        """Sets the k8s_etcd of this SharedInstalledProducts.

        K8sEtcd indicates whether etcd is running.   # noqa: E501

        :param k8s_etcd: The k8s_etcd of this SharedInstalledProducts.  # noqa: E501
        :type k8s_etcd: bool
        """

        self._k8s_etcd = k8s_etcd

    @property
    def k8s_federation_api_server(self):
        """Gets the k8s_federation_api_server of this SharedInstalledProducts.  # noqa: E501

        K8sFederationApiServer indicates whether a federation api server is running.   # noqa: E501

        :return: The k8s_federation_api_server of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_federation_api_server

    @k8s_federation_api_server.setter
    def k8s_federation_api_server(self, k8s_federation_api_server):
        """Sets the k8s_federation_api_server of this SharedInstalledProducts.

        K8sFederationApiServer indicates whether a federation api server is running.   # noqa: E501

        :param k8s_federation_api_server: The k8s_federation_api_server of this SharedInstalledProducts.  # noqa: E501
        :type k8s_federation_api_server: bool
        """

        self._k8s_federation_api_server = k8s_federation_api_server

    @property
    def k8s_federation_controller_manager(self):
        """Gets the k8s_federation_controller_manager of this SharedInstalledProducts.  # noqa: E501

        K8sFederationControllerManager indicates whether a federation controller manager is running.   # noqa: E501

        :return: The k8s_federation_controller_manager of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_federation_controller_manager

    @k8s_federation_controller_manager.setter
    def k8s_federation_controller_manager(self, k8s_federation_controller_manager):
        """Sets the k8s_federation_controller_manager of this SharedInstalledProducts.

        K8sFederationControllerManager indicates whether a federation controller manager is running.   # noqa: E501

        :param k8s_federation_controller_manager: The k8s_federation_controller_manager of this SharedInstalledProducts.  # noqa: E501
        :type k8s_federation_controller_manager: bool
        """

        self._k8s_federation_controller_manager = k8s_federation_controller_manager

    @property
    def k8s_kubelet(self):
        """Gets the k8s_kubelet of this SharedInstalledProducts.  # noqa: E501

        K8sKubelet indicates whether kubelet is running.   # noqa: E501

        :return: The k8s_kubelet of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_kubelet

    @k8s_kubelet.setter
    def k8s_kubelet(self, k8s_kubelet):
        """Sets the k8s_kubelet of this SharedInstalledProducts.

        K8sKubelet indicates whether kubelet is running.   # noqa: E501

        :param k8s_kubelet: The k8s_kubelet of this SharedInstalledProducts.  # noqa: E501
        :type k8s_kubelet: bool
        """

        self._k8s_kubelet = k8s_kubelet

    @property
    def k8s_proxy(self):
        """Gets the k8s_proxy of this SharedInstalledProducts.  # noqa: E501

        K8sProxy indicates whether a kubernetes proxy is running.   # noqa: E501

        :return: The k8s_proxy of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_proxy

    @k8s_proxy.setter
    def k8s_proxy(self, k8s_proxy):
        """Sets the k8s_proxy of this SharedInstalledProducts.

        K8sProxy indicates whether a kubernetes proxy is running.   # noqa: E501

        :param k8s_proxy: The k8s_proxy of this SharedInstalledProducts.  # noqa: E501
        :type k8s_proxy: bool
        """

        self._k8s_proxy = k8s_proxy

    @property
    def k8s_scheduler(self):
        """Gets the k8s_scheduler of this SharedInstalledProducts.  # noqa: E501

        K8sScheduler indicates whether the a kubernetes scheduler is running.   # noqa: E501

        :return: The k8s_scheduler of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_scheduler

    @k8s_scheduler.setter
    def k8s_scheduler(self, k8s_scheduler):
        """Sets the k8s_scheduler of this SharedInstalledProducts.

        K8sScheduler indicates whether the a kubernetes scheduler is running.   # noqa: E501

        :param k8s_scheduler: The k8s_scheduler of this SharedInstalledProducts.  # noqa: E501
        :type k8s_scheduler: bool
        """

        self._k8s_scheduler = k8s_scheduler

    @property
    def kubernetes(self):
        """Gets the kubernetes of this SharedInstalledProducts.  # noqa: E501

        Kubernetes represents the kubernetes version.   # noqa: E501

        :return: The kubernetes of this SharedInstalledProducts.  # noqa: E501
        :rtype: str
        """
        return self._kubernetes

    @kubernetes.setter
    def kubernetes(self, kubernetes):
        """Sets the kubernetes of this SharedInstalledProducts.

        Kubernetes represents the kubernetes version.   # noqa: E501

        :param kubernetes: The kubernetes of this SharedInstalledProducts.  # noqa: E501
        :type kubernetes: str
        """

        self._kubernetes = kubernetes

    @property
    def openshift(self):
        """Gets the openshift of this SharedInstalledProducts.  # noqa: E501

        Openshift indicates whether openshift is deployed.   # noqa: E501

        :return: The openshift of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._openshift

    @openshift.setter
    def openshift(self, openshift):
        """Sets the openshift of this SharedInstalledProducts.

        Openshift indicates whether openshift is deployed.   # noqa: E501

        :param openshift: The openshift of this SharedInstalledProducts.  # noqa: E501
        :type openshift: bool
        """

        self._openshift = openshift

    @property
    def os_distro(self):
        """Gets the os_distro of this SharedInstalledProducts.  # noqa: E501

        OSDistro specifies the os distribution.   # noqa: E501

        :return: The os_distro of this SharedInstalledProducts.  # noqa: E501
        :rtype: str
        """
        return self._os_distro

    @os_distro.setter
    def os_distro(self, os_distro):
        """Sets the os_distro of this SharedInstalledProducts.

        OSDistro specifies the os distribution.   # noqa: E501

        :param os_distro: The os_distro of this SharedInstalledProducts.  # noqa: E501
        :type os_distro: str
        """

        self._os_distro = os_distro

    @property
    def serverless(self):
        """Gets the serverless of this SharedInstalledProducts.  # noqa: E501

        Serverless indicates whether evaluated on a serverless environment.   # noqa: E501

        :return: The serverless of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._serverless

    @serverless.setter
    def serverless(self, serverless):
        """Sets the serverless of this SharedInstalledProducts.

        Serverless indicates whether evaluated on a serverless environment.   # noqa: E501

        :param serverless: The serverless of this SharedInstalledProducts.  # noqa: E501
        :type serverless: bool
        """

        self._serverless = serverless

    @property
    def swarm_manager(self):
        """Gets the swarm_manager of this SharedInstalledProducts.  # noqa: E501

        SwarmManager indicates whether a swarm manager is running.   # noqa: E501

        :return: The swarm_manager of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._swarm_manager

    @swarm_manager.setter
    def swarm_manager(self, swarm_manager):
        """Sets the swarm_manager of this SharedInstalledProducts.

        SwarmManager indicates whether a swarm manager is running.   # noqa: E501

        :param swarm_manager: The swarm_manager of this SharedInstalledProducts.  # noqa: E501
        :type swarm_manager: bool
        """

        self._swarm_manager = swarm_manager

    @property
    def swarm_node(self):
        """Gets the swarm_node of this SharedInstalledProducts.  # noqa: E501

        SwarmNode indicates whether the node is part of an active swarm.   # noqa: E501

        :return: The swarm_node of this SharedInstalledProducts.  # noqa: E501
        :rtype: bool
        """
        return self._swarm_node

    @swarm_node.setter
    def swarm_node(self, swarm_node):
        """Sets the swarm_node of this SharedInstalledProducts.

        SwarmNode indicates whether the node is part of an active swarm.   # noqa: E501

        :param swarm_node: The swarm_node of this SharedInstalledProducts.  # noqa: E501
        :type swarm_node: bool
        """

        self._swarm_node = swarm_node

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedInstalledProducts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedInstalledProducts):
            return True

        return self.to_dict() != other.to_dict()
