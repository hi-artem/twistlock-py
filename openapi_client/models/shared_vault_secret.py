# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedVaultSecret(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'folder': 'str',
        'key': 'str',
        'name': 'str',
        'safe': 'str',
        'store': 'str',
        'value': 'CommonSecret',
        'version': 'str'
    }

    attribute_map = {
        'folder': 'folder',
        'key': 'key',
        'name': 'name',
        'safe': 'safe',
        'store': 'store',
        'value': 'value',
        'version': 'version'
    }

    def __init__(self, folder=None, key=None, name=None, safe=None, store=None, value=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SharedVaultSecret - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._folder = None
        self._key = None
        self._name = None
        self._safe = None
        self._store = None
        self._value = None
        self._version = None
        self.discriminator = None

        if folder is not None:
            self.folder = folder
        if key is not None:
            self.key = key
        if name is not None:
            self.name = name
        if safe is not None:
            self.safe = safe
        if store is not None:
            self.store = store
        if value is not None:
            self.value = value
        if version is not None:
            self.version = version

    @property
    def folder(self):
        """Gets the folder of this SharedVaultSecret.  # noqa: E501

        Folder is one of the following: Cyberark: Name of the folder for secrets held in Cyberark store Hashicorp: The directory path for secrets held in Hashicorp store AWS: The name of the secret in AWS Secrets Manager or AWS Parameter Store.   # noqa: E501

        :return: The folder of this SharedVaultSecret.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this SharedVaultSecret.

        Folder is one of the following: Cyberark: Name of the folder for secrets held in Cyberark store Hashicorp: The directory path for secrets held in Hashicorp store AWS: The name of the secret in AWS Secrets Manager or AWS Parameter Store.   # noqa: E501

        :param folder: The folder of this SharedVaultSecret.  # noqa: E501
        :type folder: str
        """

        self._folder = folder

    @property
    def key(self):
        """Gets the key of this SharedVaultSecret.  # noqa: E501

        Key is the secret's identifier in the secrets store.   # noqa: E501

        :return: The key of this SharedVaultSecret.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SharedVaultSecret.

        Key is the secret's identifier in the secrets store.   # noqa: E501

        :param key: The key of this SharedVaultSecret.  # noqa: E501
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this SharedVaultSecret.  # noqa: E501

        Name is the name of the secret as input from the user.   # noqa: E501

        :return: The name of this SharedVaultSecret.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedVaultSecret.

        Name is the name of the secret as input from the user.   # noqa: E501

        :param name: The name of this SharedVaultSecret.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def safe(self):
        """Gets the safe of this SharedVaultSecret.  # noqa: E501

        Safe is the name of the safe, for secrets held in Cyberark store.   # noqa: E501

        :return: The safe of this SharedVaultSecret.  # noqa: E501
        :rtype: str
        """
        return self._safe

    @safe.setter
    def safe(self, safe):
        """Sets the safe of this SharedVaultSecret.

        Safe is the name of the safe, for secrets held in Cyberark store.   # noqa: E501

        :param safe: The safe of this SharedVaultSecret.  # noqa: E501
        :type safe: str
        """

        self._safe = safe

    @property
    def store(self):
        """Gets the store of this SharedVaultSecret.  # noqa: E501

        Store is the name of the secrets store where the secret is held.   # noqa: E501

        :return: The store of this SharedVaultSecret.  # noqa: E501
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this SharedVaultSecret.

        Store is the name of the secrets store where the secret is held.   # noqa: E501

        :param store: The store of this SharedVaultSecret.  # noqa: E501
        :type store: str
        """

        self._store = store

    @property
    def value(self):
        """Gets the value of this SharedVaultSecret.  # noqa: E501


        :return: The value of this SharedVaultSecret.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SharedVaultSecret.


        :param value: The value of this SharedVaultSecret.  # noqa: E501
        :type value: CommonSecret
        """

        self._value = value

    @property
    def version(self):
        """Gets the version of this SharedVaultSecret.  # noqa: E501

        Version is the Azure secret version.   # noqa: E501

        :return: The version of this SharedVaultSecret.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedVaultSecret.

        Version is the Azure secret version.   # noqa: E501

        :param version: The version of this SharedVaultSecret.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedVaultSecret):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedVaultSecret):
            return True

        return self.to_dict() != other.to_dict()
