# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesHostRadarEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'os_distro': 'str',
        'id': 'str',
        'activities_count': 'int',
        'allow_all': 'CnnfAllowAllConnections',
        'app_firewall_attack_counts': 'list[TypesAppFirewallAttackCount]',
        'cloud_metadata': 'CommonCloudMetadata',
        'cluster': 'str',
        'compliance_distribution': 'VulnDistribution',
        'created': 'datetime',
        'file_integrity_count': 'int',
        'filesystem_count': 'int',
        'firewall_protection': 'WaasProtectionStatus',
        'geoip': 'RuntimeProfileNetworkGeoIP',
        'incident_count': 'int',
        'incoming': 'list[SharedHostRadarIncomingConnection]',
        'internet': 'SharedInternetConnections',
        'labels': 'list[str]',
        'listening_ports': 'CommonProfilePortData',
        'log_inspection_count': 'int',
        'network_count': 'int',
        'outbound_ports': 'CommonProfilePortData',
        'processes_count': 'int',
        'profile_hash': 'int',
        'subnet_connections': 'SharedSubnetConnections',
        'vulnerability_distribution': 'VulnDistribution'
    }

    attribute_map = {
        'os_distro': 'OSDistro',
        'id': '_id',
        'activities_count': 'activitiesCount',
        'allow_all': 'allowAll',
        'app_firewall_attack_counts': 'appFirewallAttackCounts',
        'cloud_metadata': 'cloudMetadata',
        'cluster': 'cluster',
        'compliance_distribution': 'complianceDistribution',
        'created': 'created',
        'file_integrity_count': 'fileIntegrityCount',
        'filesystem_count': 'filesystemCount',
        'firewall_protection': 'firewallProtection',
        'geoip': 'geoip',
        'incident_count': 'incidentCount',
        'incoming': 'incoming',
        'internet': 'internet',
        'labels': 'labels',
        'listening_ports': 'listeningPorts',
        'log_inspection_count': 'logInspectionCount',
        'network_count': 'networkCount',
        'outbound_ports': 'outboundPorts',
        'processes_count': 'processesCount',
        'profile_hash': 'profileHash',
        'subnet_connections': 'subnetConnections',
        'vulnerability_distribution': 'vulnerabilityDistribution'
    }

    def __init__(self, os_distro=None, id=None, activities_count=None, allow_all=None, app_firewall_attack_counts=None, cloud_metadata=None, cluster=None, compliance_distribution=None, created=None, file_integrity_count=None, filesystem_count=None, firewall_protection=None, geoip=None, incident_count=None, incoming=None, internet=None, labels=None, listening_ports=None, log_inspection_count=None, network_count=None, outbound_ports=None, processes_count=None, profile_hash=None, subnet_connections=None, vulnerability_distribution=None, local_vars_configuration=None):  # noqa: E501
        """TypesHostRadarEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._os_distro = None
        self._id = None
        self._activities_count = None
        self._allow_all = None
        self._app_firewall_attack_counts = None
        self._cloud_metadata = None
        self._cluster = None
        self._compliance_distribution = None
        self._created = None
        self._file_integrity_count = None
        self._filesystem_count = None
        self._firewall_protection = None
        self._geoip = None
        self._incident_count = None
        self._incoming = None
        self._internet = None
        self._labels = None
        self._listening_ports = None
        self._log_inspection_count = None
        self._network_count = None
        self._outbound_ports = None
        self._processes_count = None
        self._profile_hash = None
        self._subnet_connections = None
        self._vulnerability_distribution = None
        self.discriminator = None

        if os_distro is not None:
            self.os_distro = os_distro
        if id is not None:
            self.id = id
        if activities_count is not None:
            self.activities_count = activities_count
        if allow_all is not None:
            self.allow_all = allow_all
        if app_firewall_attack_counts is not None:
            self.app_firewall_attack_counts = app_firewall_attack_counts
        if cloud_metadata is not None:
            self.cloud_metadata = cloud_metadata
        if cluster is not None:
            self.cluster = cluster
        if compliance_distribution is not None:
            self.compliance_distribution = compliance_distribution
        if created is not None:
            self.created = created
        if file_integrity_count is not None:
            self.file_integrity_count = file_integrity_count
        if filesystem_count is not None:
            self.filesystem_count = filesystem_count
        if firewall_protection is not None:
            self.firewall_protection = firewall_protection
        if geoip is not None:
            self.geoip = geoip
        if incident_count is not None:
            self.incident_count = incident_count
        if incoming is not None:
            self.incoming = incoming
        if internet is not None:
            self.internet = internet
        if labels is not None:
            self.labels = labels
        if listening_ports is not None:
            self.listening_ports = listening_ports
        if log_inspection_count is not None:
            self.log_inspection_count = log_inspection_count
        if network_count is not None:
            self.network_count = network_count
        if outbound_ports is not None:
            self.outbound_ports = outbound_ports
        if processes_count is not None:
            self.processes_count = processes_count
        if profile_hash is not None:
            self.profile_hash = profile_hash
        if subnet_connections is not None:
            self.subnet_connections = subnet_connections
        if vulnerability_distribution is not None:
            self.vulnerability_distribution = vulnerability_distribution

    @property
    def os_distro(self):
        """Gets the os_distro of this TypesHostRadarEntity.  # noqa: E501

        OSDistro is the OS distro name (e.g., ubuntu).   # noqa: E501

        :return: The os_distro of this TypesHostRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._os_distro

    @os_distro.setter
    def os_distro(self, os_distro):
        """Sets the os_distro of this TypesHostRadarEntity.

        OSDistro is the OS distro name (e.g., ubuntu).   # noqa: E501

        :param os_distro: The os_distro of this TypesHostRadarEntity.  # noqa: E501
        :type os_distro: str
        """

        self._os_distro = os_distro

    @property
    def id(self):
        """Gets the id of this TypesHostRadarEntity.  # noqa: E501

        ID is the host name.   # noqa: E501

        :return: The id of this TypesHostRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesHostRadarEntity.

        ID is the host name.   # noqa: E501

        :param id: The id of this TypesHostRadarEntity.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def activities_count(self):
        """Gets the activities_count of this TypesHostRadarEntity.  # noqa: E501

        ActivitiesCount is the number of activities detected in the host.   # noqa: E501

        :return: The activities_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._activities_count

    @activities_count.setter
    def activities_count(self, activities_count):
        """Sets the activities_count of this TypesHostRadarEntity.

        ActivitiesCount is the number of activities detected in the host.   # noqa: E501

        :param activities_count: The activities_count of this TypesHostRadarEntity.  # noqa: E501
        :type activities_count: int
        """

        self._activities_count = activities_count

    @property
    def allow_all(self):
        """Gets the allow_all of this TypesHostRadarEntity.  # noqa: E501


        :return: The allow_all of this TypesHostRadarEntity.  # noqa: E501
        :rtype: CnnfAllowAllConnections
        """
        return self._allow_all

    @allow_all.setter
    def allow_all(self, allow_all):
        """Sets the allow_all of this TypesHostRadarEntity.


        :param allow_all: The allow_all of this TypesHostRadarEntity.  # noqa: E501
        :type allow_all: CnnfAllowAllConnections
        """

        self._allow_all = allow_all

    @property
    def app_firewall_attack_counts(self):
        """Gets the app_firewall_attack_counts of this TypesHostRadarEntity.  # noqa: E501

        AppFirewallAttackCounts is the counts for the app firewall attacks.   # noqa: E501

        :return: The app_firewall_attack_counts of this TypesHostRadarEntity.  # noqa: E501
        :rtype: list[TypesAppFirewallAttackCount]
        """
        return self._app_firewall_attack_counts

    @app_firewall_attack_counts.setter
    def app_firewall_attack_counts(self, app_firewall_attack_counts):
        """Sets the app_firewall_attack_counts of this TypesHostRadarEntity.

        AppFirewallAttackCounts is the counts for the app firewall attacks.   # noqa: E501

        :param app_firewall_attack_counts: The app_firewall_attack_counts of this TypesHostRadarEntity.  # noqa: E501
        :type app_firewall_attack_counts: list[TypesAppFirewallAttackCount]
        """

        self._app_firewall_attack_counts = app_firewall_attack_counts

    @property
    def cloud_metadata(self):
        """Gets the cloud_metadata of this TypesHostRadarEntity.  # noqa: E501


        :return: The cloud_metadata of this TypesHostRadarEntity.  # noqa: E501
        :rtype: CommonCloudMetadata
        """
        return self._cloud_metadata

    @cloud_metadata.setter
    def cloud_metadata(self, cloud_metadata):
        """Sets the cloud_metadata of this TypesHostRadarEntity.


        :param cloud_metadata: The cloud_metadata of this TypesHostRadarEntity.  # noqa: E501
        :type cloud_metadata: CommonCloudMetadata
        """

        self._cloud_metadata = cloud_metadata

    @property
    def cluster(self):
        """Gets the cluster of this TypesHostRadarEntity.  # noqa: E501

        Cluster is the cluster the host is deployed on.   # noqa: E501

        :return: The cluster of this TypesHostRadarEntity.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this TypesHostRadarEntity.

        Cluster is the cluster the host is deployed on.   # noqa: E501

        :param cluster: The cluster of this TypesHostRadarEntity.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def compliance_distribution(self):
        """Gets the compliance_distribution of this TypesHostRadarEntity.  # noqa: E501


        :return: The compliance_distribution of this TypesHostRadarEntity.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._compliance_distribution

    @compliance_distribution.setter
    def compliance_distribution(self, compliance_distribution):
        """Sets the compliance_distribution of this TypesHostRadarEntity.


        :param compliance_distribution: The compliance_distribution of this TypesHostRadarEntity.  # noqa: E501
        :type compliance_distribution: VulnDistribution
        """

        self._compliance_distribution = compliance_distribution

    @property
    def created(self):
        """Gets the created of this TypesHostRadarEntity.  # noqa: E501

        Created is the profile creation time.   # noqa: E501

        :return: The created of this TypesHostRadarEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this TypesHostRadarEntity.

        Created is the profile creation time.   # noqa: E501

        :param created: The created of this TypesHostRadarEntity.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def file_integrity_count(self):
        """Gets the file_integrity_count of this TypesHostRadarEntity.  # noqa: E501

        FileIntegrityCount is the number of file integrity events detected in the host.   # noqa: E501

        :return: The file_integrity_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._file_integrity_count

    @file_integrity_count.setter
    def file_integrity_count(self, file_integrity_count):
        """Sets the file_integrity_count of this TypesHostRadarEntity.

        FileIntegrityCount is the number of file integrity events detected in the host.   # noqa: E501

        :param file_integrity_count: The file_integrity_count of this TypesHostRadarEntity.  # noqa: E501
        :type file_integrity_count: int
        """

        self._file_integrity_count = file_integrity_count

    @property
    def filesystem_count(self):
        """Gets the filesystem_count of this TypesHostRadarEntity.  # noqa: E501

        FilesystemCount is number of filesystem events triggered by the entity.   # noqa: E501

        :return: The filesystem_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._filesystem_count

    @filesystem_count.setter
    def filesystem_count(self, filesystem_count):
        """Sets the filesystem_count of this TypesHostRadarEntity.

        FilesystemCount is number of filesystem events triggered by the entity.   # noqa: E501

        :param filesystem_count: The filesystem_count of this TypesHostRadarEntity.  # noqa: E501
        :type filesystem_count: int
        """

        self._filesystem_count = filesystem_count

    @property
    def firewall_protection(self):
        """Gets the firewall_protection of this TypesHostRadarEntity.  # noqa: E501


        :return: The firewall_protection of this TypesHostRadarEntity.  # noqa: E501
        :rtype: WaasProtectionStatus
        """
        return self._firewall_protection

    @firewall_protection.setter
    def firewall_protection(self, firewall_protection):
        """Sets the firewall_protection of this TypesHostRadarEntity.


        :param firewall_protection: The firewall_protection of this TypesHostRadarEntity.  # noqa: E501
        :type firewall_protection: WaasProtectionStatus
        """

        self._firewall_protection = firewall_protection

    @property
    def geoip(self):
        """Gets the geoip of this TypesHostRadarEntity.  # noqa: E501


        :return: The geoip of this TypesHostRadarEntity.  # noqa: E501
        :rtype: RuntimeProfileNetworkGeoIP
        """
        return self._geoip

    @geoip.setter
    def geoip(self, geoip):
        """Sets the geoip of this TypesHostRadarEntity.


        :param geoip: The geoip of this TypesHostRadarEntity.  # noqa: E501
        :type geoip: RuntimeProfileNetworkGeoIP
        """

        self._geoip = geoip

    @property
    def incident_count(self):
        """Gets the incident_count of this TypesHostRadarEntity.  # noqa: E501

        IncidentCount is the number of incidents triggered by the entity.   # noqa: E501

        :return: The incident_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._incident_count

    @incident_count.setter
    def incident_count(self, incident_count):
        """Sets the incident_count of this TypesHostRadarEntity.

        IncidentCount is the number of incidents triggered by the entity.   # noqa: E501

        :param incident_count: The incident_count of this TypesHostRadarEntity.  # noqa: E501
        :type incident_count: int
        """

        self._incident_count = incident_count

    @property
    def incoming(self):
        """Gets the incoming of this TypesHostRadarEntity.  # noqa: E501

        Incoming are the incoming connections from the host.   # noqa: E501

        :return: The incoming of this TypesHostRadarEntity.  # noqa: E501
        :rtype: list[SharedHostRadarIncomingConnection]
        """
        return self._incoming

    @incoming.setter
    def incoming(self, incoming):
        """Sets the incoming of this TypesHostRadarEntity.

        Incoming are the incoming connections from the host.   # noqa: E501

        :param incoming: The incoming of this TypesHostRadarEntity.  # noqa: E501
        :type incoming: list[SharedHostRadarIncomingConnection]
        """

        self._incoming = incoming

    @property
    def internet(self):
        """Gets the internet of this TypesHostRadarEntity.  # noqa: E501


        :return: The internet of this TypesHostRadarEntity.  # noqa: E501
        :rtype: SharedInternetConnections
        """
        return self._internet

    @internet.setter
    def internet(self, internet):
        """Sets the internet of this TypesHostRadarEntity.


        :param internet: The internet of this TypesHostRadarEntity.  # noqa: E501
        :type internet: SharedInternetConnections
        """

        self._internet = internet

    @property
    def labels(self):
        """Gets the labels of this TypesHostRadarEntity.  # noqa: E501

        Labels are the labels associated with the profile.   # noqa: E501

        :return: The labels of this TypesHostRadarEntity.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TypesHostRadarEntity.

        Labels are the labels associated with the profile.   # noqa: E501

        :param labels: The labels of this TypesHostRadarEntity.  # noqa: E501
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def listening_ports(self):
        """Gets the listening_ports of this TypesHostRadarEntity.  # noqa: E501


        :return: The listening_ports of this TypesHostRadarEntity.  # noqa: E501
        :rtype: CommonProfilePortData
        """
        return self._listening_ports

    @listening_ports.setter
    def listening_ports(self, listening_ports):
        """Sets the listening_ports of this TypesHostRadarEntity.


        :param listening_ports: The listening_ports of this TypesHostRadarEntity.  # noqa: E501
        :type listening_ports: CommonProfilePortData
        """

        self._listening_ports = listening_ports

    @property
    def log_inspection_count(self):
        """Gets the log_inspection_count of this TypesHostRadarEntity.  # noqa: E501

        LogInspectionCount is the number of log inspection events detected in the host.   # noqa: E501

        :return: The log_inspection_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._log_inspection_count

    @log_inspection_count.setter
    def log_inspection_count(self, log_inspection_count):
        """Sets the log_inspection_count of this TypesHostRadarEntity.

        LogInspectionCount is the number of log inspection events detected in the host.   # noqa: E501

        :param log_inspection_count: The log_inspection_count of this TypesHostRadarEntity.  # noqa: E501
        :type log_inspection_count: int
        """

        self._log_inspection_count = log_inspection_count

    @property
    def network_count(self):
        """Gets the network_count of this TypesHostRadarEntity.  # noqa: E501

        NetworkCount is number of network events triggered by the entity.   # noqa: E501

        :return: The network_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._network_count

    @network_count.setter
    def network_count(self, network_count):
        """Sets the network_count of this TypesHostRadarEntity.

        NetworkCount is number of network events triggered by the entity.   # noqa: E501

        :param network_count: The network_count of this TypesHostRadarEntity.  # noqa: E501
        :type network_count: int
        """

        self._network_count = network_count

    @property
    def outbound_ports(self):
        """Gets the outbound_ports of this TypesHostRadarEntity.  # noqa: E501


        :return: The outbound_ports of this TypesHostRadarEntity.  # noqa: E501
        :rtype: CommonProfilePortData
        """
        return self._outbound_ports

    @outbound_ports.setter
    def outbound_ports(self, outbound_ports):
        """Sets the outbound_ports of this TypesHostRadarEntity.


        :param outbound_ports: The outbound_ports of this TypesHostRadarEntity.  # noqa: E501
        :type outbound_ports: CommonProfilePortData
        """

        self._outbound_ports = outbound_ports

    @property
    def processes_count(self):
        """Gets the processes_count of this TypesHostRadarEntity.  # noqa: E501

        ProcessesCount is the number of processes events triggered by the entity.   # noqa: E501

        :return: The processes_count of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._processes_count

    @processes_count.setter
    def processes_count(self, processes_count):
        """Sets the processes_count of this TypesHostRadarEntity.

        ProcessesCount is the number of processes events triggered by the entity.   # noqa: E501

        :param processes_count: The processes_count of this TypesHostRadarEntity.  # noqa: E501
        :type processes_count: int
        """

        self._processes_count = processes_count

    @property
    def profile_hash(self):
        """Gets the profile_hash of this TypesHostRadarEntity.  # noqa: E501

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :return: The profile_hash of this TypesHostRadarEntity.  # noqa: E501
        :rtype: int
        """
        return self._profile_hash

    @profile_hash.setter
    def profile_hash(self, profile_hash):
        """Sets the profile_hash of this TypesHostRadarEntity.

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :param profile_hash: The profile_hash of this TypesHostRadarEntity.  # noqa: E501
        :type profile_hash: int
        """

        self._profile_hash = profile_hash

    @property
    def subnet_connections(self):
        """Gets the subnet_connections of this TypesHostRadarEntity.  # noqa: E501


        :return: The subnet_connections of this TypesHostRadarEntity.  # noqa: E501
        :rtype: SharedSubnetConnections
        """
        return self._subnet_connections

    @subnet_connections.setter
    def subnet_connections(self, subnet_connections):
        """Sets the subnet_connections of this TypesHostRadarEntity.


        :param subnet_connections: The subnet_connections of this TypesHostRadarEntity.  # noqa: E501
        :type subnet_connections: SharedSubnetConnections
        """

        self._subnet_connections = subnet_connections

    @property
    def vulnerability_distribution(self):
        """Gets the vulnerability_distribution of this TypesHostRadarEntity.  # noqa: E501


        :return: The vulnerability_distribution of this TypesHostRadarEntity.  # noqa: E501
        :rtype: VulnDistribution
        """
        return self._vulnerability_distribution

    @vulnerability_distribution.setter
    def vulnerability_distribution(self, vulnerability_distribution):
        """Sets the vulnerability_distribution of this TypesHostRadarEntity.


        :param vulnerability_distribution: The vulnerability_distribution of this TypesHostRadarEntity.  # noqa: E501
        :type vulnerability_distribution: VulnDistribution
        """

        self._vulnerability_distribution = vulnerability_distribution

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesHostRadarEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesHostRadarEntity):
            return True

        return self.to_dict() != other.to_dict()
