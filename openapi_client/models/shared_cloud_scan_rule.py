# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedCloudScanRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_region_type': 'SharedAwsRegionType',
        'compliance_check_ids': 'list[int]',
        'compliance_enabled': 'bool',
        'credential_id': 'str',
        'discovery_enabled': 'bool',
        'serverless_radar_enabled': 'bool',
        'vm_tags_enabled': 'bool'
    }

    attribute_map = {
        'aws_region_type': 'awsRegionType',
        'compliance_check_ids': 'complianceCheckIDs',
        'compliance_enabled': 'complianceEnabled',
        'credential_id': 'credentialId',
        'discovery_enabled': 'discoveryEnabled',
        'serverless_radar_enabled': 'serverlessRadarEnabled',
        'vm_tags_enabled': 'vmTagsEnabled'
    }

    def __init__(self, aws_region_type=None, compliance_check_ids=None, compliance_enabled=None, credential_id=None, discovery_enabled=None, serverless_radar_enabled=None, vm_tags_enabled=None, local_vars_configuration=None):  # noqa: E501
        """SharedCloudScanRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._aws_region_type = None
        self._compliance_check_ids = None
        self._compliance_enabled = None
        self._credential_id = None
        self._discovery_enabled = None
        self._serverless_radar_enabled = None
        self._vm_tags_enabled = None
        self.discriminator = None

        if aws_region_type is not None:
            self.aws_region_type = aws_region_type
        if compliance_check_ids is not None:
            self.compliance_check_ids = compliance_check_ids
        if compliance_enabled is not None:
            self.compliance_enabled = compliance_enabled
        if credential_id is not None:
            self.credential_id = credential_id
        if discovery_enabled is not None:
            self.discovery_enabled = discovery_enabled
        if serverless_radar_enabled is not None:
            self.serverless_radar_enabled = serverless_radar_enabled
        if vm_tags_enabled is not None:
            self.vm_tags_enabled = vm_tags_enabled

    @property
    def aws_region_type(self):
        """Gets the aws_region_type of this SharedCloudScanRule.  # noqa: E501


        :return: The aws_region_type of this SharedCloudScanRule.  # noqa: E501
        :rtype: SharedAwsRegionType
        """
        return self._aws_region_type

    @aws_region_type.setter
    def aws_region_type(self, aws_region_type):
        """Sets the aws_region_type of this SharedCloudScanRule.


        :param aws_region_type: The aws_region_type of this SharedCloudScanRule.  # noqa: E501
        :type aws_region_type: SharedAwsRegionType
        """

        self._aws_region_type = aws_region_type

    @property
    def compliance_check_ids(self):
        """Gets the compliance_check_ids of this SharedCloudScanRule.  # noqa: E501

        ComplianceCheckIDs are the compliance checks IDs.   # noqa: E501

        :return: The compliance_check_ids of this SharedCloudScanRule.  # noqa: E501
        :rtype: list[int]
        """
        return self._compliance_check_ids

    @compliance_check_ids.setter
    def compliance_check_ids(self, compliance_check_ids):
        """Sets the compliance_check_ids of this SharedCloudScanRule.

        ComplianceCheckIDs are the compliance checks IDs.   # noqa: E501

        :param compliance_check_ids: The compliance_check_ids of this SharedCloudScanRule.  # noqa: E501
        :type compliance_check_ids: list[int]
        """

        self._compliance_check_ids = compliance_check_ids

    @property
    def compliance_enabled(self):
        """Gets the compliance_enabled of this SharedCloudScanRule.  # noqa: E501

        ComplianceEnabled indicates whether compliance scan is enabled.   # noqa: E501

        :return: The compliance_enabled of this SharedCloudScanRule.  # noqa: E501
        :rtype: bool
        """
        return self._compliance_enabled

    @compliance_enabled.setter
    def compliance_enabled(self, compliance_enabled):
        """Sets the compliance_enabled of this SharedCloudScanRule.

        ComplianceEnabled indicates whether compliance scan is enabled.   # noqa: E501

        :param compliance_enabled: The compliance_enabled of this SharedCloudScanRule.  # noqa: E501
        :type compliance_enabled: bool
        """

        self._compliance_enabled = compliance_enabled

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedCloudScanRule.  # noqa: E501

        CredentialID is the id reference of the credential.   # noqa: E501

        :return: The credential_id of this SharedCloudScanRule.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedCloudScanRule.

        CredentialID is the id reference of the credential.   # noqa: E501

        :param credential_id: The credential_id of this SharedCloudScanRule.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def discovery_enabled(self):
        """Gets the discovery_enabled of this SharedCloudScanRule.  # noqa: E501

        DiscoveryEnabled indicates whether discovery scan is enabled.   # noqa: E501

        :return: The discovery_enabled of this SharedCloudScanRule.  # noqa: E501
        :rtype: bool
        """
        return self._discovery_enabled

    @discovery_enabled.setter
    def discovery_enabled(self, discovery_enabled):
        """Sets the discovery_enabled of this SharedCloudScanRule.

        DiscoveryEnabled indicates whether discovery scan is enabled.   # noqa: E501

        :param discovery_enabled: The discovery_enabled of this SharedCloudScanRule.  # noqa: E501
        :type discovery_enabled: bool
        """

        self._discovery_enabled = discovery_enabled

    @property
    def serverless_radar_enabled(self):
        """Gets the serverless_radar_enabled of this SharedCloudScanRule.  # noqa: E501

        ServerlessRadarEnabled indicates whether serverless radar scan is enabled.   # noqa: E501

        :return: The serverless_radar_enabled of this SharedCloudScanRule.  # noqa: E501
        :rtype: bool
        """
        return self._serverless_radar_enabled

    @serverless_radar_enabled.setter
    def serverless_radar_enabled(self, serverless_radar_enabled):
        """Sets the serverless_radar_enabled of this SharedCloudScanRule.

        ServerlessRadarEnabled indicates whether serverless radar scan is enabled.   # noqa: E501

        :param serverless_radar_enabled: The serverless_radar_enabled of this SharedCloudScanRule.  # noqa: E501
        :type serverless_radar_enabled: bool
        """

        self._serverless_radar_enabled = serverless_radar_enabled

    @property
    def vm_tags_enabled(self):
        """Gets the vm_tags_enabled of this SharedCloudScanRule.  # noqa: E501

        VMTagsEnabled indicates whether fetching VM instance tags is enabled.   # noqa: E501

        :return: The vm_tags_enabled of this SharedCloudScanRule.  # noqa: E501
        :rtype: bool
        """
        return self._vm_tags_enabled

    @vm_tags_enabled.setter
    def vm_tags_enabled(self, vm_tags_enabled):
        """Sets the vm_tags_enabled of this SharedCloudScanRule.

        VMTagsEnabled indicates whether fetching VM instance tags is enabled.   # noqa: E501

        :param vm_tags_enabled: The vm_tags_enabled of this SharedCloudScanRule.  # noqa: E501
        :type vm_tags_enabled: bool
        """

        self._vm_tags_enabled = vm_tags_enabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedCloudScanRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedCloudScanRule):
            return True

        return self.to_dict() != other.to_dict()
