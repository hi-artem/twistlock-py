# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedTASDropletSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cap': 'int',
        'cloud_controller_address': 'str',
        'hostname': 'str',
        'pattern': 'str'
    }

    attribute_map = {
        'cap': 'cap',
        'cloud_controller_address': 'cloudControllerAddress',
        'hostname': 'hostname',
        'pattern': 'pattern'
    }

    def __init__(self, cap=None, cloud_controller_address=None, hostname=None, pattern=None, local_vars_configuration=None):  # noqa: E501
        """SharedTASDropletSpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cap = None
        self._cloud_controller_address = None
        self._hostname = None
        self._pattern = None
        self.discriminator = None

        if cap is not None:
            self.cap = cap
        if cloud_controller_address is not None:
            self.cloud_controller_address = cloud_controller_address
        if hostname is not None:
            self.hostname = hostname
        if pattern is not None:
            self.pattern = pattern

    @property
    def cap(self):
        """Gets the cap of this SharedTASDropletSpecification.  # noqa: E501

        Cap indicates only the last k images should be fetched.   # noqa: E501

        :return: The cap of this SharedTASDropletSpecification.  # noqa: E501
        :rtype: int
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this SharedTASDropletSpecification.

        Cap indicates only the last k images should be fetched.   # noqa: E501

        :param cap: The cap of this SharedTASDropletSpecification.  # noqa: E501
        :type cap: int
        """

        self._cap = cap

    @property
    def cloud_controller_address(self):
        """Gets the cloud_controller_address of this SharedTASDropletSpecification.  # noqa: E501

        CloudControllerAddress is the address of the cloud controller that provides the droplets.   # noqa: E501

        :return: The cloud_controller_address of this SharedTASDropletSpecification.  # noqa: E501
        :rtype: str
        """
        return self._cloud_controller_address

    @cloud_controller_address.setter
    def cloud_controller_address(self, cloud_controller_address):
        """Sets the cloud_controller_address of this SharedTASDropletSpecification.

        CloudControllerAddress is the address of the cloud controller that provides the droplets.   # noqa: E501

        :param cloud_controller_address: The cloud_controller_address of this SharedTASDropletSpecification.  # noqa: E501
        :type cloud_controller_address: str
        """

        self._cloud_controller_address = cloud_controller_address

    @property
    def hostname(self):
        """Gets the hostname of this SharedTASDropletSpecification.  # noqa: E501

        Hostname is the hostname of the defender that is used as the blobstore scanner.   # noqa: E501

        :return: The hostname of this SharedTASDropletSpecification.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedTASDropletSpecification.

        Hostname is the hostname of the defender that is used as the blobstore scanner.   # noqa: E501

        :param hostname: The hostname of this SharedTASDropletSpecification.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def pattern(self):
        """Gets the pattern of this SharedTASDropletSpecification.  # noqa: E501

        Name is the droplet name.   # noqa: E501

        :return: The pattern of this SharedTASDropletSpecification.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this SharedTASDropletSpecification.

        Name is the droplet name.   # noqa: E501

        :param pattern: The pattern of this SharedTASDropletSpecification.  # noqa: E501
        :type pattern: str
        """

        self._pattern = pattern

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedTASDropletSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedTASDropletSpecification):
            return True

        return self.to_dict() != other.to_dict()
