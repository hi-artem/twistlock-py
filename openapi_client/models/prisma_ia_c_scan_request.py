# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PrismaIaCScanRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_name': 'str',
        'asset_type': 'str',
        'failure_criteria': 'PrismaIaCScanFailureCriteria',
        'scan_attributes': 'dict(str, str)',
        'tags': 'dict(str, str)'
    }

    attribute_map = {
        'asset_name': 'assetName',
        'asset_type': 'assetType',
        'failure_criteria': 'failureCriteria',
        'scan_attributes': 'scanAttributes',
        'tags': 'tags'
    }

    def __init__(self, asset_name=None, asset_type=None, failure_criteria=None, scan_attributes=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """PrismaIaCScanRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset_name = None
        self._asset_type = None
        self._failure_criteria = None
        self._scan_attributes = None
        self._tags = None
        self.discriminator = None

        if asset_name is not None:
            self.asset_name = asset_name
        if asset_type is not None:
            self.asset_type = asset_type
        if failure_criteria is not None:
            self.failure_criteria = failure_criteria
        if scan_attributes is not None:
            self.scan_attributes = scan_attributes
        if tags is not None:
            self.tags = tags

    @property
    def asset_name(self):
        """Gets the asset_name of this PrismaIaCScanRequest.  # noqa: E501

        AssetName is the name of the asset performing the scan.   # noqa: E501

        :return: The asset_name of this PrismaIaCScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this PrismaIaCScanRequest.

        AssetName is the name of the asset performing the scan.   # noqa: E501

        :param asset_name: The asset_name of this PrismaIaCScanRequest.  # noqa: E501
        :type asset_name: str
        """

        self._asset_name = asset_name

    @property
    def asset_type(self):
        """Gets the asset_type of this PrismaIaCScanRequest.  # noqa: E501

        AssetType is the name of the asset performing the scan.   # noqa: E501

        :return: The asset_type of this PrismaIaCScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this PrismaIaCScanRequest.

        AssetType is the name of the asset performing the scan.   # noqa: E501

        :param asset_type: The asset_type of this PrismaIaCScanRequest.  # noqa: E501
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def failure_criteria(self):
        """Gets the failure_criteria of this PrismaIaCScanRequest.  # noqa: E501


        :return: The failure_criteria of this PrismaIaCScanRequest.  # noqa: E501
        :rtype: PrismaIaCScanFailureCriteria
        """
        return self._failure_criteria

    @failure_criteria.setter
    def failure_criteria(self, failure_criteria):
        """Sets the failure_criteria of this PrismaIaCScanRequest.


        :param failure_criteria: The failure_criteria of this PrismaIaCScanRequest.  # noqa: E501
        :type failure_criteria: PrismaIaCScanFailureCriteria
        """

        self._failure_criteria = failure_criteria

    @property
    def scan_attributes(self):
        """Gets the scan_attributes of this PrismaIaCScanRequest.  # noqa: E501

        ScanAttributes is a map of key value pairs holding attributes of the scan.   # noqa: E501

        :return: The scan_attributes of this PrismaIaCScanRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._scan_attributes

    @scan_attributes.setter
    def scan_attributes(self, scan_attributes):
        """Sets the scan_attributes of this PrismaIaCScanRequest.

        ScanAttributes is a map of key value pairs holding attributes of the scan.   # noqa: E501

        :param scan_attributes: The scan_attributes of this PrismaIaCScanRequest.  # noqa: E501
        :type scan_attributes: dict(str, str)
        """

        self._scan_attributes = scan_attributes

    @property
    def tags(self):
        """Gets the tags of this PrismaIaCScanRequest.  # noqa: E501

        Tags is a map of key value pairs holding information about the scan.   # noqa: E501

        :return: The tags of this PrismaIaCScanRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PrismaIaCScanRequest.

        Tags is a map of key value pairs holding information about the scan.   # noqa: E501

        :param tags: The tags of this PrismaIaCScanRequest.  # noqa: E501
        :type tags: dict(str, str)
        """

        self._tags = tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrismaIaCScanRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrismaIaCScanRequest):
            return True

        return self.to_dict() != other.to_dict()
