# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PrismaIaCScanJobConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attributes': 'PrismaIaCAttributes',
        'id': 'str',
        'skip_trigger_scan': 'bool'
    }

    attribute_map = {
        'attributes': 'attributes',
        'id': 'id',
        'skip_trigger_scan': 'skipTriggerScan'
    }

    def __init__(self, attributes=None, id=None, skip_trigger_scan=None, local_vars_configuration=None):  # noqa: E501
        """PrismaIaCScanJobConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._attributes = None
        self._id = None
        self._skip_trigger_scan = None
        self.discriminator = None

        if attributes is not None:
            self.attributes = attributes
        if id is not None:
            self.id = id
        if skip_trigger_scan is not None:
            self.skip_trigger_scan = skip_trigger_scan

    @property
    def attributes(self):
        """Gets the attributes of this PrismaIaCScanJobConfig.  # noqa: E501


        :return: The attributes of this PrismaIaCScanJobConfig.  # noqa: E501
        :rtype: PrismaIaCAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PrismaIaCScanJobConfig.


        :param attributes: The attributes of this PrismaIaCScanJobConfig.  # noqa: E501
        :type attributes: PrismaIaCAttributes
        """

        self._attributes = attributes

    @property
    def id(self):
        """Gets the id of this PrismaIaCScanJobConfig.  # noqa: E501

        ID is the identifier of the scan to be triggered.   # noqa: E501

        :return: The id of this PrismaIaCScanJobConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrismaIaCScanJobConfig.

        ID is the identifier of the scan to be triggered.   # noqa: E501

        :param id: The id of this PrismaIaCScanJobConfig.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def skip_trigger_scan(self):
        """Gets the skip_trigger_scan of this PrismaIaCScanJobConfig.  # noqa: E501

        SkipTriggerScan indicates if a new scan should be initialization should be skipped.   # noqa: E501

        :return: The skip_trigger_scan of this PrismaIaCScanJobConfig.  # noqa: E501
        :rtype: bool
        """
        return self._skip_trigger_scan

    @skip_trigger_scan.setter
    def skip_trigger_scan(self, skip_trigger_scan):
        """Sets the skip_trigger_scan of this PrismaIaCScanJobConfig.

        SkipTriggerScan indicates if a new scan should be initialization should be skipped.   # noqa: E501

        :param skip_trigger_scan: The skip_trigger_scan of this PrismaIaCScanJobConfig.  # noqa: E501
        :type skip_trigger_scan: bool
        """

        self._skip_trigger_scan = skip_trigger_scan

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrismaIaCScanJobConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrismaIaCScanJobConfig):
            return True

        return self.to_dict() != other.to_dict()
