# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasEndpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_path': 'str',
        'exposed_port': 'int',
        'host': 'str',
        'http2': 'bool',
        'internal_port': 'int',
        'tls': 'bool'
    }

    attribute_map = {
        'base_path': 'basePath',
        'exposed_port': 'exposedPort',
        'host': 'host',
        'http2': 'http2',
        'internal_port': 'internalPort',
        'tls': 'tls'
    }

    def __init__(self, base_path=None, exposed_port=None, host=None, http2=None, internal_port=None, tls=None, local_vars_configuration=None):  # noqa: E501
        """WaasEndpoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._base_path = None
        self._exposed_port = None
        self._host = None
        self._http2 = None
        self._internal_port = None
        self._tls = None
        self.discriminator = None

        if base_path is not None:
            self.base_path = base_path
        if exposed_port is not None:
            self.exposed_port = exposed_port
        if host is not None:
            self.host = host
        if http2 is not None:
            self.http2 = http2
        if internal_port is not None:
            self.internal_port = internal_port
        if tls is not None:
            self.tls = tls

    @property
    def base_path(self):
        """Gets the base_path of this WaasEndpoint.  # noqa: E501

        Base path for the endpoint.   # noqa: E501

        :return: The base_path of this WaasEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this WaasEndpoint.

        Base path for the endpoint.   # noqa: E501

        :param base_path: The base_path of this WaasEndpoint.  # noqa: E501
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def exposed_port(self):
        """Gets the exposed_port of this WaasEndpoint.  # noqa: E501

        Exposed port that the proxy is listening on.   # noqa: E501

        :return: The exposed_port of this WaasEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._exposed_port

    @exposed_port.setter
    def exposed_port(self, exposed_port):
        """Sets the exposed_port of this WaasEndpoint.

        Exposed port that the proxy is listening on.   # noqa: E501

        :param exposed_port: The exposed_port of this WaasEndpoint.  # noqa: E501
        :type exposed_port: int
        """

        self._exposed_port = exposed_port

    @property
    def host(self):
        """Gets the host of this WaasEndpoint.  # noqa: E501

        URL address (name or IP) of the endpoint's API specification (e.g., petstore.swagger.io). The address can be prefixed with a wildcard (e.g., *.swagger.io).   # noqa: E501

        :return: The host of this WaasEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this WaasEndpoint.

        URL address (name or IP) of the endpoint's API specification (e.g., petstore.swagger.io). The address can be prefixed with a wildcard (e.g., *.swagger.io).   # noqa: E501

        :param host: The host of this WaasEndpoint.  # noqa: E501
        :type host: str
        """

        self._host = host

    @property
    def http2(self):
        """Gets the http2 of this WaasEndpoint.  # noqa: E501

        Indicates if the proxy supports HTTP/2 (true) or not (false).   # noqa: E501

        :return: The http2 of this WaasEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._http2

    @http2.setter
    def http2(self, http2):
        """Sets the http2 of this WaasEndpoint.

        Indicates if the proxy supports HTTP/2 (true) or not (false).   # noqa: E501

        :param http2: The http2 of this WaasEndpoint.  # noqa: E501
        :type http2: bool
        """

        self._http2 = http2

    @property
    def internal_port(self):
        """Gets the internal_port of this WaasEndpoint.  # noqa: E501

        Internal port that the application is listening on.   # noqa: E501

        :return: The internal_port of this WaasEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._internal_port

    @internal_port.setter
    def internal_port(self, internal_port):
        """Sets the internal_port of this WaasEndpoint.

        Internal port that the application is listening on.   # noqa: E501

        :param internal_port: The internal_port of this WaasEndpoint.  # noqa: E501
        :type internal_port: int
        """

        self._internal_port = internal_port

    @property
    def tls(self):
        """Gets the tls of this WaasEndpoint.  # noqa: E501

        Indicates if the connection is secured (true) or not (false).   # noqa: E501

        :return: The tls of this WaasEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this WaasEndpoint.

        Indicates if the connection is secured (true) or not (false).   # noqa: E501

        :param tls: The tls of this WaasEndpoint.  # noqa: E501
        :type tls: bool
        """

        self._tls = tls

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasEndpoint):
            return True

        return self.to_dict() != other.to_dict()
