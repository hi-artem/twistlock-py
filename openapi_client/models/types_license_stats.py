# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesLicenseStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avg': 'float',
        'container_defenders': 'int',
        'exceeded': 'bool',
        'host_defenders': 'int',
        'monthly_usage': 'list[TypesAllDefendersUsage]',
        'msg': 'str',
        'on_demand_credits': 'int',
        'total_credit_usage': 'int'
    }

    attribute_map = {
        'avg': 'avg',
        'container_defenders': 'containerDefenders',
        'exceeded': 'exceeded',
        'host_defenders': 'hostDefenders',
        'monthly_usage': 'monthlyUsage',
        'msg': 'msg',
        'on_demand_credits': 'onDemandCredits',
        'total_credit_usage': 'totalCreditUsage'
    }

    def __init__(self, avg=None, container_defenders=None, exceeded=None, host_defenders=None, monthly_usage=None, msg=None, on_demand_credits=None, total_credit_usage=None, local_vars_configuration=None):  # noqa: E501
        """TypesLicenseStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._avg = None
        self._container_defenders = None
        self._exceeded = None
        self._host_defenders = None
        self._monthly_usage = None
        self._msg = None
        self._on_demand_credits = None
        self._total_credit_usage = None
        self.discriminator = None

        if avg is not None:
            self.avg = avg
        if container_defenders is not None:
            self.container_defenders = container_defenders
        if exceeded is not None:
            self.exceeded = exceeded
        if host_defenders is not None:
            self.host_defenders = host_defenders
        if monthly_usage is not None:
            self.monthly_usage = monthly_usage
        if msg is not None:
            self.msg = msg
        if on_demand_credits is not None:
            self.on_demand_credits = on_demand_credits
        if total_credit_usage is not None:
            self.total_credit_usage = total_credit_usage

    @property
    def avg(self):
        """Gets the avg of this TypesLicenseStats.  # noqa: E501

        Avg is the average number of credits.   # noqa: E501

        :return: The avg of this TypesLicenseStats.  # noqa: E501
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this TypesLicenseStats.

        Avg is the average number of credits.   # noqa: E501

        :param avg: The avg of this TypesLicenseStats.  # noqa: E501
        :type avg: float
        """

        self._avg = avg

    @property
    def container_defenders(self):
        """Gets the container_defenders of this TypesLicenseStats.  # noqa: E501

        ContainerDefenders is the total number of container defenders.   # noqa: E501

        :return: The container_defenders of this TypesLicenseStats.  # noqa: E501
        :rtype: int
        """
        return self._container_defenders

    @container_defenders.setter
    def container_defenders(self, container_defenders):
        """Sets the container_defenders of this TypesLicenseStats.

        ContainerDefenders is the total number of container defenders.   # noqa: E501

        :param container_defenders: The container_defenders of this TypesLicenseStats.  # noqa: E501
        :type container_defenders: int
        """

        self._container_defenders = container_defenders

    @property
    def exceeded(self):
        """Gets the exceeded of this TypesLicenseStats.  # noqa: E501

        Exceeded indicates the number of credits exceeded license.   # noqa: E501

        :return: The exceeded of this TypesLicenseStats.  # noqa: E501
        :rtype: bool
        """
        return self._exceeded

    @exceeded.setter
    def exceeded(self, exceeded):
        """Sets the exceeded of this TypesLicenseStats.

        Exceeded indicates the number of credits exceeded license.   # noqa: E501

        :param exceeded: The exceeded of this TypesLicenseStats.  # noqa: E501
        :type exceeded: bool
        """

        self._exceeded = exceeded

    @property
    def host_defenders(self):
        """Gets the host_defenders of this TypesLicenseStats.  # noqa: E501

        HostDefenders is the total number of host defenders.   # noqa: E501

        :return: The host_defenders of this TypesLicenseStats.  # noqa: E501
        :rtype: int
        """
        return self._host_defenders

    @host_defenders.setter
    def host_defenders(self, host_defenders):
        """Sets the host_defenders of this TypesLicenseStats.

        HostDefenders is the total number of host defenders.   # noqa: E501

        :param host_defenders: The host_defenders of this TypesLicenseStats.  # noqa: E501
        :type host_defenders: int
        """

        self._host_defenders = host_defenders

    @property
    def monthly_usage(self):
        """Gets the monthly_usage of this TypesLicenseStats.  # noqa: E501

        MonthlyUsage holds the last 24 monthly usage averages.   # noqa: E501

        :return: The monthly_usage of this TypesLicenseStats.  # noqa: E501
        :rtype: list[TypesAllDefendersUsage]
        """
        return self._monthly_usage

    @monthly_usage.setter
    def monthly_usage(self, monthly_usage):
        """Sets the monthly_usage of this TypesLicenseStats.

        MonthlyUsage holds the last 24 monthly usage averages.   # noqa: E501

        :param monthly_usage: The monthly_usage of this TypesLicenseStats.  # noqa: E501
        :type monthly_usage: list[TypesAllDefendersUsage]
        """

        self._monthly_usage = monthly_usage

    @property
    def msg(self):
        """Gets the msg of this TypesLicenseStats.  # noqa: E501

        Msg is the license exceeded error/warning message to show.   # noqa: E501

        :return: The msg of this TypesLicenseStats.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this TypesLicenseStats.

        Msg is the license exceeded error/warning message to show.   # noqa: E501

        :param msg: The msg of this TypesLicenseStats.  # noqa: E501
        :type msg: str
        """

        self._msg = msg

    @property
    def on_demand_credits(self):
        """Gets the on_demand_credits of this TypesLicenseStats.  # noqa: E501

        OnDemandCredits is the number of on demand credits used during the current contract.   # noqa: E501

        :return: The on_demand_credits of this TypesLicenseStats.  # noqa: E501
        :rtype: int
        """
        return self._on_demand_credits

    @on_demand_credits.setter
    def on_demand_credits(self, on_demand_credits):
        """Sets the on_demand_credits of this TypesLicenseStats.

        OnDemandCredits is the number of on demand credits used during the current contract.   # noqa: E501

        :param on_demand_credits: The on_demand_credits of this TypesLicenseStats.  # noqa: E501
        :type on_demand_credits: int
        """

        self._on_demand_credits = on_demand_credits

    @property
    def total_credit_usage(self):
        """Gets the total_credit_usage of this TypesLicenseStats.  # noqa: E501

        TotalCreditUsage is the total amount of credits used from the beginning of the current contract.   # noqa: E501

        :return: The total_credit_usage of this TypesLicenseStats.  # noqa: E501
        :rtype: int
        """
        return self._total_credit_usage

    @total_credit_usage.setter
    def total_credit_usage(self, total_credit_usage):
        """Sets the total_credit_usage of this TypesLicenseStats.

        TotalCreditUsage is the total amount of credits used from the beginning of the current contract.   # noqa: E501

        :param total_credit_usage: The total_credit_usage of this TypesLicenseStats.  # noqa: E501
        :type total_credit_usage: int
        """

        self._total_credit_usage = total_credit_usage

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesLicenseStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesLicenseStats):
            return True

        return self.to_dict() != other.to_dict()
