# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedMgmtAudit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api': 'str',
        'diff': 'str',
        'failure': 'bool',
        'source_ip': 'str',
        'status': 'str',
        'time': 'datetime',
        'type': 'SharedMgmtType',
        'username': 'str'
    }

    attribute_map = {
        'api': 'api',
        'diff': 'diff',
        'failure': 'failure',
        'source_ip': 'sourceIP',
        'status': 'status',
        'time': 'time',
        'type': 'type',
        'username': 'username'
    }

    def __init__(self, api=None, diff=None, failure=None, source_ip=None, status=None, time=None, type=None, username=None, local_vars_configuration=None):  # noqa: E501
        """SharedMgmtAudit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._api = None
        self._diff = None
        self._failure = None
        self._source_ip = None
        self._status = None
        self._time = None
        self._type = None
        self._username = None
        self.discriminator = None

        if api is not None:
            self.api = api
        if diff is not None:
            self.diff = diff
        if failure is not None:
            self.failure = failure
        if source_ip is not None:
            self.source_ip = source_ip
        if status is not None:
            self.status = status
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type
        if username is not None:
            self.username = username

    @property
    def api(self):
        """Gets the api of this SharedMgmtAudit.  # noqa: E501

        API is the api used in the audit process.   # noqa: E501

        :return: The api of this SharedMgmtAudit.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this SharedMgmtAudit.

        API is the api used in the audit process.   # noqa: E501

        :param api: The api of this SharedMgmtAudit.  # noqa: E501
        :type api: str
        """

        self._api = api

    @property
    def diff(self):
        """Gets the diff of this SharedMgmtAudit.  # noqa: E501

        Diff is the diff between old and new values.   # noqa: E501

        :return: The diff of this SharedMgmtAudit.  # noqa: E501
        :rtype: str
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this SharedMgmtAudit.

        Diff is the diff between old and new values.   # noqa: E501

        :param diff: The diff of this SharedMgmtAudit.  # noqa: E501
        :type diff: str
        """

        self._diff = diff

    @property
    def failure(self):
        """Gets the failure of this SharedMgmtAudit.  # noqa: E501

        Failure states whether the request failed or not.   # noqa: E501

        :return: The failure of this SharedMgmtAudit.  # noqa: E501
        :rtype: bool
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this SharedMgmtAudit.

        Failure states whether the request failed or not.   # noqa: E501

        :param failure: The failure of this SharedMgmtAudit.  # noqa: E501
        :type failure: bool
        """

        self._failure = failure

    @property
    def source_ip(self):
        """Gets the source_ip of this SharedMgmtAudit.  # noqa: E501

        SourceIP is the request's source IP.   # noqa: E501

        :return: The source_ip of this SharedMgmtAudit.  # noqa: E501
        :rtype: str
        """
        return self._source_ip

    @source_ip.setter
    def source_ip(self, source_ip):
        """Sets the source_ip of this SharedMgmtAudit.

        SourceIP is the request's source IP.   # noqa: E501

        :param source_ip: The source_ip of this SharedMgmtAudit.  # noqa: E501
        :type source_ip: str
        """

        self._source_ip = source_ip

    @property
    def status(self):
        """Gets the status of this SharedMgmtAudit.  # noqa: E501

        Status is the request's response status.   # noqa: E501

        :return: The status of this SharedMgmtAudit.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SharedMgmtAudit.

        Status is the request's response status.   # noqa: E501

        :param status: The status of this SharedMgmtAudit.  # noqa: E501
        :type status: str
        """

        self._status = status

    @property
    def time(self):
        """Gets the time of this SharedMgmtAudit.  # noqa: E501

        Time is the time of the request.   # noqa: E501

        :return: The time of this SharedMgmtAudit.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedMgmtAudit.

        Time is the time of the request.   # noqa: E501

        :param time: The time of this SharedMgmtAudit.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this SharedMgmtAudit.  # noqa: E501


        :return: The type of this SharedMgmtAudit.  # noqa: E501
        :rtype: SharedMgmtType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedMgmtAudit.


        :param type: The type of this SharedMgmtAudit.  # noqa: E501
        :type type: SharedMgmtType
        """

        self._type = type

    @property
    def username(self):
        """Gets the username of this SharedMgmtAudit.  # noqa: E501

        Username is the username of the user who performed the action.   # noqa: E501

        :return: The username of this SharedMgmtAudit.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SharedMgmtAudit.

        Username is the username of the user who performed the action.   # noqa: E501

        :param username: The username of this SharedMgmtAudit.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedMgmtAudit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedMgmtAudit):
            return True

        return self.to_dict() != other.to_dict()
