# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesComplianceStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'categories': 'list[TypesComplianceCategoryStats]',
        'daily': 'list[TypesComplianceDailyStats]',
        'ids': 'list[TypesComplianceIDStats]',
        'rules': 'list[TypesRuleComplianceStats]',
        'templates': 'list[TypesComplianceTemplateStats]'
    }

    attribute_map = {
        'categories': 'categories',
        'daily': 'daily',
        'ids': 'ids',
        'rules': 'rules',
        'templates': 'templates'
    }

    def __init__(self, categories=None, daily=None, ids=None, rules=None, templates=None, local_vars_configuration=None):  # noqa: E501
        """TypesComplianceStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._categories = None
        self._daily = None
        self._ids = None
        self._rules = None
        self._templates = None
        self.discriminator = None

        if categories is not None:
            self.categories = categories
        if daily is not None:
            self.daily = daily
        if ids is not None:
            self.ids = ids
        if rules is not None:
            self.rules = rules
        if templates is not None:
            self.templates = templates

    @property
    def categories(self):
        """Gets the categories of this TypesComplianceStats.  # noqa: E501

        Compliance stats by category.   # noqa: E501

        :return: The categories of this TypesComplianceStats.  # noqa: E501
        :rtype: list[TypesComplianceCategoryStats]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this TypesComplianceStats.

        Compliance stats by category.   # noqa: E501

        :param categories: The categories of this TypesComplianceStats.  # noqa: E501
        :type categories: list[TypesComplianceCategoryStats]
        """

        self._categories = categories

    @property
    def daily(self):
        """Gets the daily of this TypesComplianceStats.  # noqa: E501

        Daily compliance stats.   # noqa: E501

        :return: The daily of this TypesComplianceStats.  # noqa: E501
        :rtype: list[TypesComplianceDailyStats]
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this TypesComplianceStats.

        Daily compliance stats.   # noqa: E501

        :param daily: The daily of this TypesComplianceStats.  # noqa: E501
        :type daily: list[TypesComplianceDailyStats]
        """

        self._daily = daily

    @property
    def ids(self):
        """Gets the ids of this TypesComplianceStats.  # noqa: E501

        Compliance data by check ID.   # noqa: E501

        :return: The ids of this TypesComplianceStats.  # noqa: E501
        :rtype: list[TypesComplianceIDStats]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this TypesComplianceStats.

        Compliance data by check ID.   # noqa: E501

        :param ids: The ids of this TypesComplianceStats.  # noqa: E501
        :type ids: list[TypesComplianceIDStats]
        """

        self._ids = ids

    @property
    def rules(self):
        """Gets the rules of this TypesComplianceStats.  # noqa: E501

        Compliance stats by policy rules.   # noqa: E501

        :return: The rules of this TypesComplianceStats.  # noqa: E501
        :rtype: list[TypesRuleComplianceStats]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this TypesComplianceStats.

        Compliance stats by policy rules.   # noqa: E501

        :param rules: The rules of this TypesComplianceStats.  # noqa: E501
        :type rules: list[TypesRuleComplianceStats]
        """

        self._rules = rules

    @property
    def templates(self):
        """Gets the templates of this TypesComplianceStats.  # noqa: E501

        Compliance stats by template.   # noqa: E501

        :return: The templates of this TypesComplianceStats.  # noqa: E501
        :rtype: list[TypesComplianceTemplateStats]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this TypesComplianceStats.

        Compliance stats by template.   # noqa: E501

        :param templates: The templates of this TypesComplianceStats.  # noqa: E501
        :type templates: list[TypesComplianceTemplateStats]
        """

        self._templates = templates

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesComplianceStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesComplianceStats):
            return True

        return self.to_dict() != other.to_dict()
