# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedAppFirewallAudit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'app_id': 'str',
        'attack_techniques': 'list[MitreTechnique]',
        'cluster': 'str',
        'collections': 'list[str]',
        'connecting_ips': 'list[str]',
        'container_id': 'str',
        'container_name': 'str',
        'count': 'int',
        'country': 'str',
        'effect': 'WaasEffect',
        'fqdn': 'str',
        'function': 'str',
        'function_id': 'str',
        'host': 'bool',
        'hostname': 'str',
        'image_name': 'str',
        'labels': 'dict(str, str)',
        'method': 'str',
        'msg': 'str',
        'ns': 'list[str]',
        'os': 'str',
        'profile_id': 'str',
        'protection': 'WaasProtection',
        'raw_event': 'str',
        'region': 'str',
        'request_header_names': 'list[str]',
        'request_headers': 'str',
        'request_host': 'str',
        'request_id': 'str',
        'resource': 'CommonRuntimeResource',
        'response_header_names': 'list[str]',
        'rule_app_id': 'str',
        'rule_name': 'str',
        'runtime': 'SharedLambdaRuntimeType',
        'status_code': 'int',
        'subnet': 'str',
        'time': 'datetime',
        'type': 'WaasAttackType',
        'url': 'str',
        'url_path': 'str',
        'url_query': 'str',
        'user_agent_header': 'str',
        'version': 'str'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'app_id': 'appID',
        'attack_techniques': 'attackTechniques',
        'cluster': 'cluster',
        'collections': 'collections',
        'connecting_ips': 'connectingIPs',
        'container_id': 'containerId',
        'container_name': 'containerName',
        'count': 'count',
        'country': 'country',
        'effect': 'effect',
        'fqdn': 'fqdn',
        'function': 'function',
        'function_id': 'functionID',
        'host': 'host',
        'hostname': 'hostname',
        'image_name': 'imageName',
        'labels': 'labels',
        'method': 'method',
        'msg': 'msg',
        'ns': 'ns',
        'os': 'os',
        'profile_id': 'profileId',
        'protection': 'protection',
        'raw_event': 'rawEvent',
        'region': 'region',
        'request_header_names': 'requestHeaderNames',
        'request_headers': 'requestHeaders',
        'request_host': 'requestHost',
        'request_id': 'requestID',
        'resource': 'resource',
        'response_header_names': 'responseHeaderNames',
        'rule_app_id': 'ruleAppID',
        'rule_name': 'ruleName',
        'runtime': 'runtime',
        'status_code': 'statusCode',
        'subnet': 'subnet',
        'time': 'time',
        'type': 'type',
        'url': 'url',
        'url_path': 'urlPath',
        'url_query': 'urlQuery',
        'user_agent_header': 'userAgentHeader',
        'version': 'version'
    }

    def __init__(self, id=None, account_id=None, app_id=None, attack_techniques=None, cluster=None, collections=None, connecting_ips=None, container_id=None, container_name=None, count=None, country=None, effect=None, fqdn=None, function=None, function_id=None, host=None, hostname=None, image_name=None, labels=None, method=None, msg=None, ns=None, os=None, profile_id=None, protection=None, raw_event=None, region=None, request_header_names=None, request_headers=None, request_host=None, request_id=None, resource=None, response_header_names=None, rule_app_id=None, rule_name=None, runtime=None, status_code=None, subnet=None, time=None, type=None, url=None, url_path=None, url_query=None, user_agent_header=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SharedAppFirewallAudit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._app_id = None
        self._attack_techniques = None
        self._cluster = None
        self._collections = None
        self._connecting_ips = None
        self._container_id = None
        self._container_name = None
        self._count = None
        self._country = None
        self._effect = None
        self._fqdn = None
        self._function = None
        self._function_id = None
        self._host = None
        self._hostname = None
        self._image_name = None
        self._labels = None
        self._method = None
        self._msg = None
        self._ns = None
        self._os = None
        self._profile_id = None
        self._protection = None
        self._raw_event = None
        self._region = None
        self._request_header_names = None
        self._request_headers = None
        self._request_host = None
        self._request_id = None
        self._resource = None
        self._response_header_names = None
        self._rule_app_id = None
        self._rule_name = None
        self._runtime = None
        self._status_code = None
        self._subnet = None
        self._time = None
        self._type = None
        self._url = None
        self._url_path = None
        self._url_query = None
        self._user_agent_header = None
        self._version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if app_id is not None:
            self.app_id = app_id
        if attack_techniques is not None:
            self.attack_techniques = attack_techniques
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if connecting_ips is not None:
            self.connecting_ips = connecting_ips
        if container_id is not None:
            self.container_id = container_id
        if container_name is not None:
            self.container_name = container_name
        if count is not None:
            self.count = count
        if country is not None:
            self.country = country
        if effect is not None:
            self.effect = effect
        if fqdn is not None:
            self.fqdn = fqdn
        if function is not None:
            self.function = function
        if function_id is not None:
            self.function_id = function_id
        if host is not None:
            self.host = host
        if hostname is not None:
            self.hostname = hostname
        if image_name is not None:
            self.image_name = image_name
        if labels is not None:
            self.labels = labels
        if method is not None:
            self.method = method
        if msg is not None:
            self.msg = msg
        if ns is not None:
            self.ns = ns
        if os is not None:
            self.os = os
        if profile_id is not None:
            self.profile_id = profile_id
        if protection is not None:
            self.protection = protection
        if raw_event is not None:
            self.raw_event = raw_event
        if region is not None:
            self.region = region
        if request_header_names is not None:
            self.request_header_names = request_header_names
        if request_headers is not None:
            self.request_headers = request_headers
        if request_host is not None:
            self.request_host = request_host
        if request_id is not None:
            self.request_id = request_id
        if resource is not None:
            self.resource = resource
        if response_header_names is not None:
            self.response_header_names = response_header_names
        if rule_app_id is not None:
            self.rule_app_id = rule_app_id
        if rule_name is not None:
            self.rule_name = rule_name
        if runtime is not None:
            self.runtime = runtime
        if status_code is not None:
            self.status_code = status_code
        if subnet is not None:
            self.subnet = subnet
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if url_path is not None:
            self.url_path = url_path
        if url_query is not None:
            self.url_query = url_query
        if user_agent_header is not None:
            self.user_agent_header = user_agent_header
        if version is not None:
            self.version = version

    @property
    def id(self):
        """Gets the id of this SharedAppFirewallAudit.  # noqa: E501

        ID is internal id representation.   # noqa: E501

        :return: The id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedAppFirewallAudit.

        ID is internal id representation.   # noqa: E501

        :param id: The id of this SharedAppFirewallAudit.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this SharedAppFirewallAudit.  # noqa: E501

        AccountID is the cloud account ID where the audit was generated.   # noqa: E501

        :return: The account_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SharedAppFirewallAudit.

        AccountID is the cloud account ID where the audit was generated.   # noqa: E501

        :param account_id: The account_id of this SharedAppFirewallAudit.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def app_id(self):
        """Gets the app_id of this SharedAppFirewallAudit.  # noqa: E501

        AppID is the  application ID.   # noqa: E501

        :return: The app_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SharedAppFirewallAudit.

        AppID is the  application ID.   # noqa: E501

        :param app_id: The app_id of this SharedAppFirewallAudit.  # noqa: E501
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def attack_techniques(self):
        """Gets the attack_techniques of this SharedAppFirewallAudit.  # noqa: E501

        AttackTechniques are the MITRE attack techniques.   # noqa: E501

        :return: The attack_techniques of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: list[MitreTechnique]
        """
        return self._attack_techniques

    @attack_techniques.setter
    def attack_techniques(self, attack_techniques):
        """Sets the attack_techniques of this SharedAppFirewallAudit.

        AttackTechniques are the MITRE attack techniques.   # noqa: E501

        :param attack_techniques: The attack_techniques of this SharedAppFirewallAudit.  # noqa: E501
        :type attack_techniques: list[MitreTechnique]
        """

        self._attack_techniques = attack_techniques

    @property
    def cluster(self):
        """Gets the cluster of this SharedAppFirewallAudit.  # noqa: E501

        Cluster is the cluster on which the audit was originated.   # noqa: E501

        :return: The cluster of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedAppFirewallAudit.

        Cluster is the cluster on which the audit was originated.   # noqa: E501

        :param cluster: The cluster of this SharedAppFirewallAudit.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedAppFirewallAudit.  # noqa: E501

        Collections are collections to which this audit applies.   # noqa: E501

        :return: The collections of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedAppFirewallAudit.

        Collections are collections to which this audit applies.   # noqa: E501

        :param collections: The collections of this SharedAppFirewallAudit.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def connecting_ips(self):
        """Gets the connecting_ips of this SharedAppFirewallAudit.  # noqa: E501

        ConnectingIPs are the requests connecting IPs such as proxy and load-balancer.   # noqa: E501

        :return: The connecting_ips of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._connecting_ips

    @connecting_ips.setter
    def connecting_ips(self, connecting_ips):
        """Sets the connecting_ips of this SharedAppFirewallAudit.

        ConnectingIPs are the requests connecting IPs such as proxy and load-balancer.   # noqa: E501

        :param connecting_ips: The connecting_ips of this SharedAppFirewallAudit.  # noqa: E501
        :type connecting_ips: list[str]
        """

        self._connecting_ips = connecting_ips

    @property
    def container_id(self):
        """Gets the container_id of this SharedAppFirewallAudit.  # noqa: E501

        ContainerId is the firewall container id.   # noqa: E501

        :return: The container_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this SharedAppFirewallAudit.

        ContainerId is the firewall container id.   # noqa: E501

        :param container_id: The container_id of this SharedAppFirewallAudit.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_name(self):
        """Gets the container_name of this SharedAppFirewallAudit.  # noqa: E501

        ContainerName is the firewall container name.   # noqa: E501

        :return: The container_name of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this SharedAppFirewallAudit.

        ContainerName is the firewall container name.   # noqa: E501

        :param container_name: The container_name of this SharedAppFirewallAudit.  # noqa: E501
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def count(self):
        """Gets the count of this SharedAppFirewallAudit.  # noqa: E501

        Count is the number of audit occurrences.   # noqa: E501

        :return: The count of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SharedAppFirewallAudit.

        Count is the number of audit occurrences.   # noqa: E501

        :param count: The count of this SharedAppFirewallAudit.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def country(self):
        """Gets the country of this SharedAppFirewallAudit.  # noqa: E501

        Country is the source IP country.   # noqa: E501

        :return: The country of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SharedAppFirewallAudit.

        Country is the source IP country.   # noqa: E501

        :param country: The country of this SharedAppFirewallAudit.  # noqa: E501
        :type country: str
        """

        self._country = country

    @property
    def effect(self):
        """Gets the effect of this SharedAppFirewallAudit.  # noqa: E501


        :return: The effect of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this SharedAppFirewallAudit.


        :param effect: The effect of this SharedAppFirewallAudit.  # noqa: E501
        :type effect: WaasEffect
        """

        self._effect = effect

    @property
    def fqdn(self):
        """Gets the fqdn of this SharedAppFirewallAudit.  # noqa: E501

        FQDN is the current hostname's FQDN.   # noqa: E501

        :return: The fqdn of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this SharedAppFirewallAudit.

        FQDN is the current hostname's FQDN.   # noqa: E501

        :param fqdn: The fqdn of this SharedAppFirewallAudit.  # noqa: E501
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def function(self):
        """Gets the function of this SharedAppFirewallAudit.  # noqa: E501

        Function is the name of the serverless function that caused the audit.   # noqa: E501

        :return: The function of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this SharedAppFirewallAudit.

        Function is the name of the serverless function that caused the audit.   # noqa: E501

        :param function: The function of this SharedAppFirewallAudit.  # noqa: E501
        :type function: str
        """

        self._function = function

    @property
    def function_id(self):
        """Gets the function_id of this SharedAppFirewallAudit.  # noqa: E501

        FunctionID is the id of the function called.   # noqa: E501

        :return: The function_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this SharedAppFirewallAudit.

        FunctionID is the id of the function called.   # noqa: E501

        :param function_id: The function_id of this SharedAppFirewallAudit.  # noqa: E501
        :type function_id: str
        """

        self._function_id = function_id

    @property
    def host(self):
        """Gets the host of this SharedAppFirewallAudit.  # noqa: E501

        Host indicates this audit if for a host firewall.   # noqa: E501

        :return: The host of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: bool
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SharedAppFirewallAudit.

        Host indicates this audit if for a host firewall.   # noqa: E501

        :param host: The host of this SharedAppFirewallAudit.  # noqa: E501
        :type host: bool
        """

        self._host = host

    @property
    def hostname(self):
        """Gets the hostname of this SharedAppFirewallAudit.  # noqa: E501

        Hostname is the current hostname.   # noqa: E501

        :return: The hostname of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this SharedAppFirewallAudit.

        Hostname is the current hostname.   # noqa: E501

        :param hostname: The hostname of this SharedAppFirewallAudit.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image_name(self):
        """Gets the image_name of this SharedAppFirewallAudit.  # noqa: E501

        ImageName is the firewall image name.   # noqa: E501

        :return: The image_name of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this SharedAppFirewallAudit.

        ImageName is the firewall image name.   # noqa: E501

        :param image_name: The image_name of this SharedAppFirewallAudit.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def labels(self):
        """Gets the labels of this SharedAppFirewallAudit.  # noqa: E501

        Labels are the custom labels associated with the container.   # noqa: E501

        :return: The labels of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SharedAppFirewallAudit.

        Labels are the custom labels associated with the container.   # noqa: E501

        :param labels: The labels of this SharedAppFirewallAudit.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def method(self):
        """Gets the method of this SharedAppFirewallAudit.  # noqa: E501

        HTTPMethod is the request HTTP method.   # noqa: E501

        :return: The method of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SharedAppFirewallAudit.

        HTTPMethod is the request HTTP method.   # noqa: E501

        :param method: The method of this SharedAppFirewallAudit.  # noqa: E501
        :type method: str
        """

        self._method = method

    @property
    def msg(self):
        """Gets the msg of this SharedAppFirewallAudit.  # noqa: E501

        Message is the blocking message text.   # noqa: E501

        :return: The msg of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this SharedAppFirewallAudit.

        Message is the blocking message text.   # noqa: E501

        :param msg: The msg of this SharedAppFirewallAudit.  # noqa: E501
        :type msg: str
        """

        self._msg = msg

    @property
    def ns(self):
        """Gets the ns of this SharedAppFirewallAudit.  # noqa: E501

        Namespaces are the k8s namespaces.   # noqa: E501

        :return: The ns of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._ns

    @ns.setter
    def ns(self, ns):
        """Sets the ns of this SharedAppFirewallAudit.

        Namespaces are the k8s namespaces.   # noqa: E501

        :param ns: The ns of this SharedAppFirewallAudit.  # noqa: E501
        :type ns: list[str]
        """

        self._ns = ns

    @property
    def os(self):
        """Gets the os of this SharedAppFirewallAudit.  # noqa: E501

        OS is the operating system distribution.   # noqa: E501

        :return: The os of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SharedAppFirewallAudit.

        OS is the operating system distribution.   # noqa: E501

        :param os: The os of this SharedAppFirewallAudit.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def profile_id(self):
        """Gets the profile_id of this SharedAppFirewallAudit.  # noqa: E501

        ProfileID is the profile of the audit.   # noqa: E501

        :return: The profile_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this SharedAppFirewallAudit.

        ProfileID is the profile of the audit.   # noqa: E501

        :param profile_id: The profile_id of this SharedAppFirewallAudit.  # noqa: E501
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def protection(self):
        """Gets the protection of this SharedAppFirewallAudit.  # noqa: E501


        :return: The protection of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: WaasProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this SharedAppFirewallAudit.


        :param protection: The protection of this SharedAppFirewallAudit.  # noqa: E501
        :type protection: WaasProtection
        """

        self._protection = protection

    @property
    def raw_event(self):
        """Gets the raw_event of this SharedAppFirewallAudit.  # noqa: E501

        RawEvent contains unparsed function handler event input.   # noqa: E501

        :return: The raw_event of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._raw_event

    @raw_event.setter
    def raw_event(self, raw_event):
        """Sets the raw_event of this SharedAppFirewallAudit.

        RawEvent contains unparsed function handler event input.   # noqa: E501

        :param raw_event: The raw_event of this SharedAppFirewallAudit.  # noqa: E501
        :type raw_event: str
        """

        self._raw_event = raw_event

    @property
    def region(self):
        """Gets the region of this SharedAppFirewallAudit.  # noqa: E501

        Region is the name of the region in which the serverless function is located.   # noqa: E501

        :return: The region of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SharedAppFirewallAudit.

        Region is the name of the region in which the serverless function is located.   # noqa: E501

        :param region: The region of this SharedAppFirewallAudit.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def request_header_names(self):
        """Gets the request_header_names of this SharedAppFirewallAudit.  # noqa: E501

        RequestHeaderNames are the request header names.   # noqa: E501

        :return: The request_header_names of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._request_header_names

    @request_header_names.setter
    def request_header_names(self, request_header_names):
        """Sets the request_header_names of this SharedAppFirewallAudit.

        RequestHeaderNames are the request header names.   # noqa: E501

        :param request_header_names: The request_header_names of this SharedAppFirewallAudit.  # noqa: E501
        :type request_header_names: list[str]
        """

        self._request_header_names = request_header_names

    @property
    def request_headers(self):
        """Gets the request_headers of this SharedAppFirewallAudit.  # noqa: E501

        RequestHeaders represent the request headers.   # noqa: E501

        :return: The request_headers of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._request_headers

    @request_headers.setter
    def request_headers(self, request_headers):
        """Sets the request_headers of this SharedAppFirewallAudit.

        RequestHeaders represent the request headers.   # noqa: E501

        :param request_headers: The request_headers of this SharedAppFirewallAudit.  # noqa: E501
        :type request_headers: str
        """

        self._request_headers = request_headers

    @property
    def request_host(self):
        """Gets the request_host of this SharedAppFirewallAudit.  # noqa: E501

        RequestHost is the request host.   # noqa: E501

        :return: The request_host of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._request_host

    @request_host.setter
    def request_host(self, request_host):
        """Sets the request_host of this SharedAppFirewallAudit.

        RequestHost is the request host.   # noqa: E501

        :param request_host: The request_host of this SharedAppFirewallAudit.  # noqa: E501
        :type request_host: str
        """

        self._request_host = request_host

    @property
    def request_id(self):
        """Gets the request_id of this SharedAppFirewallAudit.  # noqa: E501

        RequestID is lambda function invocation request id.   # noqa: E501

        :return: The request_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SharedAppFirewallAudit.

        RequestID is lambda function invocation request id.   # noqa: E501

        :param request_id: The request_id of this SharedAppFirewallAudit.  # noqa: E501
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def resource(self):
        """Gets the resource of this SharedAppFirewallAudit.  # noqa: E501


        :return: The resource of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: CommonRuntimeResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this SharedAppFirewallAudit.


        :param resource: The resource of this SharedAppFirewallAudit.  # noqa: E501
        :type resource: CommonRuntimeResource
        """

        self._resource = resource

    @property
    def response_header_names(self):
        """Gets the response_header_names of this SharedAppFirewallAudit.  # noqa: E501

        ResponseHeaderNames are the response header names.   # noqa: E501

        :return: The response_header_names of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_header_names

    @response_header_names.setter
    def response_header_names(self, response_header_names):
        """Sets the response_header_names of this SharedAppFirewallAudit.

        ResponseHeaderNames are the response header names.   # noqa: E501

        :param response_header_names: The response_header_names of this SharedAppFirewallAudit.  # noqa: E501
        :type response_header_names: list[str]
        """

        self._response_header_names = response_header_names

    @property
    def rule_app_id(self):
        """Gets the rule_app_id of this SharedAppFirewallAudit.  # noqa: E501

        RuleAppID is the ID of the rule's app that was applied.   # noqa: E501

        :return: The rule_app_id of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._rule_app_id

    @rule_app_id.setter
    def rule_app_id(self, rule_app_id):
        """Sets the rule_app_id of this SharedAppFirewallAudit.

        RuleAppID is the ID of the rule's app that was applied.   # noqa: E501

        :param rule_app_id: The rule_app_id of this SharedAppFirewallAudit.  # noqa: E501
        :type rule_app_id: str
        """

        self._rule_app_id = rule_app_id

    @property
    def rule_name(self):
        """Gets the rule_name of this SharedAppFirewallAudit.  # noqa: E501

        RuleName is the name of the rule that was applied.   # noqa: E501

        :return: The rule_name of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SharedAppFirewallAudit.

        RuleName is the name of the rule that was applied.   # noqa: E501

        :param rule_name: The rule_name of this SharedAppFirewallAudit.  # noqa: E501
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def runtime(self):
        """Gets the runtime of this SharedAppFirewallAudit.  # noqa: E501


        :return: The runtime of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: SharedLambdaRuntimeType
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this SharedAppFirewallAudit.


        :param runtime: The runtime of this SharedAppFirewallAudit.  # noqa: E501
        :type runtime: SharedLambdaRuntimeType
        """

        self._runtime = runtime

    @property
    def status_code(self):
        """Gets the status_code of this SharedAppFirewallAudit.  # noqa: E501

        StatusCode is the response status code.   # noqa: E501

        :return: The status_code of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this SharedAppFirewallAudit.

        StatusCode is the response status code.   # noqa: E501

        :param status_code: The status_code of this SharedAppFirewallAudit.  # noqa: E501
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def subnet(self):
        """Gets the subnet of this SharedAppFirewallAudit.  # noqa: E501

        Subnet is the source IP subnet.   # noqa: E501

        :return: The subnet of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this SharedAppFirewallAudit.

        Subnet is the source IP subnet.   # noqa: E501

        :param subnet: The subnet of this SharedAppFirewallAudit.  # noqa: E501
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def time(self):
        """Gets the time of this SharedAppFirewallAudit.  # noqa: E501

        Time is the UTC time of the audit event.   # noqa: E501

        :return: The time of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedAppFirewallAudit.

        Time is the UTC time of the audit event.   # noqa: E501

        :param time: The time of this SharedAppFirewallAudit.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this SharedAppFirewallAudit.  # noqa: E501


        :return: The type of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: WaasAttackType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedAppFirewallAudit.


        :param type: The type of this SharedAppFirewallAudit.  # noqa: E501
        :type type: WaasAttackType
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this SharedAppFirewallAudit.  # noqa: E501

        URL is the requests full URL (partial on server side - path and query only).   # noqa: E501

        :return: The url of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SharedAppFirewallAudit.

        URL is the requests full URL (partial on server side - path and query only).   # noqa: E501

        :param url: The url of this SharedAppFirewallAudit.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def url_path(self):
        """Gets the url_path of this SharedAppFirewallAudit.  # noqa: E501

        URLPath is the requests url path.   # noqa: E501

        :return: The url_path of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this SharedAppFirewallAudit.

        URLPath is the requests url path.   # noqa: E501

        :param url_path: The url_path of this SharedAppFirewallAudit.  # noqa: E501
        :type url_path: str
        """

        self._url_path = url_path

    @property
    def url_query(self):
        """Gets the url_query of this SharedAppFirewallAudit.  # noqa: E501

        URLQuery is the requests url query.   # noqa: E501

        :return: The url_query of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._url_query

    @url_query.setter
    def url_query(self, url_query):
        """Sets the url_query of this SharedAppFirewallAudit.

        URLQuery is the requests url query.   # noqa: E501

        :param url_query: The url_query of this SharedAppFirewallAudit.  # noqa: E501
        :type url_query: str
        """

        self._url_query = url_query

    @property
    def user_agent_header(self):
        """Gets the user_agent_header of this SharedAppFirewallAudit.  # noqa: E501

        UserAgentHeader is the requests User-Agent header.   # noqa: E501

        :return: The user_agent_header of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._user_agent_header

    @user_agent_header.setter
    def user_agent_header(self, user_agent_header):
        """Sets the user_agent_header of this SharedAppFirewallAudit.

        UserAgentHeader is the requests User-Agent header.   # noqa: E501

        :param user_agent_header: The user_agent_header of this SharedAppFirewallAudit.  # noqa: E501
        :type user_agent_header: str
        """

        self._user_agent_header = user_agent_header

    @property
    def version(self):
        """Gets the version of this SharedAppFirewallAudit.  # noqa: E501

        Version is the defender version.   # noqa: E501

        :return: The version of this SharedAppFirewallAudit.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedAppFirewallAudit.

        Version is the defender version.   # noqa: E501

        :param version: The version of this SharedAppFirewallAudit.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedAppFirewallAudit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedAppFirewallAudit):
            return True

        return self.to_dict() != other.to_dict()
