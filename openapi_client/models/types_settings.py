# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_ca_cert': 'str',
        'address': 'str',
        'alerts': 'ApiAlertSettings',
        'cert_settings': 'TypesCertSettings',
        'certificate_period_days': 'int',
        'check_revocation': 'bool',
        'code_repo_settings': 'SharedCodeRepoSettings',
        'communication_port': 'int',
        'console_ca_cert': 'str',
        'console_custom_cert': 'CommonSecret',
        'console_names': 'list[str]',
        'custom_endpoint': 'str',
        'custom_endpoint_ca_cert': 'str',
        'custom_endpoint_credential_id': 'str',
        'custom_endpoint_enabled': 'bool',
        'custom_labels': 'SharedCustomLabelsSettings',
        'defender_settings': 'DefenderSettings',
        'enabled': 'bool',
        'forensic': 'SharedForensicSettings',
        'has_admin': 'bool',
        'host_auto_deploy': 'list[SharedHostAutoDeploySpecification]',
        'hpkp': 'TypesHPKPSettings',
        'identity_settings': 'IdentitySettings',
        'kubernetes_audit': 'SharedKubernetesAuditSettings',
        'ldap_enabled': 'bool',
        'license_key': 'str',
        'logging': 'SharedLoggingSettings',
        'logon': 'TypesLogonSettings',
        'oauth_enabled': 'bool',
        'oidc_enabled': 'bool',
        'projects': 'ApiProjectSettings',
        'proxy': 'CommonProxySettings',
        'registry': 'SharedRegistrySettings',
        'saml_enabled': 'bool',
        'scan': 'SharedScanSettings',
        'secrets_stores': 'SharedSecretsStores',
        'secured_console_port': 'int',
        'serverless_auto_deploy': 'list[SharedServerlessAutoDeploySpecification]',
        'serverless_scan': 'list[SharedServerlessScanSpecification]',
        'tas_droplets': 'list[SharedTASDropletSpecification]',
        'telemetry': 'TypesTelemetrySettings',
        'token': 'str',
        'trusted_certs': 'list[SharedTrustedCertSignature]',
        'trusted_certs_enabled': 'bool',
        'upload_disabled': 'bool',
        'version': 'str',
        'vms': 'list[SharedVMSpecification]',
        'wild_fire_settings': 'SharedWildFireSettings',
        'windows_feed_enabled': 'bool'
    }

    attribute_map = {
        'access_ca_cert': 'accessCaCert',
        'address': 'address',
        'alerts': 'alerts',
        'cert_settings': 'certSettings',
        'certificate_period_days': 'certificatePeriodDays',
        'check_revocation': 'checkRevocation',
        'code_repo_settings': 'codeRepoSettings',
        'communication_port': 'communicationPort',
        'console_ca_cert': 'consoleCaCert',
        'console_custom_cert': 'consoleCustomCert',
        'console_names': 'consoleNames',
        'custom_endpoint': 'customEndpoint',
        'custom_endpoint_ca_cert': 'customEndpointCACert',
        'custom_endpoint_credential_id': 'customEndpointCredentialID',
        'custom_endpoint_enabled': 'customEndpointEnabled',
        'custom_labels': 'customLabels',
        'defender_settings': 'defenderSettings',
        'enabled': 'enabled',
        'forensic': 'forensic',
        'has_admin': 'hasAdmin',
        'host_auto_deploy': 'hostAutoDeploy',
        'hpkp': 'hpkp',
        'identity_settings': 'identitySettings',
        'kubernetes_audit': 'kubernetesAudit',
        'ldap_enabled': 'ldapEnabled',
        'license_key': 'licenseKey',
        'logging': 'logging',
        'logon': 'logon',
        'oauth_enabled': 'oauthEnabled',
        'oidc_enabled': 'oidcEnabled',
        'projects': 'projects',
        'proxy': 'proxy',
        'registry': 'registry',
        'saml_enabled': 'samlEnabled',
        'scan': 'scan',
        'secrets_stores': 'secretsStores',
        'secured_console_port': 'securedConsolePort',
        'serverless_auto_deploy': 'serverlessAutoDeploy',
        'serverless_scan': 'serverlessScan',
        'tas_droplets': 'tasDroplets',
        'telemetry': 'telemetry',
        'token': 'token',
        'trusted_certs': 'trustedCerts',
        'trusted_certs_enabled': 'trustedCertsEnabled',
        'upload_disabled': 'uploadDisabled',
        'version': 'version',
        'vms': 'vms',
        'wild_fire_settings': 'wildFireSettings',
        'windows_feed_enabled': 'windowsFeedEnabled'
    }

    def __init__(self, access_ca_cert=None, address=None, alerts=None, cert_settings=None, certificate_period_days=None, check_revocation=None, code_repo_settings=None, communication_port=None, console_ca_cert=None, console_custom_cert=None, console_names=None, custom_endpoint=None, custom_endpoint_ca_cert=None, custom_endpoint_credential_id=None, custom_endpoint_enabled=None, custom_labels=None, defender_settings=None, enabled=None, forensic=None, has_admin=None, host_auto_deploy=None, hpkp=None, identity_settings=None, kubernetes_audit=None, ldap_enabled=None, license_key=None, logging=None, logon=None, oauth_enabled=None, oidc_enabled=None, projects=None, proxy=None, registry=None, saml_enabled=None, scan=None, secrets_stores=None, secured_console_port=None, serverless_auto_deploy=None, serverless_scan=None, tas_droplets=None, telemetry=None, token=None, trusted_certs=None, trusted_certs_enabled=None, upload_disabled=None, version=None, vms=None, wild_fire_settings=None, windows_feed_enabled=None, local_vars_configuration=None):  # noqa: E501
        """TypesSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_ca_cert = None
        self._address = None
        self._alerts = None
        self._cert_settings = None
        self._certificate_period_days = None
        self._check_revocation = None
        self._code_repo_settings = None
        self._communication_port = None
        self._console_ca_cert = None
        self._console_custom_cert = None
        self._console_names = None
        self._custom_endpoint = None
        self._custom_endpoint_ca_cert = None
        self._custom_endpoint_credential_id = None
        self._custom_endpoint_enabled = None
        self._custom_labels = None
        self._defender_settings = None
        self._enabled = None
        self._forensic = None
        self._has_admin = None
        self._host_auto_deploy = None
        self._hpkp = None
        self._identity_settings = None
        self._kubernetes_audit = None
        self._ldap_enabled = None
        self._license_key = None
        self._logging = None
        self._logon = None
        self._oauth_enabled = None
        self._oidc_enabled = None
        self._projects = None
        self._proxy = None
        self._registry = None
        self._saml_enabled = None
        self._scan = None
        self._secrets_stores = None
        self._secured_console_port = None
        self._serverless_auto_deploy = None
        self._serverless_scan = None
        self._tas_droplets = None
        self._telemetry = None
        self._token = None
        self._trusted_certs = None
        self._trusted_certs_enabled = None
        self._upload_disabled = None
        self._version = None
        self._vms = None
        self._wild_fire_settings = None
        self._windows_feed_enabled = None
        self.discriminator = None

        if access_ca_cert is not None:
            self.access_ca_cert = access_ca_cert
        if address is not None:
            self.address = address
        if alerts is not None:
            self.alerts = alerts
        if cert_settings is not None:
            self.cert_settings = cert_settings
        if certificate_period_days is not None:
            self.certificate_period_days = certificate_period_days
        if check_revocation is not None:
            self.check_revocation = check_revocation
        if code_repo_settings is not None:
            self.code_repo_settings = code_repo_settings
        if communication_port is not None:
            self.communication_port = communication_port
        if console_ca_cert is not None:
            self.console_ca_cert = console_ca_cert
        if console_custom_cert is not None:
            self.console_custom_cert = console_custom_cert
        if console_names is not None:
            self.console_names = console_names
        if custom_endpoint is not None:
            self.custom_endpoint = custom_endpoint
        if custom_endpoint_ca_cert is not None:
            self.custom_endpoint_ca_cert = custom_endpoint_ca_cert
        if custom_endpoint_credential_id is not None:
            self.custom_endpoint_credential_id = custom_endpoint_credential_id
        if custom_endpoint_enabled is not None:
            self.custom_endpoint_enabled = custom_endpoint_enabled
        if custom_labels is not None:
            self.custom_labels = custom_labels
        if defender_settings is not None:
            self.defender_settings = defender_settings
        if enabled is not None:
            self.enabled = enabled
        if forensic is not None:
            self.forensic = forensic
        if has_admin is not None:
            self.has_admin = has_admin
        if host_auto_deploy is not None:
            self.host_auto_deploy = host_auto_deploy
        if hpkp is not None:
            self.hpkp = hpkp
        if identity_settings is not None:
            self.identity_settings = identity_settings
        if kubernetes_audit is not None:
            self.kubernetes_audit = kubernetes_audit
        if ldap_enabled is not None:
            self.ldap_enabled = ldap_enabled
        if license_key is not None:
            self.license_key = license_key
        if logging is not None:
            self.logging = logging
        if logon is not None:
            self.logon = logon
        if oauth_enabled is not None:
            self.oauth_enabled = oauth_enabled
        if oidc_enabled is not None:
            self.oidc_enabled = oidc_enabled
        if projects is not None:
            self.projects = projects
        if proxy is not None:
            self.proxy = proxy
        if registry is not None:
            self.registry = registry
        if saml_enabled is not None:
            self.saml_enabled = saml_enabled
        if scan is not None:
            self.scan = scan
        if secrets_stores is not None:
            self.secrets_stores = secrets_stores
        if secured_console_port is not None:
            self.secured_console_port = secured_console_port
        if serverless_auto_deploy is not None:
            self.serverless_auto_deploy = serverless_auto_deploy
        if serverless_scan is not None:
            self.serverless_scan = serverless_scan
        if tas_droplets is not None:
            self.tas_droplets = tas_droplets
        if telemetry is not None:
            self.telemetry = telemetry
        if token is not None:
            self.token = token
        if trusted_certs is not None:
            self.trusted_certs = trusted_certs
        if trusted_certs_enabled is not None:
            self.trusted_certs_enabled = trusted_certs_enabled
        if upload_disabled is not None:
            self.upload_disabled = upload_disabled
        if version is not None:
            self.version = version
        if vms is not None:
            self.vms = vms
        if wild_fire_settings is not None:
            self.wild_fire_settings = wild_fire_settings
        if windows_feed_enabled is not None:
            self.windows_feed_enabled = windows_feed_enabled

    @property
    def access_ca_cert(self):
        """Gets the access_ca_cert of this TypesSettings.  # noqa: E501

        AccessCACert is a custom CA certificate.   # noqa: E501

        :return: The access_ca_cert of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._access_ca_cert

    @access_ca_cert.setter
    def access_ca_cert(self, access_ca_cert):
        """Sets the access_ca_cert of this TypesSettings.

        AccessCACert is a custom CA certificate.   # noqa: E501

        :param access_ca_cert: The access_ca_cert of this TypesSettings.  # noqa: E501
        :type access_ca_cert: str
        """

        self._access_ca_cert = access_ca_cert

    @property
    def address(self):
        """Gets the address of this TypesSettings.  # noqa: E501

        Address is the intelligence service address.   # noqa: E501

        :return: The address of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TypesSettings.

        Address is the intelligence service address.   # noqa: E501

        :param address: The address of this TypesSettings.  # noqa: E501
        :type address: str
        """

        self._address = address

    @property
    def alerts(self):
        """Gets the alerts of this TypesSettings.  # noqa: E501


        :return: The alerts of this TypesSettings.  # noqa: E501
        :rtype: ApiAlertSettings
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this TypesSettings.


        :param alerts: The alerts of this TypesSettings.  # noqa: E501
        :type alerts: ApiAlertSettings
        """

        self._alerts = alerts

    @property
    def cert_settings(self):
        """Gets the cert_settings of this TypesSettings.  # noqa: E501


        :return: The cert_settings of this TypesSettings.  # noqa: E501
        :rtype: TypesCertSettings
        """
        return self._cert_settings

    @cert_settings.setter
    def cert_settings(self, cert_settings):
        """Sets the cert_settings of this TypesSettings.


        :param cert_settings: The cert_settings of this TypesSettings.  # noqa: E501
        :type cert_settings: TypesCertSettings
        """

        self._cert_settings = cert_settings

    @property
    def certificate_period_days(self):
        """Gets the certificate_period_days of this TypesSettings.  # noqa: E501

        CertificatePeriodDays is the certificates period in days.   # noqa: E501

        :return: The certificate_period_days of this TypesSettings.  # noqa: E501
        :rtype: int
        """
        return self._certificate_period_days

    @certificate_period_days.setter
    def certificate_period_days(self, certificate_period_days):
        """Sets the certificate_period_days of this TypesSettings.

        CertificatePeriodDays is the certificates period in days.   # noqa: E501

        :param certificate_period_days: The certificate_period_days of this TypesSettings.  # noqa: E501
        :type certificate_period_days: int
        """

        self._certificate_period_days = certificate_period_days

    @property
    def check_revocation(self):
        """Gets the check_revocation of this TypesSettings.  # noqa: E501

        CheckRevocation indicates whether cert revocation status is required.   # noqa: E501

        :return: The check_revocation of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._check_revocation

    @check_revocation.setter
    def check_revocation(self, check_revocation):
        """Sets the check_revocation of this TypesSettings.

        CheckRevocation indicates whether cert revocation status is required.   # noqa: E501

        :param check_revocation: The check_revocation of this TypesSettings.  # noqa: E501
        :type check_revocation: bool
        """

        self._check_revocation = check_revocation

    @property
    def code_repo_settings(self):
        """Gets the code_repo_settings of this TypesSettings.  # noqa: E501


        :return: The code_repo_settings of this TypesSettings.  # noqa: E501
        :rtype: SharedCodeRepoSettings
        """
        return self._code_repo_settings

    @code_repo_settings.setter
    def code_repo_settings(self, code_repo_settings):
        """Sets the code_repo_settings of this TypesSettings.


        :param code_repo_settings: The code_repo_settings of this TypesSettings.  # noqa: E501
        :type code_repo_settings: SharedCodeRepoSettings
        """

        self._code_repo_settings = code_repo_settings

    @property
    def communication_port(self):
        """Gets the communication_port of this TypesSettings.  # noqa: E501

        MgmtPortHttp is the console http port.   # noqa: E501

        :return: The communication_port of this TypesSettings.  # noqa: E501
        :rtype: int
        """
        return self._communication_port

    @communication_port.setter
    def communication_port(self, communication_port):
        """Sets the communication_port of this TypesSettings.

        MgmtPortHttp is the console http port.   # noqa: E501

        :param communication_port: The communication_port of this TypesSettings.  # noqa: E501
        :type communication_port: int
        """

        self._communication_port = communication_port

    @property
    def console_ca_cert(self):
        """Gets the console_ca_cert of this TypesSettings.  # noqa: E501

        ConsoleCACert is a custom CA certificate for the console.   # noqa: E501

        :return: The console_ca_cert of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._console_ca_cert

    @console_ca_cert.setter
    def console_ca_cert(self, console_ca_cert):
        """Sets the console_ca_cert of this TypesSettings.

        ConsoleCACert is a custom CA certificate for the console.   # noqa: E501

        :param console_ca_cert: The console_ca_cert of this TypesSettings.  # noqa: E501
        :type console_ca_cert: str
        """

        self._console_ca_cert = console_ca_cert

    @property
    def console_custom_cert(self):
        """Gets the console_custom_cert of this TypesSettings.  # noqa: E501


        :return: The console_custom_cert of this TypesSettings.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._console_custom_cert

    @console_custom_cert.setter
    def console_custom_cert(self, console_custom_cert):
        """Sets the console_custom_cert of this TypesSettings.


        :param console_custom_cert: The console_custom_cert of this TypesSettings.  # noqa: E501
        :type console_custom_cert: CommonSecret
        """

        self._console_custom_cert = console_custom_cert

    @property
    def console_names(self):
        """Gets the console_names of this TypesSettings.  # noqa: E501

        ConsoleNames is a list of names to use when generating the console SAN certificate.   # noqa: E501

        :return: The console_names of this TypesSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._console_names

    @console_names.setter
    def console_names(self, console_names):
        """Sets the console_names of this TypesSettings.

        ConsoleNames is a list of names to use when generating the console SAN certificate.   # noqa: E501

        :param console_names: The console_names of this TypesSettings.  # noqa: E501
        :type console_names: list[str]
        """

        self._console_names = console_names

    @property
    def custom_endpoint(self):
        """Gets the custom_endpoint of this TypesSettings.  # noqa: E501

        CustomEndpoint is the user defined custom endpoint.   # noqa: E501

        :return: The custom_endpoint of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._custom_endpoint

    @custom_endpoint.setter
    def custom_endpoint(self, custom_endpoint):
        """Sets the custom_endpoint of this TypesSettings.

        CustomEndpoint is the user defined custom endpoint.   # noqa: E501

        :param custom_endpoint: The custom_endpoint of this TypesSettings.  # noqa: E501
        :type custom_endpoint: str
        """

        self._custom_endpoint = custom_endpoint

    @property
    def custom_endpoint_ca_cert(self):
        """Gets the custom_endpoint_ca_cert of this TypesSettings.  # noqa: E501

        CustomEndpointCACert is the custom CA cert bundle for trusting the custom endpoint.   # noqa: E501

        :return: The custom_endpoint_ca_cert of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._custom_endpoint_ca_cert

    @custom_endpoint_ca_cert.setter
    def custom_endpoint_ca_cert(self, custom_endpoint_ca_cert):
        """Sets the custom_endpoint_ca_cert of this TypesSettings.

        CustomEndpointCACert is the custom CA cert bundle for trusting the custom endpoint.   # noqa: E501

        :param custom_endpoint_ca_cert: The custom_endpoint_ca_cert of this TypesSettings.  # noqa: E501
        :type custom_endpoint_ca_cert: str
        """

        self._custom_endpoint_ca_cert = custom_endpoint_ca_cert

    @property
    def custom_endpoint_credential_id(self):
        """Gets the custom_endpoint_credential_id of this TypesSettings.  # noqa: E501

        CustomEndpointCredentialID is the custom endpoint credential ID.   # noqa: E501

        :return: The custom_endpoint_credential_id of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._custom_endpoint_credential_id

    @custom_endpoint_credential_id.setter
    def custom_endpoint_credential_id(self, custom_endpoint_credential_id):
        """Sets the custom_endpoint_credential_id of this TypesSettings.

        CustomEndpointCredentialID is the custom endpoint credential ID.   # noqa: E501

        :param custom_endpoint_credential_id: The custom_endpoint_credential_id of this TypesSettings.  # noqa: E501
        :type custom_endpoint_credential_id: str
        """

        self._custom_endpoint_credential_id = custom_endpoint_credential_id

    @property
    def custom_endpoint_enabled(self):
        """Gets the custom_endpoint_enabled of this TypesSettings.  # noqa: E501

        CustomEndpointEnabled indicates that the user custom endpoint is enabled.   # noqa: E501

        :return: The custom_endpoint_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._custom_endpoint_enabled

    @custom_endpoint_enabled.setter
    def custom_endpoint_enabled(self, custom_endpoint_enabled):
        """Sets the custom_endpoint_enabled of this TypesSettings.

        CustomEndpointEnabled indicates that the user custom endpoint is enabled.   # noqa: E501

        :param custom_endpoint_enabled: The custom_endpoint_enabled of this TypesSettings.  # noqa: E501
        :type custom_endpoint_enabled: bool
        """

        self._custom_endpoint_enabled = custom_endpoint_enabled

    @property
    def custom_labels(self):
        """Gets the custom_labels of this TypesSettings.  # noqa: E501


        :return: The custom_labels of this TypesSettings.  # noqa: E501
        :rtype: SharedCustomLabelsSettings
        """
        return self._custom_labels

    @custom_labels.setter
    def custom_labels(self, custom_labels):
        """Sets the custom_labels of this TypesSettings.


        :param custom_labels: The custom_labels of this TypesSettings.  # noqa: E501
        :type custom_labels: SharedCustomLabelsSettings
        """

        self._custom_labels = custom_labels

    @property
    def defender_settings(self):
        """Gets the defender_settings of this TypesSettings.  # noqa: E501


        :return: The defender_settings of this TypesSettings.  # noqa: E501
        :rtype: DefenderSettings
        """
        return self._defender_settings

    @defender_settings.setter
    def defender_settings(self, defender_settings):
        """Sets the defender_settings of this TypesSettings.


        :param defender_settings: The defender_settings of this TypesSettings.  # noqa: E501
        :type defender_settings: DefenderSettings
        """

        self._defender_settings = defender_settings

    @property
    def enabled(self):
        """Gets the enabled of this TypesSettings.  # noqa: E501

        Enabled indicates whether intelligence service is enabled.   # noqa: E501

        :return: The enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TypesSettings.

        Enabled indicates whether intelligence service is enabled.   # noqa: E501

        :param enabled: The enabled of this TypesSettings.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def forensic(self):
        """Gets the forensic of this TypesSettings.  # noqa: E501


        :return: The forensic of this TypesSettings.  # noqa: E501
        :rtype: SharedForensicSettings
        """
        return self._forensic

    @forensic.setter
    def forensic(self, forensic):
        """Sets the forensic of this TypesSettings.


        :param forensic: The forensic of this TypesSettings.  # noqa: E501
        :type forensic: SharedForensicSettings
        """

        self._forensic = forensic

    @property
    def has_admin(self):
        """Gets the has_admin of this TypesSettings.  # noqa: E501

        HasAdmin indicates whether the admin account is initialized.   # noqa: E501

        :return: The has_admin of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._has_admin

    @has_admin.setter
    def has_admin(self, has_admin):
        """Sets the has_admin of this TypesSettings.

        HasAdmin indicates whether the admin account is initialized.   # noqa: E501

        :param has_admin: The has_admin of this TypesSettings.  # noqa: E501
        :type has_admin: bool
        """

        self._has_admin = has_admin

    @property
    def host_auto_deploy(self):
        """Gets the host_auto_deploy of this TypesSettings.  # noqa: E501

        HostAutoDeploySpecifications is a list of host auto-deploy specifications  # noqa: E501

        :return: The host_auto_deploy of this TypesSettings.  # noqa: E501
        :rtype: list[SharedHostAutoDeploySpecification]
        """
        return self._host_auto_deploy

    @host_auto_deploy.setter
    def host_auto_deploy(self, host_auto_deploy):
        """Sets the host_auto_deploy of this TypesSettings.

        HostAutoDeploySpecifications is a list of host auto-deploy specifications  # noqa: E501

        :param host_auto_deploy: The host_auto_deploy of this TypesSettings.  # noqa: E501
        :type host_auto_deploy: list[SharedHostAutoDeploySpecification]
        """

        self._host_auto_deploy = host_auto_deploy

    @property
    def hpkp(self):
        """Gets the hpkp of this TypesSettings.  # noqa: E501


        :return: The hpkp of this TypesSettings.  # noqa: E501
        :rtype: TypesHPKPSettings
        """
        return self._hpkp

    @hpkp.setter
    def hpkp(self, hpkp):
        """Sets the hpkp of this TypesSettings.


        :param hpkp: The hpkp of this TypesSettings.  # noqa: E501
        :type hpkp: TypesHPKPSettings
        """

        self._hpkp = hpkp

    @property
    def identity_settings(self):
        """Gets the identity_settings of this TypesSettings.  # noqa: E501


        :return: The identity_settings of this TypesSettings.  # noqa: E501
        :rtype: IdentitySettings
        """
        return self._identity_settings

    @identity_settings.setter
    def identity_settings(self, identity_settings):
        """Sets the identity_settings of this TypesSettings.


        :param identity_settings: The identity_settings of this TypesSettings.  # noqa: E501
        :type identity_settings: IdentitySettings
        """

        self._identity_settings = identity_settings

    @property
    def kubernetes_audit(self):
        """Gets the kubernetes_audit of this TypesSettings.  # noqa: E501


        :return: The kubernetes_audit of this TypesSettings.  # noqa: E501
        :rtype: SharedKubernetesAuditSettings
        """
        return self._kubernetes_audit

    @kubernetes_audit.setter
    def kubernetes_audit(self, kubernetes_audit):
        """Sets the kubernetes_audit of this TypesSettings.


        :param kubernetes_audit: The kubernetes_audit of this TypesSettings.  # noqa: E501
        :type kubernetes_audit: SharedKubernetesAuditSettings
        """

        self._kubernetes_audit = kubernetes_audit

    @property
    def ldap_enabled(self):
        """Gets the ldap_enabled of this TypesSettings.  # noqa: E501

        LdapEnabled indicates whether ldap is enabled.   # noqa: E501

        :return: The ldap_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ldap_enabled

    @ldap_enabled.setter
    def ldap_enabled(self, ldap_enabled):
        """Sets the ldap_enabled of this TypesSettings.

        LdapEnabled indicates whether ldap is enabled.   # noqa: E501

        :param ldap_enabled: The ldap_enabled of this TypesSettings.  # noqa: E501
        :type ldap_enabled: bool
        """

        self._ldap_enabled = ldap_enabled

    @property
    def license_key(self):
        """Gets the license_key of this TypesSettings.  # noqa: E501

        LicenseKey is the license key.   # noqa: E501

        :return: The license_key of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this TypesSettings.

        LicenseKey is the license key.   # noqa: E501

        :param license_key: The license_key of this TypesSettings.  # noqa: E501
        :type license_key: str
        """

        self._license_key = license_key

    @property
    def logging(self):
        """Gets the logging of this TypesSettings.  # noqa: E501


        :return: The logging of this TypesSettings.  # noqa: E501
        :rtype: SharedLoggingSettings
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this TypesSettings.


        :param logging: The logging of this TypesSettings.  # noqa: E501
        :type logging: SharedLoggingSettings
        """

        self._logging = logging

    @property
    def logon(self):
        """Gets the logon of this TypesSettings.  # noqa: E501


        :return: The logon of this TypesSettings.  # noqa: E501
        :rtype: TypesLogonSettings
        """
        return self._logon

    @logon.setter
    def logon(self, logon):
        """Sets the logon of this TypesSettings.


        :param logon: The logon of this TypesSettings.  # noqa: E501
        :type logon: TypesLogonSettings
        """

        self._logon = logon

    @property
    def oauth_enabled(self):
        """Gets the oauth_enabled of this TypesSettings.  # noqa: E501

        OauthEnabled indicates whether Oauth is enabled.   # noqa: E501

        :return: The oauth_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._oauth_enabled

    @oauth_enabled.setter
    def oauth_enabled(self, oauth_enabled):
        """Sets the oauth_enabled of this TypesSettings.

        OauthEnabled indicates whether Oauth is enabled.   # noqa: E501

        :param oauth_enabled: The oauth_enabled of this TypesSettings.  # noqa: E501
        :type oauth_enabled: bool
        """

        self._oauth_enabled = oauth_enabled

    @property
    def oidc_enabled(self):
        """Gets the oidc_enabled of this TypesSettings.  # noqa: E501

        OidcEnabled indicates whether OpenID connect is enabled.   # noqa: E501

        :return: The oidc_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._oidc_enabled

    @oidc_enabled.setter
    def oidc_enabled(self, oidc_enabled):
        """Sets the oidc_enabled of this TypesSettings.

        OidcEnabled indicates whether OpenID connect is enabled.   # noqa: E501

        :param oidc_enabled: The oidc_enabled of this TypesSettings.  # noqa: E501
        :type oidc_enabled: bool
        """

        self._oidc_enabled = oidc_enabled

    @property
    def projects(self):
        """Gets the projects of this TypesSettings.  # noqa: E501


        :return: The projects of this TypesSettings.  # noqa: E501
        :rtype: ApiProjectSettings
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this TypesSettings.


        :param projects: The projects of this TypesSettings.  # noqa: E501
        :type projects: ApiProjectSettings
        """

        self._projects = projects

    @property
    def proxy(self):
        """Gets the proxy of this TypesSettings.  # noqa: E501


        :return: The proxy of this TypesSettings.  # noqa: E501
        :rtype: CommonProxySettings
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this TypesSettings.


        :param proxy: The proxy of this TypesSettings.  # noqa: E501
        :type proxy: CommonProxySettings
        """

        self._proxy = proxy

    @property
    def registry(self):
        """Gets the registry of this TypesSettings.  # noqa: E501


        :return: The registry of this TypesSettings.  # noqa: E501
        :rtype: SharedRegistrySettings
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this TypesSettings.


        :param registry: The registry of this TypesSettings.  # noqa: E501
        :type registry: SharedRegistrySettings
        """

        self._registry = registry

    @property
    def saml_enabled(self):
        """Gets the saml_enabled of this TypesSettings.  # noqa: E501

        SamlEnabled indicates whether saml is enabled.   # noqa: E501

        :return: The saml_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._saml_enabled

    @saml_enabled.setter
    def saml_enabled(self, saml_enabled):
        """Sets the saml_enabled of this TypesSettings.

        SamlEnabled indicates whether saml is enabled.   # noqa: E501

        :param saml_enabled: The saml_enabled of this TypesSettings.  # noqa: E501
        :type saml_enabled: bool
        """

        self._saml_enabled = saml_enabled

    @property
    def scan(self):
        """Gets the scan of this TypesSettings.  # noqa: E501


        :return: The scan of this TypesSettings.  # noqa: E501
        :rtype: SharedScanSettings
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this TypesSettings.


        :param scan: The scan of this TypesSettings.  # noqa: E501
        :type scan: SharedScanSettings
        """

        self._scan = scan

    @property
    def secrets_stores(self):
        """Gets the secrets_stores of this TypesSettings.  # noqa: E501


        :return: The secrets_stores of this TypesSettings.  # noqa: E501
        :rtype: SharedSecretsStores
        """
        return self._secrets_stores

    @secrets_stores.setter
    def secrets_stores(self, secrets_stores):
        """Sets the secrets_stores of this TypesSettings.


        :param secrets_stores: The secrets_stores of this TypesSettings.  # noqa: E501
        :type secrets_stores: SharedSecretsStores
        """

        self._secrets_stores = secrets_stores

    @property
    def secured_console_port(self):
        """Gets the secured_console_port of this TypesSettings.  # noqa: E501

        MgmtPortHttps is the console https port.   # noqa: E501

        :return: The secured_console_port of this TypesSettings.  # noqa: E501
        :rtype: int
        """
        return self._secured_console_port

    @secured_console_port.setter
    def secured_console_port(self, secured_console_port):
        """Sets the secured_console_port of this TypesSettings.

        MgmtPortHttps is the console https port.   # noqa: E501

        :param secured_console_port: The secured_console_port of this TypesSettings.  # noqa: E501
        :type secured_console_port: int
        """

        self._secured_console_port = secured_console_port

    @property
    def serverless_auto_deploy(self):
        """Gets the serverless_auto_deploy of this TypesSettings.  # noqa: E501

        ServerlessAutoDeploySpecifications is a list of serverless auto-deploy specifications  # noqa: E501

        :return: The serverless_auto_deploy of this TypesSettings.  # noqa: E501
        :rtype: list[SharedServerlessAutoDeploySpecification]
        """
        return self._serverless_auto_deploy

    @serverless_auto_deploy.setter
    def serverless_auto_deploy(self, serverless_auto_deploy):
        """Sets the serverless_auto_deploy of this TypesSettings.

        ServerlessAutoDeploySpecifications is a list of serverless auto-deploy specifications  # noqa: E501

        :param serverless_auto_deploy: The serverless_auto_deploy of this TypesSettings.  # noqa: E501
        :type serverless_auto_deploy: list[SharedServerlessAutoDeploySpecification]
        """

        self._serverless_auto_deploy = serverless_auto_deploy

    @property
    def serverless_scan(self):
        """Gets the serverless_scan of this TypesSettings.  # noqa: E501

        ServerlessScan is the serverless scanning settings.   # noqa: E501

        :return: The serverless_scan of this TypesSettings.  # noqa: E501
        :rtype: list[SharedServerlessScanSpecification]
        """
        return self._serverless_scan

    @serverless_scan.setter
    def serverless_scan(self, serverless_scan):
        """Sets the serverless_scan of this TypesSettings.

        ServerlessScan is the serverless scanning settings.   # noqa: E501

        :param serverless_scan: The serverless_scan of this TypesSettings.  # noqa: E501
        :type serverless_scan: list[SharedServerlessScanSpecification]
        """

        self._serverless_scan = serverless_scan

    @property
    def tas_droplets(self):
        """Gets the tas_droplets of this TypesSettings.  # noqa: E501

        TASDropletsSpecification is the TAS droplets scanning settings.   # noqa: E501

        :return: The tas_droplets of this TypesSettings.  # noqa: E501
        :rtype: list[SharedTASDropletSpecification]
        """
        return self._tas_droplets

    @tas_droplets.setter
    def tas_droplets(self, tas_droplets):
        """Sets the tas_droplets of this TypesSettings.

        TASDropletsSpecification is the TAS droplets scanning settings.   # noqa: E501

        :param tas_droplets: The tas_droplets of this TypesSettings.  # noqa: E501
        :type tas_droplets: list[SharedTASDropletSpecification]
        """

        self._tas_droplets = tas_droplets

    @property
    def telemetry(self):
        """Gets the telemetry of this TypesSettings.  # noqa: E501


        :return: The telemetry of this TypesSettings.  # noqa: E501
        :rtype: TypesTelemetrySettings
        """
        return self._telemetry

    @telemetry.setter
    def telemetry(self, telemetry):
        """Sets the telemetry of this TypesSettings.


        :param telemetry: The telemetry of this TypesSettings.  # noqa: E501
        :type telemetry: TypesTelemetrySettings
        """

        self._telemetry = telemetry

    @property
    def token(self):
        """Gets the token of this TypesSettings.  # noqa: E501

        Token is the token used to access intelligence service.   # noqa: E501

        :return: The token of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TypesSettings.

        Token is the token used to access intelligence service.   # noqa: E501

        :param token: The token of this TypesSettings.  # noqa: E501
        :type token: str
        """

        self._token = token

    @property
    def trusted_certs(self):
        """Gets the trusted_certs of this TypesSettings.  # noqa: E501

        TrustedCerts is the list of trusted cert to allow in docker access scenarios.   # noqa: E501

        :return: The trusted_certs of this TypesSettings.  # noqa: E501
        :rtype: list[SharedTrustedCertSignature]
        """
        return self._trusted_certs

    @trusted_certs.setter
    def trusted_certs(self, trusted_certs):
        """Sets the trusted_certs of this TypesSettings.

        TrustedCerts is the list of trusted cert to allow in docker access scenarios.   # noqa: E501

        :param trusted_certs: The trusted_certs of this TypesSettings.  # noqa: E501
        :type trusted_certs: list[SharedTrustedCertSignature]
        """

        self._trusted_certs = trusted_certs

    @property
    def trusted_certs_enabled(self):
        """Gets the trusted_certs_enabled of this TypesSettings.  # noqa: E501

        TrustedCertsEnabled indicates whether to enable the trusted certificate feature.   # noqa: E501

        :return: The trusted_certs_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._trusted_certs_enabled

    @trusted_certs_enabled.setter
    def trusted_certs_enabled(self, trusted_certs_enabled):
        """Sets the trusted_certs_enabled of this TypesSettings.

        TrustedCertsEnabled indicates whether to enable the trusted certificate feature.   # noqa: E501

        :param trusted_certs_enabled: The trusted_certs_enabled of this TypesSettings.  # noqa: E501
        :type trusted_certs_enabled: bool
        """

        self._trusted_certs_enabled = trusted_certs_enabled

    @property
    def upload_disabled(self):
        """Gets the upload_disabled of this TypesSettings.  # noqa: E501

        UploadDisabled indicates whether logs uploading is disabled.   # noqa: E501

        :return: The upload_disabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._upload_disabled

    @upload_disabled.setter
    def upload_disabled(self, upload_disabled):
        """Sets the upload_disabled of this TypesSettings.

        UploadDisabled indicates whether logs uploading is disabled.   # noqa: E501

        :param upload_disabled: The upload_disabled of this TypesSettings.  # noqa: E501
        :type upload_disabled: bool
        """

        self._upload_disabled = upload_disabled

    @property
    def version(self):
        """Gets the version of this TypesSettings.  # noqa: E501

        Version is the current console version.   # noqa: E501

        :return: The version of this TypesSettings.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TypesSettings.

        Version is the current console version.   # noqa: E501

        :param version: The version of this TypesSettings.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def vms(self):
        """Gets the vms of this TypesSettings.  # noqa: E501

        VMSpecifications is a list of VM specifications  # noqa: E501

        :return: The vms of this TypesSettings.  # noqa: E501
        :rtype: list[SharedVMSpecification]
        """
        return self._vms

    @vms.setter
    def vms(self, vms):
        """Sets the vms of this TypesSettings.

        VMSpecifications is a list of VM specifications  # noqa: E501

        :param vms: The vms of this TypesSettings.  # noqa: E501
        :type vms: list[SharedVMSpecification]
        """

        self._vms = vms

    @property
    def wild_fire_settings(self):
        """Gets the wild_fire_settings of this TypesSettings.  # noqa: E501


        :return: The wild_fire_settings of this TypesSettings.  # noqa: E501
        :rtype: SharedWildFireSettings
        """
        return self._wild_fire_settings

    @wild_fire_settings.setter
    def wild_fire_settings(self, wild_fire_settings):
        """Sets the wild_fire_settings of this TypesSettings.


        :param wild_fire_settings: The wild_fire_settings of this TypesSettings.  # noqa: E501
        :type wild_fire_settings: SharedWildFireSettings
        """

        self._wild_fire_settings = wild_fire_settings

    @property
    def windows_feed_enabled(self):
        """Gets the windows_feed_enabled of this TypesSettings.  # noqa: E501

        WindowsFeedEnabled indicates whether windows feed is enabled.   # noqa: E501

        :return: The windows_feed_enabled of this TypesSettings.  # noqa: E501
        :rtype: bool
        """
        return self._windows_feed_enabled

    @windows_feed_enabled.setter
    def windows_feed_enabled(self, windows_feed_enabled):
        """Sets the windows_feed_enabled of this TypesSettings.

        WindowsFeedEnabled indicates whether windows feed is enabled.   # noqa: E501

        :param windows_feed_enabled: The windows_feed_enabled of this TypesSettings.  # noqa: E501
        :type windows_feed_enabled: bool
        """

        self._windows_feed_enabled = windows_feed_enabled

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesSettings):
            return True

        return self.to_dict() != other.to_dict()
