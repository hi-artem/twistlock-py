# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class WaasAccessControls(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alert': 'list[str]',
        'allow': 'list[str]',
        'allow_mode': 'bool',
        'enabled': 'bool',
        'fallback_effect': 'WaasEffect',
        'prevent': 'list[str]'
    }

    attribute_map = {
        'alert': 'alert',
        'allow': 'allow',
        'allow_mode': 'allowMode',
        'enabled': 'enabled',
        'fallback_effect': 'fallbackEffect',
        'prevent': 'prevent'
    }

    def __init__(self, alert=None, allow=None, allow_mode=None, enabled=None, fallback_effect=None, prevent=None, local_vars_configuration=None):  # noqa: E501
        """WaasAccessControls - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._alert = None
        self._allow = None
        self._allow_mode = None
        self._enabled = None
        self._fallback_effect = None
        self._prevent = None
        self.discriminator = None

        if alert is not None:
            self.alert = alert
        if allow is not None:
            self.allow = allow
        if allow_mode is not None:
            self.allow_mode = allow_mode
        if enabled is not None:
            self.enabled = enabled
        if fallback_effect is not None:
            self.fallback_effect = fallback_effect
        if prevent is not None:
            self.prevent = prevent

    @property
    def alert(self):
        """Gets the alert of this WaasAccessControls.  # noqa: E501

        Alert are the denied sources for which we alert.   # noqa: E501

        :return: The alert of this WaasAccessControls.  # noqa: E501
        :rtype: list[str]
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this WaasAccessControls.

        Alert are the denied sources for which we alert.   # noqa: E501

        :param alert: The alert of this WaasAccessControls.  # noqa: E501
        :type alert: list[str]
        """

        self._alert = alert

    @property
    def allow(self):
        """Gets the allow of this WaasAccessControls.  # noqa: E501

        Allow are the allowed sources for which we don't alert or prevent.   # noqa: E501

        :return: The allow of this WaasAccessControls.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow

    @allow.setter
    def allow(self, allow):
        """Sets the allow of this WaasAccessControls.

        Allow are the allowed sources for which we don't alert or prevent.   # noqa: E501

        :param allow: The allow of this WaasAccessControls.  # noqa: E501
        :type allow: list[str]
        """

        self._allow = allow

    @property
    def allow_mode(self):
        """Gets the allow_mode of this WaasAccessControls.  # noqa: E501

        AllowMode indicates allowlist (true) or denylist (false) mode.   # noqa: E501

        :return: The allow_mode of this WaasAccessControls.  # noqa: E501
        :rtype: bool
        """
        return self._allow_mode

    @allow_mode.setter
    def allow_mode(self, allow_mode):
        """Sets the allow_mode of this WaasAccessControls.

        AllowMode indicates allowlist (true) or denylist (false) mode.   # noqa: E501

        :param allow_mode: The allow_mode of this WaasAccessControls.  # noqa: E501
        :type allow_mode: bool
        """

        self._allow_mode = allow_mode

    @property
    def enabled(self):
        """Gets the enabled of this WaasAccessControls.  # noqa: E501

        Enabled indicates if access controls protection is enabled.   # noqa: E501

        :return: The enabled of this WaasAccessControls.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WaasAccessControls.

        Enabled indicates if access controls protection is enabled.   # noqa: E501

        :param enabled: The enabled of this WaasAccessControls.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def fallback_effect(self):
        """Gets the fallback_effect of this WaasAccessControls.  # noqa: E501


        :return: The fallback_effect of this WaasAccessControls.  # noqa: E501
        :rtype: WaasEffect
        """
        return self._fallback_effect

    @fallback_effect.setter
    def fallback_effect(self, fallback_effect):
        """Sets the fallback_effect of this WaasAccessControls.


        :param fallback_effect: The fallback_effect of this WaasAccessControls.  # noqa: E501
        :type fallback_effect: WaasEffect
        """

        self._fallback_effect = fallback_effect

    @property
    def prevent(self):
        """Gets the prevent of this WaasAccessControls.  # noqa: E501

        Prevent are the denied sources.   # noqa: E501

        :return: The prevent of this WaasAccessControls.  # noqa: E501
        :rtype: list[str]
        """
        return self._prevent

    @prevent.setter
    def prevent(self, prevent):
        """Sets the prevent of this WaasAccessControls.

        Prevent are the denied sources.   # noqa: E501

        :param prevent: The prevent of this WaasAccessControls.  # noqa: E501
        :type prevent: list[str]
        """

        self._prevent = prevent

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaasAccessControls):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WaasAccessControls):
            return True

        return self.to_dict() != other.to_dict()
