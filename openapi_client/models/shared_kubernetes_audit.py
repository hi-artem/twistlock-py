# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedKubernetesAudit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attack_techniques': 'list[MitreTechnique]',
        'authorization_info': 'dict(str, str)',
        'event_blob': 'str',
        'message': 'str',
        'request_uri': 'str',
        'resources': 'str',
        'source_ips': 'list[str]',
        'time': 'datetime',
        'user': 'SharedKubernetesEventUserInfo',
        'verb': 'str'
    }

    attribute_map = {
        'attack_techniques': 'attackTechniques',
        'authorization_info': 'authorizationInfo',
        'event_blob': 'eventBlob',
        'message': 'message',
        'request_uri': 'requestURI',
        'resources': 'resources',
        'source_ips': 'sourceIPs',
        'time': 'time',
        'user': 'user',
        'verb': 'verb'
    }

    def __init__(self, attack_techniques=None, authorization_info=None, event_blob=None, message=None, request_uri=None, resources=None, source_ips=None, time=None, user=None, verb=None, local_vars_configuration=None):  # noqa: E501
        """SharedKubernetesAudit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._attack_techniques = None
        self._authorization_info = None
        self._event_blob = None
        self._message = None
        self._request_uri = None
        self._resources = None
        self._source_ips = None
        self._time = None
        self._user = None
        self._verb = None
        self.discriminator = None

        if attack_techniques is not None:
            self.attack_techniques = attack_techniques
        if authorization_info is not None:
            self.authorization_info = authorization_info
        if event_blob is not None:
            self.event_blob = event_blob
        if message is not None:
            self.message = message
        if request_uri is not None:
            self.request_uri = request_uri
        if resources is not None:
            self.resources = resources
        if source_ips is not None:
            self.source_ips = source_ips
        if time is not None:
            self.time = time
        if user is not None:
            self.user = user
        if verb is not None:
            self.verb = verb

    @property
    def attack_techniques(self):
        """Gets the attack_techniques of this SharedKubernetesAudit.  # noqa: E501

        AttackTechniques are the MITRE attack techniques.   # noqa: E501

        :return: The attack_techniques of this SharedKubernetesAudit.  # noqa: E501
        :rtype: list[MitreTechnique]
        """
        return self._attack_techniques

    @attack_techniques.setter
    def attack_techniques(self, attack_techniques):
        """Sets the attack_techniques of this SharedKubernetesAudit.

        AttackTechniques are the MITRE attack techniques.   # noqa: E501

        :param attack_techniques: The attack_techniques of this SharedKubernetesAudit.  # noqa: E501
        :type attack_techniques: list[MitreTechnique]
        """

        self._attack_techniques = attack_techniques

    @property
    def authorization_info(self):
        """Gets the authorization_info of this SharedKubernetesAudit.  # noqa: E501

        AuthorizationInfo holds the original event authorization info.   # noqa: E501

        :return: The authorization_info of this SharedKubernetesAudit.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._authorization_info

    @authorization_info.setter
    def authorization_info(self, authorization_info):
        """Sets the authorization_info of this SharedKubernetesAudit.

        AuthorizationInfo holds the original event authorization info.   # noqa: E501

        :param authorization_info: The authorization_info of this SharedKubernetesAudit.  # noqa: E501
        :type authorization_info: dict(str, str)
        """

        self._authorization_info = authorization_info

    @property
    def event_blob(self):
        """Gets the event_blob of this SharedKubernetesAudit.  # noqa: E501

        EventBlob is the original event that caused this audit.   # noqa: E501

        :return: The event_blob of this SharedKubernetesAudit.  # noqa: E501
        :rtype: str
        """
        return self._event_blob

    @event_blob.setter
    def event_blob(self, event_blob):
        """Sets the event_blob of this SharedKubernetesAudit.

        EventBlob is the original event that caused this audit.   # noqa: E501

        :param event_blob: The event_blob of this SharedKubernetesAudit.  # noqa: E501
        :type event_blob: str
        """

        self._event_blob = event_blob

    @property
    def message(self):
        """Gets the message of this SharedKubernetesAudit.  # noqa: E501

        Message is the user defined message which appears on audit.   # noqa: E501

        :return: The message of this SharedKubernetesAudit.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SharedKubernetesAudit.

        Message is the user defined message which appears on audit.   # noqa: E501

        :param message: The message of this SharedKubernetesAudit.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def request_uri(self):
        """Gets the request_uri of this SharedKubernetesAudit.  # noqa: E501

        RequestURI is the request URI as sent by the client to a server.   # noqa: E501

        :return: The request_uri of this SharedKubernetesAudit.  # noqa: E501
        :rtype: str
        """
        return self._request_uri

    @request_uri.setter
    def request_uri(self, request_uri):
        """Sets the request_uri of this SharedKubernetesAudit.

        RequestURI is the request URI as sent by the client to a server.   # noqa: E501

        :param request_uri: The request_uri of this SharedKubernetesAudit.  # noqa: E501
        :type request_uri: str
        """

        self._request_uri = request_uri

    @property
    def resources(self):
        """Gets the resources of this SharedKubernetesAudit.  # noqa: E501

        Resource represents the resource that is impacted by this event.   # noqa: E501

        :return: The resources of this SharedKubernetesAudit.  # noqa: E501
        :rtype: str
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this SharedKubernetesAudit.

        Resource represents the resource that is impacted by this event.   # noqa: E501

        :param resources: The resources of this SharedKubernetesAudit.  # noqa: E501
        :type resources: str
        """

        self._resources = resources

    @property
    def source_ips(self):
        """Gets the source_ips of this SharedKubernetesAudit.  # noqa: E501

        Source IPs, from where the request originated and intermediate proxies (optional).   # noqa: E501

        :return: The source_ips of this SharedKubernetesAudit.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_ips

    @source_ips.setter
    def source_ips(self, source_ips):
        """Sets the source_ips of this SharedKubernetesAudit.

        Source IPs, from where the request originated and intermediate proxies (optional).   # noqa: E501

        :param source_ips: The source_ips of this SharedKubernetesAudit.  # noqa: E501
        :type source_ips: list[str]
        """

        self._source_ips = source_ips

    @property
    def time(self):
        """Gets the time of this SharedKubernetesAudit.  # noqa: E501

        Time is the time at which the request was generated.   # noqa: E501

        :return: The time of this SharedKubernetesAudit.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedKubernetesAudit.

        Time is the time at which the request was generated.   # noqa: E501

        :param time: The time of this SharedKubernetesAudit.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def user(self):
        """Gets the user of this SharedKubernetesAudit.  # noqa: E501


        :return: The user of this SharedKubernetesAudit.  # noqa: E501
        :rtype: SharedKubernetesEventUserInfo
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SharedKubernetesAudit.


        :param user: The user of this SharedKubernetesAudit.  # noqa: E501
        :type user: SharedKubernetesEventUserInfo
        """

        self._user = user

    @property
    def verb(self):
        """Gets the verb of this SharedKubernetesAudit.  # noqa: E501

        Verb is the kubernetes verb associated with the request.   # noqa: E501

        :return: The verb of this SharedKubernetesAudit.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this SharedKubernetesAudit.

        Verb is the kubernetes verb associated with the request.   # noqa: E501

        :param verb: The verb of this SharedKubernetesAudit.  # noqa: E501
        :type verb: str
        """

        self._verb = verb

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedKubernetesAudit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedKubernetesAudit):
            return True

        return self.to_dict() != other.to_dict()
