# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedLoggingSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'console_address': 'str',
        'enable_metrics_collection': 'bool',
        'include_runtime_link': 'bool',
        'stdout': 'SharedLoggerSetting',
        'syslog': 'SharedSyslogSettings'
    }

    attribute_map = {
        'console_address': 'consoleAddress',
        'enable_metrics_collection': 'enableMetricsCollection',
        'include_runtime_link': 'includeRuntimeLink',
        'stdout': 'stdout',
        'syslog': 'syslog'
    }

    def __init__(self, console_address=None, enable_metrics_collection=None, include_runtime_link=None, stdout=None, syslog=None, local_vars_configuration=None):  # noqa: E501
        """SharedLoggingSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._console_address = None
        self._enable_metrics_collection = None
        self._include_runtime_link = None
        self._stdout = None
        self._syslog = None
        self.discriminator = None

        if console_address is not None:
            self.console_address = console_address
        if enable_metrics_collection is not None:
            self.enable_metrics_collection = enable_metrics_collection
        if include_runtime_link is not None:
            self.include_runtime_link = include_runtime_link
        if stdout is not None:
            self.stdout = stdout
        if syslog is not None:
            self.syslog = syslog

    @property
    def console_address(self):
        """Gets the console_address of this SharedLoggingSettings.  # noqa: E501

        ConsoleAddress is the console address used by the admin to access the console, used for creating links for runtime events.   # noqa: E501

        :return: The console_address of this SharedLoggingSettings.  # noqa: E501
        :rtype: str
        """
        return self._console_address

    @console_address.setter
    def console_address(self, console_address):
        """Sets the console_address of this SharedLoggingSettings.

        ConsoleAddress is the console address used by the admin to access the console, used for creating links for runtime events.   # noqa: E501

        :param console_address: The console_address of this SharedLoggingSettings.  # noqa: E501
        :type console_address: str
        """

        self._console_address = console_address

    @property
    def enable_metrics_collection(self):
        """Gets the enable_metrics_collection of this SharedLoggingSettings.  # noqa: E501

        EnableMetricsCollection indicates whether metric collections feature is enabled.   # noqa: E501

        :return: The enable_metrics_collection of this SharedLoggingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_metrics_collection

    @enable_metrics_collection.setter
    def enable_metrics_collection(self, enable_metrics_collection):
        """Sets the enable_metrics_collection of this SharedLoggingSettings.

        EnableMetricsCollection indicates whether metric collections feature is enabled.   # noqa: E501

        :param enable_metrics_collection: The enable_metrics_collection of this SharedLoggingSettings.  # noqa: E501
        :type enable_metrics_collection: bool
        """

        self._enable_metrics_collection = enable_metrics_collection

    @property
    def include_runtime_link(self):
        """Gets the include_runtime_link of this SharedLoggingSettings.  # noqa: E501

        IncludeRuntimeLink indicates whether link to forensic event should be included in the output.   # noqa: E501

        :return: The include_runtime_link of this SharedLoggingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_runtime_link

    @include_runtime_link.setter
    def include_runtime_link(self, include_runtime_link):
        """Sets the include_runtime_link of this SharedLoggingSettings.

        IncludeRuntimeLink indicates whether link to forensic event should be included in the output.   # noqa: E501

        :param include_runtime_link: The include_runtime_link of this SharedLoggingSettings.  # noqa: E501
        :type include_runtime_link: bool
        """

        self._include_runtime_link = include_runtime_link

    @property
    def stdout(self):
        """Gets the stdout of this SharedLoggingSettings.  # noqa: E501


        :return: The stdout of this SharedLoggingSettings.  # noqa: E501
        :rtype: SharedLoggerSetting
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this SharedLoggingSettings.


        :param stdout: The stdout of this SharedLoggingSettings.  # noqa: E501
        :type stdout: SharedLoggerSetting
        """

        self._stdout = stdout

    @property
    def syslog(self):
        """Gets the syslog of this SharedLoggingSettings.  # noqa: E501


        :return: The syslog of this SharedLoggingSettings.  # noqa: E501
        :rtype: SharedSyslogSettings
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """Sets the syslog of this SharedLoggingSettings.


        :param syslog: The syslog of this SharedLoggingSettings.  # noqa: E501
        :type syslog: SharedSyslogSettings
        """

        self._syslog = syslog

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedLoggingSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedLoggingSettings):
            return True

        return self.to_dict() != other.to_dict()
