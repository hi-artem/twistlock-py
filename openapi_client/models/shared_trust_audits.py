# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedTrustAudits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'audits': 'dict(str, SharedTrustRegistryRepoAudits)',
        'cluster': 'str',
        'collections': 'list[str]',
        'image_name': 'str',
        'label': 'str',
        'os': 'str',
        'resource': 'CommonRuntimeResource',
        'time': 'datetime',
        'total': 'int'
    }

    attribute_map = {
        'id': '_id',
        'audits': 'audits',
        'cluster': 'cluster',
        'collections': 'collections',
        'image_name': 'imageName',
        'label': 'label',
        'os': 'os',
        'resource': 'resource',
        'time': 'time',
        'total': 'total'
    }

    def __init__(self, id=None, audits=None, cluster=None, collections=None, image_name=None, label=None, os=None, resource=None, time=None, total=None, local_vars_configuration=None):  # noqa: E501
        """SharedTrustAudits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._audits = None
        self._cluster = None
        self._collections = None
        self._image_name = None
        self._label = None
        self._os = None
        self._resource = None
        self._time = None
        self._total = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if audits is not None:
            self.audits = audits
        if cluster is not None:
            self.cluster = cluster
        if collections is not None:
            self.collections = collections
        if image_name is not None:
            self.image_name = image_name
        if label is not None:
            self.label = label
        if os is not None:
            self.os = os
        if resource is not None:
            self.resource = resource
        if time is not None:
            self.time = time
        if total is not None:
            self.total = total

    @property
    def id(self):
        """Gets the id of this SharedTrustAudits.  # noqa: E501

        ProfileID is the runtime profile ID.   # noqa: E501

        :return: The id of this SharedTrustAudits.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SharedTrustAudits.

        ProfileID is the runtime profile ID.   # noqa: E501

        :param id: The id of this SharedTrustAudits.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def audits(self):
        """Gets the audits of this SharedTrustAudits.  # noqa: E501

        Audits is a map from trust status (audits are only for untrusted type) to the audit events list.   # noqa: E501

        :return: The audits of this SharedTrustAudits.  # noqa: E501
        :rtype: dict(str, SharedTrustRegistryRepoAudits)
        """
        return self._audits

    @audits.setter
    def audits(self, audits):
        """Sets the audits of this SharedTrustAudits.

        Audits is a map from trust status (audits are only for untrusted type) to the audit events list.   # noqa: E501

        :param audits: The audits of this SharedTrustAudits.  # noqa: E501
        :type audits: dict(str, SharedTrustRegistryRepoAudits)
        """

        self._audits = audits

    @property
    def cluster(self):
        """Gets the cluster of this SharedTrustAudits.  # noqa: E501

        Cluster is the cluster from which the audit originated.   # noqa: E501

        :return: The cluster of this SharedTrustAudits.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this SharedTrustAudits.

        Cluster is the cluster from which the audit originated.   # noqa: E501

        :param cluster: The cluster of this SharedTrustAudits.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def collections(self):
        """Gets the collections of this SharedTrustAudits.  # noqa: E501

        Collections are collections to which this audit applies.   # noqa: E501

        :return: The collections of this SharedTrustAudits.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedTrustAudits.

        Collections are collections to which this audit applies.   # noqa: E501

        :param collections: The collections of this SharedTrustAudits.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def image_name(self):
        """Gets the image_name of this SharedTrustAudits.  # noqa: E501

        ImageName is the container image name.   # noqa: E501

        :return: The image_name of this SharedTrustAudits.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this SharedTrustAudits.

        ImageName is the container image name.   # noqa: E501

        :param image_name: The image_name of this SharedTrustAudits.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def label(self):
        """Gets the label of this SharedTrustAudits.  # noqa: E501

        Label represents the container deployment label.   # noqa: E501

        :return: The label of this SharedTrustAudits.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SharedTrustAudits.

        Label represents the container deployment label.   # noqa: E501

        :param label: The label of this SharedTrustAudits.  # noqa: E501
        :type label: str
        """

        self._label = label

    @property
    def os(self):
        """Gets the os of this SharedTrustAudits.  # noqa: E501

        OS is the operating system distribution.   # noqa: E501

        :return: The os of this SharedTrustAudits.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this SharedTrustAudits.

        OS is the operating system distribution.   # noqa: E501

        :param os: The os of this SharedTrustAudits.  # noqa: E501
        :type os: str
        """

        self._os = os

    @property
    def resource(self):
        """Gets the resource of this SharedTrustAudits.  # noqa: E501


        :return: The resource of this SharedTrustAudits.  # noqa: E501
        :rtype: CommonRuntimeResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this SharedTrustAudits.


        :param resource: The resource of this SharedTrustAudits.  # noqa: E501
        :type resource: CommonRuntimeResource
        """

        self._resource = resource

    @property
    def time(self):
        """Gets the time of this SharedTrustAudits.  # noqa: E501

        Time is the UTC time of the last audit event.   # noqa: E501

        :return: The time of this SharedTrustAudits.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SharedTrustAudits.

        Time is the UTC time of the last audit event.   # noqa: E501

        :param time: The time of this SharedTrustAudits.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def total(self):
        """Gets the total of this SharedTrustAudits.  # noqa: E501

        Total is the total count of audits per runtime profile.   # noqa: E501

        :return: The total of this SharedTrustAudits.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SharedTrustAudits.

        Total is the total count of audits per runtime profile.   # noqa: E501

        :param total: The total of this SharedTrustAudits.  # noqa: E501
        :type total: int
        """

        self._total = total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedTrustAudits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedTrustAudits):
            return True

        return self.to_dict() != other.to_dict()
