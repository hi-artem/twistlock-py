# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedEncodeServerlessRuleOpts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'console_addr': 'str',
        'function': 'str',
        'proxy': 'CommonProxySettings',
        'region': 'str',
        'update_interval_ms': 'int'
    }

    attribute_map = {
        'console_addr': 'consoleAddr',
        'function': 'function',
        'proxy': 'proxy',
        'region': 'region',
        'update_interval_ms': 'updateIntervalMs'
    }

    def __init__(self, console_addr=None, function=None, proxy=None, region=None, update_interval_ms=None, local_vars_configuration=None):  # noqa: E501
        """SharedEncodeServerlessRuleOpts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._console_addr = None
        self._function = None
        self._proxy = None
        self._region = None
        self._update_interval_ms = None
        self.discriminator = None

        if console_addr is not None:
            self.console_addr = console_addr
        if function is not None:
            self.function = function
        if proxy is not None:
            self.proxy = proxy
        if region is not None:
            self.region = region
        if update_interval_ms is not None:
            self.update_interval_ms = update_interval_ms

    @property
    def console_addr(self):
        """Gets the console_addr of this SharedEncodeServerlessRuleOpts.  # noqa: E501

        ConsoleAddr is the remote console address.   # noqa: E501

        :return: The console_addr of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :rtype: str
        """
        return self._console_addr

    @console_addr.setter
    def console_addr(self, console_addr):
        """Sets the console_addr of this SharedEncodeServerlessRuleOpts.

        ConsoleAddr is the remote console address.   # noqa: E501

        :param console_addr: The console_addr of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :type console_addr: str
        """

        self._console_addr = console_addr

    @property
    def function(self):
        """Gets the function of this SharedEncodeServerlessRuleOpts.  # noqa: E501

        Function is the name of the function.   # noqa: E501

        :return: The function of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this SharedEncodeServerlessRuleOpts.

        Function is the name of the function.   # noqa: E501

        :param function: The function of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :type function: str
        """

        self._function = function

    @property
    def proxy(self):
        """Gets the proxy of this SharedEncodeServerlessRuleOpts.  # noqa: E501


        :return: The proxy of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :rtype: CommonProxySettings
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this SharedEncodeServerlessRuleOpts.


        :param proxy: The proxy of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :type proxy: CommonProxySettings
        """

        self._proxy = proxy

    @property
    def region(self):
        """Gets the region of this SharedEncodeServerlessRuleOpts.  # noqa: E501

        Region is the function's cloud provider region.   # noqa: E501

        :return: The region of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SharedEncodeServerlessRuleOpts.

        Region is the function's cloud provider region.   # noqa: E501

        :param region: The region of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def update_interval_ms(self):
        """Gets the update_interval_ms of this SharedEncodeServerlessRuleOpts.  # noqa: E501

        UpdateIntervalMs is the interval between defender policy requests from the console in milliseconds.   # noqa: E501

        :return: The update_interval_ms of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :rtype: int
        """
        return self._update_interval_ms

    @update_interval_ms.setter
    def update_interval_ms(self, update_interval_ms):
        """Sets the update_interval_ms of this SharedEncodeServerlessRuleOpts.

        UpdateIntervalMs is the interval between defender policy requests from the console in milliseconds.   # noqa: E501

        :param update_interval_ms: The update_interval_ms of this SharedEncodeServerlessRuleOpts.  # noqa: E501
        :type update_interval_ms: int
        """

        self._update_interval_ms = update_interval_ms

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedEncodeServerlessRuleOpts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedEncodeServerlessRuleOpts):
            return True

        return self.to_dict() != other.to_dict()
