# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class DefenderScanStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'completed': 'bool',
        'errors': 'list[str]',
        'hostname': 'str',
        'scan_time': 'datetime',
        'scanning': 'bool',
        'selective': 'bool'
    }

    attribute_map = {
        'completed': 'completed',
        'errors': 'errors',
        'hostname': 'hostname',
        'scan_time': 'scanTime',
        'scanning': 'scanning',
        'selective': 'selective'
    }

    def __init__(self, completed=None, errors=None, hostname=None, scan_time=None, scanning=None, selective=None, local_vars_configuration=None):  # noqa: E501
        """DefenderScanStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._completed = None
        self._errors = None
        self._hostname = None
        self._scan_time = None
        self._scanning = None
        self._selective = None
        self.discriminator = None

        if completed is not None:
            self.completed = completed
        if errors is not None:
            self.errors = errors
        if hostname is not None:
            self.hostname = hostname
        if scan_time is not None:
            self.scan_time = scan_time
        if scanning is not None:
            self.scanning = scanning
        if selective is not None:
            self.selective = selective

    @property
    def completed(self):
        """Gets the completed of this DefenderScanStatus.  # noqa: E501

        Indicates if scanning has successfully completed (true) or not (false).   # noqa: E501

        :return: The completed of this DefenderScanStatus.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this DefenderScanStatus.

        Indicates if scanning has successfully completed (true) or not (false).   # noqa: E501

        :param completed: The completed of this DefenderScanStatus.  # noqa: E501
        :type completed: bool
        """

        self._completed = completed

    @property
    def errors(self):
        """Gets the errors of this DefenderScanStatus.  # noqa: E501

        List of errors that occurred during the last scan.   # noqa: E501

        :return: The errors of this DefenderScanStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this DefenderScanStatus.

        List of errors that occurred during the last scan.   # noqa: E501

        :param errors: The errors of this DefenderScanStatus.  # noqa: E501
        :type errors: list[str]
        """

        self._errors = errors

    @property
    def hostname(self):
        """Gets the hostname of this DefenderScanStatus.  # noqa: E501

        Name of the host where Defender runs.   # noqa: E501

        :return: The hostname of this DefenderScanStatus.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DefenderScanStatus.

        Name of the host where Defender runs.   # noqa: E501

        :param hostname: The hostname of this DefenderScanStatus.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def scan_time(self):
        """Gets the scan_time of this DefenderScanStatus.  # noqa: E501

        Datetime of the last completed scan.   # noqa: E501

        :return: The scan_time of this DefenderScanStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._scan_time

    @scan_time.setter
    def scan_time(self, scan_time):
        """Sets the scan_time of this DefenderScanStatus.

        Datetime of the last completed scan.   # noqa: E501

        :param scan_time: The scan_time of this DefenderScanStatus.  # noqa: E501
        :type scan_time: datetime
        """

        self._scan_time = scan_time

    @property
    def scanning(self):
        """Gets the scanning of this DefenderScanStatus.  # noqa: E501

        Indicates whether scanning is in progress (true) or not (false).   # noqa: E501

        :return: The scanning of this DefenderScanStatus.  # noqa: E501
        :rtype: bool
        """
        return self._scanning

    @scanning.setter
    def scanning(self, scanning):
        """Sets the scanning of this DefenderScanStatus.

        Indicates whether scanning is in progress (true) or not (false).   # noqa: E501

        :param scanning: The scanning of this DefenderScanStatus.  # noqa: E501
        :type scanning: bool
        """

        self._scanning = scanning

    @property
    def selective(self):
        """Gets the selective of this DefenderScanStatus.  # noqa: E501

        Indicates if the scan is for a specific resource (true) or not (false).   # noqa: E501

        :return: The selective of this DefenderScanStatus.  # noqa: E501
        :rtype: bool
        """
        return self._selective

    @selective.setter
    def selective(self, selective):
        """Sets the selective of this DefenderScanStatus.

        Indicates if the scan is for a specific resource (true) or not (false).   # noqa: E501

        :param selective: The selective of this DefenderScanStatus.  # noqa: E501
        :type selective: bool
        """

        self._selective = selective

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefenderScanStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefenderScanStatus):
            return True

        return self.to_dict() != other.to_dict()
