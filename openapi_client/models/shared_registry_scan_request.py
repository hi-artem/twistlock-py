# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedRegistryScanRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scan_id': 'int',
        'settings': 'SharedRegistrySpecification',
        'tag': 'SharedImageTag',
        'type': 'int'
    }

    attribute_map = {
        'scan_id': 'scanID',
        'settings': 'settings',
        'tag': 'tag',
        'type': 'type'
    }

    def __init__(self, scan_id=None, settings=None, tag=None, type=None, local_vars_configuration=None):  # noqa: E501
        """SharedRegistryScanRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._scan_id = None
        self._settings = None
        self._tag = None
        self._type = None
        self.discriminator = None

        if scan_id is not None:
            self.scan_id = scan_id
        if settings is not None:
            self.settings = settings
        if tag is not None:
            self.tag = tag
        if type is not None:
            self.type = type

    @property
    def scan_id(self):
        """Gets the scan_id of this SharedRegistryScanRequest.  # noqa: E501

        ScanID is the ID of the scan.   # noqa: E501

        :return: The scan_id of this SharedRegistryScanRequest.  # noqa: E501
        :rtype: int
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this SharedRegistryScanRequest.

        ScanID is the ID of the scan.   # noqa: E501

        :param scan_id: The scan_id of this SharedRegistryScanRequest.  # noqa: E501
        :type scan_id: int
        """

        self._scan_id = scan_id

    @property
    def settings(self):
        """Gets the settings of this SharedRegistryScanRequest.  # noqa: E501


        :return: The settings of this SharedRegistryScanRequest.  # noqa: E501
        :rtype: SharedRegistrySpecification
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this SharedRegistryScanRequest.


        :param settings: The settings of this SharedRegistryScanRequest.  # noqa: E501
        :type settings: SharedRegistrySpecification
        """

        self._settings = settings

    @property
    def tag(self):
        """Gets the tag of this SharedRegistryScanRequest.  # noqa: E501


        :return: The tag of this SharedRegistryScanRequest.  # noqa: E501
        :rtype: SharedImageTag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SharedRegistryScanRequest.


        :param tag: The tag of this SharedRegistryScanRequest.  # noqa: E501
        :type tag: SharedImageTag
        """

        self._tag = tag

    @property
    def type(self):
        """Gets the type of this SharedRegistryScanRequest.  # noqa: E501

        Type indicates the type of the scan request.   # noqa: E501

        :return: The type of this SharedRegistryScanRequest.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SharedRegistryScanRequest.

        Type indicates the type of the scan request.   # noqa: E501

        :param type: The type of this SharedRegistryScanRequest.  # noqa: E501
        :type type: int
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedRegistryScanRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedRegistryScanRequest):
            return True

        return self.to_dict() != other.to_dict()
