# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CnnfHostAudit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'block': 'bool',
        'cluster': 'str',
        'count': 'int',
        'dst_hostname': 'str',
        'dst_port': 'int',
        'dst_subnet': 'str',
        'msg': 'str',
        'rule_id': 'int',
        'src_hash': 'int',
        'src_hostname': 'str',
        'src_subnet': 'str',
        'time': 'datetime',
        'type': 'CnnfNetworkFirewallAttackType'
    }

    attribute_map = {
        'account_id': 'accountID',
        'block': 'block',
        'cluster': 'cluster',
        'count': 'count',
        'dst_hostname': 'dstHostname',
        'dst_port': 'dstPort',
        'dst_subnet': 'dstSubnet',
        'msg': 'msg',
        'rule_id': 'ruleID',
        'src_hash': 'srcHash',
        'src_hostname': 'srcHostname',
        'src_subnet': 'srcSubnet',
        'time': 'time',
        'type': 'type'
    }

    def __init__(self, account_id=None, block=None, cluster=None, count=None, dst_hostname=None, dst_port=None, dst_subnet=None, msg=None, rule_id=None, src_hash=None, src_hostname=None, src_subnet=None, time=None, type=None, local_vars_configuration=None):  # noqa: E501
        """CnnfHostAudit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._block = None
        self._cluster = None
        self._count = None
        self._dst_hostname = None
        self._dst_port = None
        self._dst_subnet = None
        self._msg = None
        self._rule_id = None
        self._src_hash = None
        self._src_hostname = None
        self._src_subnet = None
        self._time = None
        self._type = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if block is not None:
            self.block = block
        if cluster is not None:
            self.cluster = cluster
        if count is not None:
            self.count = count
        if dst_hostname is not None:
            self.dst_hostname = dst_hostname
        if dst_port is not None:
            self.dst_port = dst_port
        if dst_subnet is not None:
            self.dst_subnet = dst_subnet
        if msg is not None:
            self.msg = msg
        if rule_id is not None:
            self.rule_id = rule_id
        if src_hash is not None:
            self.src_hash = src_hash
        if src_hostname is not None:
            self.src_hostname = src_hostname
        if src_subnet is not None:
            self.src_subnet = src_subnet
        if time is not None:
            self.time = time
        if type is not None:
            self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this CnnfHostAudit.  # noqa: E501

        AccountID is the host account ID.   # noqa: E501

        :return: The account_id of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CnnfHostAudit.

        AccountID is the host account ID.   # noqa: E501

        :param account_id: The account_id of this CnnfHostAudit.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def block(self):
        """Gets the block of this CnnfHostAudit.  # noqa: E501

        Block indicates whether the connection was blocked.   # noqa: E501

        :return: The block of this CnnfHostAudit.  # noqa: E501
        :rtype: bool
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this CnnfHostAudit.

        Block indicates whether the connection was blocked.   # noqa: E501

        :param block: The block of this CnnfHostAudit.  # noqa: E501
        :type block: bool
        """

        self._block = block

    @property
    def cluster(self):
        """Gets the cluster of this CnnfHostAudit.  # noqa: E501

        Cluster is the cluster from which the audit originated.   # noqa: E501

        :return: The cluster of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this CnnfHostAudit.

        Cluster is the cluster from which the audit originated.   # noqa: E501

        :param cluster: The cluster of this CnnfHostAudit.  # noqa: E501
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def count(self):
        """Gets the count of this CnnfHostAudit.  # noqa: E501

        Count is the event occurrences count.   # noqa: E501

        :return: The count of this CnnfHostAudit.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CnnfHostAudit.

        Count is the event occurrences count.   # noqa: E501

        :param count: The count of this CnnfHostAudit.  # noqa: E501
        :type count: int
        """

        self._count = count

    @property
    def dst_hostname(self):
        """Gets the dst_hostname of this CnnfHostAudit.  # noqa: E501

        DstHostname is the destination hostname.   # noqa: E501

        :return: The dst_hostname of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._dst_hostname

    @dst_hostname.setter
    def dst_hostname(self, dst_hostname):
        """Sets the dst_hostname of this CnnfHostAudit.

        DstHostname is the destination hostname.   # noqa: E501

        :param dst_hostname: The dst_hostname of this CnnfHostAudit.  # noqa: E501
        :type dst_hostname: str
        """

        self._dst_hostname = dst_hostname

    @property
    def dst_port(self):
        """Gets the dst_port of this CnnfHostAudit.  # noqa: E501

        DstPort is the connection destination port.   # noqa: E501

        :return: The dst_port of this CnnfHostAudit.  # noqa: E501
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this CnnfHostAudit.

        DstPort is the connection destination port.   # noqa: E501

        :param dst_port: The dst_port of this CnnfHostAudit.  # noqa: E501
        :type dst_port: int
        """

        self._dst_port = dst_port

    @property
    def dst_subnet(self):
        """Gets the dst_subnet of this CnnfHostAudit.  # noqa: E501

        DstSubnet is the destination subnet.   # noqa: E501

        :return: The dst_subnet of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._dst_subnet

    @dst_subnet.setter
    def dst_subnet(self, dst_subnet):
        """Sets the dst_subnet of this CnnfHostAudit.

        DstSubnet is the destination subnet.   # noqa: E501

        :param dst_subnet: The dst_subnet of this CnnfHostAudit.  # noqa: E501
        :type dst_subnet: str
        """

        self._dst_subnet = dst_subnet

    @property
    def msg(self):
        """Gets the msg of this CnnfHostAudit.  # noqa: E501

        Message is the event message.   # noqa: E501

        :return: The msg of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this CnnfHostAudit.

        Message is the event message.   # noqa: E501

        :param msg: The msg of this CnnfHostAudit.  # noqa: E501
        :type msg: str
        """

        self._msg = msg

    @property
    def rule_id(self):
        """Gets the rule_id of this CnnfHostAudit.  # noqa: E501

        RuleID represents the ID of each container network firewall policy rule  # noqa: E501

        :return: The rule_id of this CnnfHostAudit.  # noqa: E501
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this CnnfHostAudit.

        RuleID represents the ID of each container network firewall policy rule  # noqa: E501

        :param rule_id: The rule_id of this CnnfHostAudit.  # noqa: E501
        :type rule_id: int
        """

        self._rule_id = rule_id

    @property
    def src_hash(self):
        """Gets the src_hash of this CnnfHostAudit.  # noqa: E501

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :return: The src_hash of this CnnfHostAudit.  # noqa: E501
        :rtype: int
        """
        return self._src_hash

    @src_hash.setter
    def src_hash(self, src_hash):
        """Sets the src_hash of this CnnfHostAudit.

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :param src_hash: The src_hash of this CnnfHostAudit.  # noqa: E501
        :type src_hash: int
        """

        self._src_hash = src_hash

    @property
    def src_hostname(self):
        """Gets the src_hostname of this CnnfHostAudit.  # noqa: E501

        SrcHostname is the source hostname.   # noqa: E501

        :return: The src_hostname of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._src_hostname

    @src_hostname.setter
    def src_hostname(self, src_hostname):
        """Sets the src_hostname of this CnnfHostAudit.

        SrcHostname is the source hostname.   # noqa: E501

        :param src_hostname: The src_hostname of this CnnfHostAudit.  # noqa: E501
        :type src_hostname: str
        """

        self._src_hostname = src_hostname

    @property
    def src_subnet(self):
        """Gets the src_subnet of this CnnfHostAudit.  # noqa: E501

        SrcSubnet is the source subnet.   # noqa: E501

        :return: The src_subnet of this CnnfHostAudit.  # noqa: E501
        :rtype: str
        """
        return self._src_subnet

    @src_subnet.setter
    def src_subnet(self, src_subnet):
        """Sets the src_subnet of this CnnfHostAudit.

        SrcSubnet is the source subnet.   # noqa: E501

        :param src_subnet: The src_subnet of this CnnfHostAudit.  # noqa: E501
        :type src_subnet: str
        """

        self._src_subnet = src_subnet

    @property
    def time(self):
        """Gets the time of this CnnfHostAudit.  # noqa: E501

        Time is the UTC time of the audit event.   # noqa: E501

        :return: The time of this CnnfHostAudit.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CnnfHostAudit.

        Time is the UTC time of the audit event.   # noqa: E501

        :param time: The time of this CnnfHostAudit.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this CnnfHostAudit.  # noqa: E501


        :return: The type of this CnnfHostAudit.  # noqa: E501
        :rtype: CnnfNetworkFirewallAttackType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CnnfHostAudit.


        :param type: The type of this CnnfHostAudit.  # noqa: E501
        :type type: CnnfNetworkFirewallAttackType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CnnfHostAudit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CnnfHostAudit):
            return True

        return self.to_dict() != other.to_dict()
