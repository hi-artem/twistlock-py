# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedSecretsRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collections': 'list[CollectionCollection]',
        'disabled': 'bool',
        'injection': 'SharedSecretsInjectionType',
        'modified': 'datetime',
        'name': 'str',
        'notes': 'str',
        'owner': 'str',
        'previous_name': 'str',
        'read_all_perm': 'bool',
        'secrets': 'list[SharedVaultSecret]',
        'target_dir': 'str'
    }

    attribute_map = {
        'collections': 'collections',
        'disabled': 'disabled',
        'injection': 'injection',
        'modified': 'modified',
        'name': 'name',
        'notes': 'notes',
        'owner': 'owner',
        'previous_name': 'previousName',
        'read_all_perm': 'readAllPerm',
        'secrets': 'secrets',
        'target_dir': 'targetDir'
    }

    def __init__(self, collections=None, disabled=None, injection=None, modified=None, name=None, notes=None, owner=None, previous_name=None, read_all_perm=None, secrets=None, target_dir=None, local_vars_configuration=None):  # noqa: E501
        """SharedSecretsRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._collections = None
        self._disabled = None
        self._injection = None
        self._modified = None
        self._name = None
        self._notes = None
        self._owner = None
        self._previous_name = None
        self._read_all_perm = None
        self._secrets = None
        self._target_dir = None
        self.discriminator = None

        if collections is not None:
            self.collections = collections
        if disabled is not None:
            self.disabled = disabled
        if injection is not None:
            self.injection = injection
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if owner is not None:
            self.owner = owner
        if previous_name is not None:
            self.previous_name = previous_name
        if read_all_perm is not None:
            self.read_all_perm = read_all_perm
        if secrets is not None:
            self.secrets = secrets
        if target_dir is not None:
            self.target_dir = target_dir

    @property
    def collections(self):
        """Gets the collections of this SharedSecretsRule.  # noqa: E501

        Collections is a list of collections the rule applies to.   # noqa: E501

        :return: The collections of this SharedSecretsRule.  # noqa: E501
        :rtype: list[CollectionCollection]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedSecretsRule.

        Collections is a list of collections the rule applies to.   # noqa: E501

        :param collections: The collections of this SharedSecretsRule.  # noqa: E501
        :type collections: list[CollectionCollection]
        """

        self._collections = collections

    @property
    def disabled(self):
        """Gets the disabled of this SharedSecretsRule.  # noqa: E501

        Indicates if the rule is currently disabled (true) or not (false).   # noqa: E501

        :return: The disabled of this SharedSecretsRule.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SharedSecretsRule.

        Indicates if the rule is currently disabled (true) or not (false).   # noqa: E501

        :param disabled: The disabled of this SharedSecretsRule.  # noqa: E501
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def injection(self):
        """Gets the injection of this SharedSecretsRule.  # noqa: E501


        :return: The injection of this SharedSecretsRule.  # noqa: E501
        :rtype: SharedSecretsInjectionType
        """
        return self._injection

    @injection.setter
    def injection(self, injection):
        """Sets the injection of this SharedSecretsRule.


        :param injection: The injection of this SharedSecretsRule.  # noqa: E501
        :type injection: SharedSecretsInjectionType
        """

        self._injection = injection

    @property
    def modified(self):
        """Gets the modified of this SharedSecretsRule.  # noqa: E501

        Datetime when the rule was last modified.   # noqa: E501

        :return: The modified of this SharedSecretsRule.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this SharedSecretsRule.

        Datetime when the rule was last modified.   # noqa: E501

        :param modified: The modified of this SharedSecretsRule.  # noqa: E501
        :type modified: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this SharedSecretsRule.  # noqa: E501

        Name of the rule.   # noqa: E501

        :return: The name of this SharedSecretsRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SharedSecretsRule.

        Name of the rule.   # noqa: E501

        :param name: The name of this SharedSecretsRule.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this SharedSecretsRule.  # noqa: E501

        Free-form text.   # noqa: E501

        :return: The notes of this SharedSecretsRule.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SharedSecretsRule.

        Free-form text.   # noqa: E501

        :param notes: The notes of this SharedSecretsRule.  # noqa: E501
        :type notes: str
        """

        self._notes = notes

    @property
    def owner(self):
        """Gets the owner of this SharedSecretsRule.  # noqa: E501

        User who created or last modified the rule.   # noqa: E501

        :return: The owner of this SharedSecretsRule.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SharedSecretsRule.

        User who created or last modified the rule.   # noqa: E501

        :param owner: The owner of this SharedSecretsRule.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def previous_name(self):
        """Gets the previous_name of this SharedSecretsRule.  # noqa: E501

        Previous name of the rule. Required for rule renaming.   # noqa: E501

        :return: The previous_name of this SharedSecretsRule.  # noqa: E501
        :rtype: str
        """
        return self._previous_name

    @previous_name.setter
    def previous_name(self, previous_name):
        """Sets the previous_name of this SharedSecretsRule.

        Previous name of the rule. Required for rule renaming.   # noqa: E501

        :param previous_name: The previous_name of this SharedSecretsRule.  # noqa: E501
        :type previous_name: str
        """

        self._previous_name = previous_name

    @property
    def read_all_perm(self):
        """Gets the read_all_perm of this SharedSecretsRule.  # noqa: E501

        ReadAllPerm indicates whether file permissions of injected secrets allow read by root only or by all users.   # noqa: E501

        :return: The read_all_perm of this SharedSecretsRule.  # noqa: E501
        :rtype: bool
        """
        return self._read_all_perm

    @read_all_perm.setter
    def read_all_perm(self, read_all_perm):
        """Sets the read_all_perm of this SharedSecretsRule.

        ReadAllPerm indicates whether file permissions of injected secrets allow read by root only or by all users.   # noqa: E501

        :param read_all_perm: The read_all_perm of this SharedSecretsRule.  # noqa: E501
        :type read_all_perm: bool
        """

        self._read_all_perm = read_all_perm

    @property
    def secrets(self):
        """Gets the secrets of this SharedSecretsRule.  # noqa: E501

        Secrets are the encrypted secrets to inject.   # noqa: E501

        :return: The secrets of this SharedSecretsRule.  # noqa: E501
        :rtype: list[SharedVaultSecret]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets):
        """Sets the secrets of this SharedSecretsRule.

        Secrets are the encrypted secrets to inject.   # noqa: E501

        :param secrets: The secrets of this SharedSecretsRule.  # noqa: E501
        :type secrets: list[SharedVaultSecret]
        """

        self._secrets = secrets

    @property
    def target_dir(self):
        """Gets the target_dir of this SharedSecretsRule.  # noqa: E501

        TargetDir is the target directory to inject secret files to if we choose filesystem injection.   # noqa: E501

        :return: The target_dir of this SharedSecretsRule.  # noqa: E501
        :rtype: str
        """
        return self._target_dir

    @target_dir.setter
    def target_dir(self, target_dir):
        """Sets the target_dir of this SharedSecretsRule.

        TargetDir is the target directory to inject secret files to if we choose filesystem injection.   # noqa: E501

        :param target_dir: The target_dir of this SharedSecretsRule.  # noqa: E501
        :type target_dir: str
        """

        self._target_dir = target_dir

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedSecretsRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedSecretsRule):
            return True

        return self.to_dict() != other.to_dict()
