# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CustomrulesRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'attack_techniques': 'list[MitreTechnique]',
        'description': 'str',
        'message': 'str',
        'modified': 'int',
        'name': 'str',
        'owner': 'str',
        'script': 'str',
        'type': 'CustomrulesType'
    }

    attribute_map = {
        'id': '_id',
        'attack_techniques': 'attackTechniques',
        'description': 'description',
        'message': 'message',
        'modified': 'modified',
        'name': 'name',
        'owner': 'owner',
        'script': 'script',
        'type': 'type'
    }

    def __init__(self, id=None, attack_techniques=None, description=None, message=None, modified=None, name=None, owner=None, script=None, type=None, local_vars_configuration=None):  # noqa: E501
        """CustomrulesRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._attack_techniques = None
        self._description = None
        self._message = None
        self._modified = None
        self._name = None
        self._owner = None
        self._script = None
        self._type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if attack_techniques is not None:
            self.attack_techniques = attack_techniques
        if description is not None:
            self.description = description
        if message is not None:
            self.message = message
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if script is not None:
            self.script = script
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this CustomrulesRule.  # noqa: E501

        Rule ID. Must be unique.   # noqa: E501

        :return: The id of this CustomrulesRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomrulesRule.

        Rule ID. Must be unique.   # noqa: E501

        :param id: The id of this CustomrulesRule.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def attack_techniques(self):
        """Gets the attack_techniques of this CustomrulesRule.  # noqa: E501

        List of attack techniques.   # noqa: E501

        :return: The attack_techniques of this CustomrulesRule.  # noqa: E501
        :rtype: list[MitreTechnique]
        """
        return self._attack_techniques

    @attack_techniques.setter
    def attack_techniques(self, attack_techniques):
        """Sets the attack_techniques of this CustomrulesRule.

        List of attack techniques.   # noqa: E501

        :param attack_techniques: The attack_techniques of this CustomrulesRule.  # noqa: E501
        :type attack_techniques: list[MitreTechnique]
        """

        self._attack_techniques = attack_techniques

    @property
    def description(self):
        """Gets the description of this CustomrulesRule.  # noqa: E501

        Description of the rule.   # noqa: E501

        :return: The description of this CustomrulesRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomrulesRule.

        Description of the rule.   # noqa: E501

        :param description: The description of this CustomrulesRule.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def message(self):
        """Gets the message of this CustomrulesRule.  # noqa: E501

        Macro that is printed as part of the audit/incident message.   # noqa: E501

        :return: The message of this CustomrulesRule.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CustomrulesRule.

        Macro that is printed as part of the audit/incident message.   # noqa: E501

        :param message: The message of this CustomrulesRule.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def modified(self):
        """Gets the modified of this CustomrulesRule.  # noqa: E501

        Datetime when the rule was created or last modified.   # noqa: E501

        :return: The modified of this CustomrulesRule.  # noqa: E501
        :rtype: int
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CustomrulesRule.

        Datetime when the rule was created or last modified.   # noqa: E501

        :param modified: The modified of this CustomrulesRule.  # noqa: E501
        :type modified: int
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this CustomrulesRule.  # noqa: E501

        Name of the rule.   # noqa: E501

        :return: The name of this CustomrulesRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomrulesRule.

        Name of the rule.   # noqa: E501

        :param name: The name of this CustomrulesRule.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this CustomrulesRule.  # noqa: E501

        User who created or modified the rule.   # noqa: E501

        :return: The owner of this CustomrulesRule.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CustomrulesRule.

        User who created or modified the rule.   # noqa: E501

        :param owner: The owner of this CustomrulesRule.  # noqa: E501
        :type owner: str
        """

        self._owner = owner

    @property
    def script(self):
        """Gets the script of this CustomrulesRule.  # noqa: E501

        Custom script.   # noqa: E501

        :return: The script of this CustomrulesRule.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this CustomrulesRule.

        Custom script.   # noqa: E501

        :param script: The script of this CustomrulesRule.  # noqa: E501
        :type script: str
        """

        self._script = script

    @property
    def type(self):
        """Gets the type of this CustomrulesRule.  # noqa: E501


        :return: The type of this CustomrulesRule.  # noqa: E501
        :rtype: CustomrulesType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomrulesRule.


        :param type: The type of this CustomrulesRule.  # noqa: E501
        :type type: CustomrulesType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomrulesRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomrulesRule):
            return True

        return self.to_dict() != other.to_dict()
