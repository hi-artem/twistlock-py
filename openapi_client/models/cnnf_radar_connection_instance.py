# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CnnfRadarConnectionInstance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dst': 'str',
        'policy_rule': 'CnnfRadarPolicyRule',
        'port': 'CommonPortData',
        'src': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'dst': 'dst',
        'policy_rule': 'policyRule',
        'port': 'port',
        'src': 'src',
        'time': 'time'
    }

    def __init__(self, dst=None, policy_rule=None, port=None, src=None, time=None, local_vars_configuration=None):  # noqa: E501
        """CnnfRadarConnectionInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dst = None
        self._policy_rule = None
        self._port = None
        self._src = None
        self._time = None
        self.discriminator = None

        if dst is not None:
            self.dst = dst
        if policy_rule is not None:
            self.policy_rule = policy_rule
        if port is not None:
            self.port = port
        if src is not None:
            self.src = src
        if time is not None:
            self.time = time

    @property
    def dst(self):
        """Gets the dst of this CnnfRadarConnectionInstance.  # noqa: E501

        Dst is the dst of the connection instance. Typically kept as an IP or a hostname.   # noqa: E501

        :return: The dst of this CnnfRadarConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._dst

    @dst.setter
    def dst(self, dst):
        """Sets the dst of this CnnfRadarConnectionInstance.

        Dst is the dst of the connection instance. Typically kept as an IP or a hostname.   # noqa: E501

        :param dst: The dst of this CnnfRadarConnectionInstance.  # noqa: E501
        :type dst: str
        """

        self._dst = dst

    @property
    def policy_rule(self):
        """Gets the policy_rule of this CnnfRadarConnectionInstance.  # noqa: E501


        :return: The policy_rule of this CnnfRadarConnectionInstance.  # noqa: E501
        :rtype: CnnfRadarPolicyRule
        """
        return self._policy_rule

    @policy_rule.setter
    def policy_rule(self, policy_rule):
        """Sets the policy_rule of this CnnfRadarConnectionInstance.


        :param policy_rule: The policy_rule of this CnnfRadarConnectionInstance.  # noqa: E501
        :type policy_rule: CnnfRadarPolicyRule
        """

        self._policy_rule = policy_rule

    @property
    def port(self):
        """Gets the port of this CnnfRadarConnectionInstance.  # noqa: E501


        :return: The port of this CnnfRadarConnectionInstance.  # noqa: E501
        :rtype: CommonPortData
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CnnfRadarConnectionInstance.


        :param port: The port of this CnnfRadarConnectionInstance.  # noqa: E501
        :type port: CommonPortData
        """

        self._port = port

    @property
    def src(self):
        """Gets the src of this CnnfRadarConnectionInstance.  # noqa: E501

        Src is the src of the connection instance. Typically kept as an IP or a hostname.   # noqa: E501

        :return: The src of this CnnfRadarConnectionInstance.  # noqa: E501
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this CnnfRadarConnectionInstance.

        Src is the src of the connection instance. Typically kept as an IP or a hostname.   # noqa: E501

        :param src: The src of this CnnfRadarConnectionInstance.  # noqa: E501
        :type src: str
        """

        self._src = src

    @property
    def time(self):
        """Gets the time of this CnnfRadarConnectionInstance.  # noqa: E501

        Time is the time the connection instance was added.   # noqa: E501

        :return: The time of this CnnfRadarConnectionInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CnnfRadarConnectionInstance.

        Time is the time the connection instance was added.   # noqa: E501

        :param time: The time of this CnnfRadarConnectionInstance.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CnnfRadarConnectionInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CnnfRadarConnectionInstance):
            return True

        return self.to_dict() != other.to_dict()
