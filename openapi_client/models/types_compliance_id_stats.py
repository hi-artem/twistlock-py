# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesComplianceIDStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'benchmark_id': 'str',
        'category': 'str',
        'description': 'str',
        'failed': 'int',
        'id': 'int',
        'severity': 'str',
        'template_title': 'str',
        'total': 'int',
        'type': 'VulnType'
    }

    attribute_map = {
        'benchmark_id': 'benchmarkID',
        'category': 'category',
        'description': 'description',
        'failed': 'failed',
        'id': 'id',
        'severity': 'severity',
        'template_title': 'templateTitle',
        'total': 'total',
        'type': 'type'
    }

    def __init__(self, benchmark_id=None, category=None, description=None, failed=None, id=None, severity=None, template_title=None, total=None, type=None, local_vars_configuration=None):  # noqa: E501
        """TypesComplianceIDStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._benchmark_id = None
        self._category = None
        self._description = None
        self._failed = None
        self._id = None
        self._severity = None
        self._template_title = None
        self._total = None
        self._type = None
        self.discriminator = None

        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if failed is not None:
            self.failed = failed
        if id is not None:
            self.id = id
        if severity is not None:
            self.severity = severity
        if template_title is not None:
            self.template_title = template_title
        if total is not None:
            self.total = total
        if type is not None:
            self.type = type

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this TypesComplianceIDStats.  # noqa: E501

        BenchmarkID is the benchmark ID.   # noqa: E501

        :return: The benchmark_id of this TypesComplianceIDStats.  # noqa: E501
        :rtype: str
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this TypesComplianceIDStats.

        BenchmarkID is the benchmark ID.   # noqa: E501

        :param benchmark_id: The benchmark_id of this TypesComplianceIDStats.  # noqa: E501
        :type benchmark_id: str
        """

        self._benchmark_id = benchmark_id

    @property
    def category(self):
        """Gets the category of this TypesComplianceIDStats.  # noqa: E501

        Category is the compliance category.   # noqa: E501

        :return: The category of this TypesComplianceIDStats.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TypesComplianceIDStats.

        Category is the compliance category.   # noqa: E501

        :param category: The category of this TypesComplianceIDStats.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this TypesComplianceIDStats.  # noqa: E501

        Description is the compliance description.   # noqa: E501

        :return: The description of this TypesComplianceIDStats.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TypesComplianceIDStats.

        Description is the compliance description.   # noqa: E501

        :param description: The description of this TypesComplianceIDStats.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def failed(self):
        """Gets the failed of this TypesComplianceIDStats.  # noqa: E501

        Failed is the number of occurrences of compliance ID in resources.   # noqa: E501

        :return: The failed of this TypesComplianceIDStats.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TypesComplianceIDStats.

        Failed is the number of occurrences of compliance ID in resources.   # noqa: E501

        :param failed: The failed of this TypesComplianceIDStats.  # noqa: E501
        :type failed: int
        """

        self._failed = failed

    @property
    def id(self):
        """Gets the id of this TypesComplianceIDStats.  # noqa: E501

        ID is the compliance ID.   # noqa: E501

        :return: The id of this TypesComplianceIDStats.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TypesComplianceIDStats.

        ID is the compliance ID.   # noqa: E501

        :param id: The id of this TypesComplianceIDStats.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def severity(self):
        """Gets the severity of this TypesComplianceIDStats.  # noqa: E501

        Severity is the compliance severity.   # noqa: E501

        :return: The severity of this TypesComplianceIDStats.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TypesComplianceIDStats.

        Severity is the compliance severity.   # noqa: E501

        :param severity: The severity of this TypesComplianceIDStats.  # noqa: E501
        :type severity: str
        """

        self._severity = severity

    @property
    def template_title(self):
        """Gets the template_title of this TypesComplianceIDStats.  # noqa: E501

        TemplateTitle is the template title.   # noqa: E501

        :return: The template_title of this TypesComplianceIDStats.  # noqa: E501
        :rtype: str
        """
        return self._template_title

    @template_title.setter
    def template_title(self, template_title):
        """Sets the template_title of this TypesComplianceIDStats.

        TemplateTitle is the template title.   # noqa: E501

        :param template_title: The template_title of this TypesComplianceIDStats.  # noqa: E501
        :type template_title: str
        """

        self._template_title = template_title

    @property
    def total(self):
        """Gets the total of this TypesComplianceIDStats.  # noqa: E501

        Total is the count of resources evaluated with the compliance.   # noqa: E501

        :return: The total of this TypesComplianceIDStats.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TypesComplianceIDStats.

        Total is the count of resources evaluated with the compliance.   # noqa: E501

        :param total: The total of this TypesComplianceIDStats.  # noqa: E501
        :type total: int
        """

        self._total = total

    @property
    def type(self):
        """Gets the type of this TypesComplianceIDStats.  # noqa: E501


        :return: The type of this TypesComplianceIDStats.  # noqa: E501
        :rtype: VulnType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TypesComplianceIDStats.


        :param type: The type of this TypesComplianceIDStats.  # noqa: E501
        :type type: VulnType
        """

        self._type = type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesComplianceIDStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesComplianceIDStats):
            return True

        return self.to_dict() != other.to_dict()
