# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedVMSpecification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cap': 'int',
        'collections': 'list[CollectionCollection]',
        'console_addr': 'str',
        'credential_id': 'str',
        'excluded_images': 'list[str]',
        'region': 'str',
        'scanners': 'int',
        'version': 'str'
    }

    attribute_map = {
        'cap': 'cap',
        'collections': 'collections',
        'console_addr': 'consoleAddr',
        'credential_id': 'credentialID',
        'excluded_images': 'excludedImages',
        'region': 'region',
        'scanners': 'scanners',
        'version': 'version'
    }

    def __init__(self, cap=None, collections=None, console_addr=None, credential_id=None, excluded_images=None, region=None, scanners=None, version=None, local_vars_configuration=None):  # noqa: E501
        """SharedVMSpecification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cap = None
        self._collections = None
        self._console_addr = None
        self._credential_id = None
        self._excluded_images = None
        self._region = None
        self._scanners = None
        self._version = None
        self.discriminator = None

        if cap is not None:
            self.cap = cap
        if collections is not None:
            self.collections = collections
        if console_addr is not None:
            self.console_addr = console_addr
        if credential_id is not None:
            self.credential_id = credential_id
        if excluded_images is not None:
            self.excluded_images = excluded_images
        if region is not None:
            self.region = region
        if scanners is not None:
            self.scanners = scanners
        if version is not None:
            self.version = version

    @property
    def cap(self):
        """Gets the cap of this SharedVMSpecification.  # noqa: E501

        Specifies the maximum number of images to fetch and scan, ordered by most recently modified.   # noqa: E501

        :return: The cap of this SharedVMSpecification.  # noqa: E501
        :rtype: int
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this SharedVMSpecification.

        Specifies the maximum number of images to fetch and scan, ordered by most recently modified.   # noqa: E501

        :param cap: The cap of this SharedVMSpecification.  # noqa: E501
        :type cap: int
        """

        self._cap = cap

    @property
    def collections(self):
        """Gets the collections of this SharedVMSpecification.  # noqa: E501

        List of collections. Scopes the images to be scanned.   # noqa: E501

        :return: The collections of this SharedVMSpecification.  # noqa: E501
        :rtype: list[CollectionCollection]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SharedVMSpecification.

        List of collections. Scopes the images to be scanned.   # noqa: E501

        :param collections: The collections of this SharedVMSpecification.  # noqa: E501
        :type collections: list[CollectionCollection]
        """

        self._collections = collections

    @property
    def console_addr(self):
        """Gets the console_addr of this SharedVMSpecification.  # noqa: E501

        Network-accessible address that Defender can use to publish scan results to Console.   # noqa: E501

        :return: The console_addr of this SharedVMSpecification.  # noqa: E501
        :rtype: str
        """
        return self._console_addr

    @console_addr.setter
    def console_addr(self, console_addr):
        """Sets the console_addr of this SharedVMSpecification.

        Network-accessible address that Defender can use to publish scan results to Console.   # noqa: E501

        :param console_addr: The console_addr of this SharedVMSpecification.  # noqa: E501
        :type console_addr: str
        """

        self._console_addr = console_addr

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedVMSpecification.  # noqa: E501

        ID of the credentials in the credentials store to use for authenticating with the cloud provider.   # noqa: E501

        :return: The credential_id of this SharedVMSpecification.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedVMSpecification.

        ID of the credentials in the credentials store to use for authenticating with the cloud provider.   # noqa: E501

        :param credential_id: The credential_id of this SharedVMSpecification.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def excluded_images(self):
        """Gets the excluded_images of this SharedVMSpecification.  # noqa: E501

        Images to exclude from scanning.   # noqa: E501

        :return: The excluded_images of this SharedVMSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._excluded_images

    @excluded_images.setter
    def excluded_images(self, excluded_images):
        """Sets the excluded_images of this SharedVMSpecification.

        Images to exclude from scanning.   # noqa: E501

        :param excluded_images: The excluded_images of this SharedVMSpecification.  # noqa: E501
        :type excluded_images: list[str]
        """

        self._excluded_images = excluded_images

    @property
    def region(self):
        """Gets the region of this SharedVMSpecification.  # noqa: E501

        Cloud provider region.   # noqa: E501

        :return: The region of this SharedVMSpecification.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SharedVMSpecification.

        Cloud provider region.   # noqa: E501

        :param region: The region of this SharedVMSpecification.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def scanners(self):
        """Gets the scanners of this SharedVMSpecification.  # noqa: E501

        Number of Defenders that can be utilized for each scan job.   # noqa: E501

        :return: The scanners of this SharedVMSpecification.  # noqa: E501
        :rtype: int
        """
        return self._scanners

    @scanners.setter
    def scanners(self, scanners):
        """Sets the scanners of this SharedVMSpecification.

        Number of Defenders that can be utilized for each scan job.   # noqa: E501

        :param scanners: The scanners of this SharedVMSpecification.  # noqa: E501
        :type scanners: int
        """

        self._scanners = scanners

    @property
    def version(self):
        """Gets the version of this SharedVMSpecification.  # noqa: E501

        VM image type/format (e.g., AWS AMI).   # noqa: E501

        :return: The version of this SharedVMSpecification.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SharedVMSpecification.

        VM image type/format (e.g., AWS AMI).   # noqa: E501

        :param version: The version of this SharedVMSpecification.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedVMSpecification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedVMSpecification):
            return True

        return self.to_dict() != other.to_dict()
