# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RuntimeHostProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'account_id': 'str',
        'apps': 'list[RuntimeApp]',
        'collections': 'list[str]',
        'created': 'datetime',
        'geoip': 'RuntimeProfileNetworkGeoIP',
        'hash': 'int',
        'labels': 'list[str]',
        'ssh_events': 'list[RuntimeSSHEvent]',
        'time': 'datetime'
    }

    attribute_map = {
        'id': '_id',
        'account_id': 'accountID',
        'apps': 'apps',
        'collections': 'collections',
        'created': 'created',
        'geoip': 'geoip',
        'hash': 'hash',
        'labels': 'labels',
        'ssh_events': 'sshEvents',
        'time': 'time'
    }

    def __init__(self, id=None, account_id=None, apps=None, collections=None, created=None, geoip=None, hash=None, labels=None, ssh_events=None, time=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeHostProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._account_id = None
        self._apps = None
        self._collections = None
        self._created = None
        self._geoip = None
        self._hash = None
        self._labels = None
        self._ssh_events = None
        self._time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if account_id is not None:
            self.account_id = account_id
        if apps is not None:
            self.apps = apps
        if collections is not None:
            self.collections = collections
        if created is not None:
            self.created = created
        if geoip is not None:
            self.geoip = geoip
        if hash is not None:
            self.hash = hash
        if labels is not None:
            self.labels = labels
        if ssh_events is not None:
            self.ssh_events = ssh_events
        if time is not None:
            self.time = time

    @property
    def id(self):
        """Gets the id of this RuntimeHostProfile.  # noqa: E501

        ID is the profile ID (hostname).   # noqa: E501

        :return: The id of this RuntimeHostProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuntimeHostProfile.

        ID is the profile ID (hostname).   # noqa: E501

        :param id: The id of this RuntimeHostProfile.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this RuntimeHostProfile.  # noqa: E501

        AccountID is the cloud account ID associated with the profile.   # noqa: E501

        :return: The account_id of this RuntimeHostProfile.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RuntimeHostProfile.

        AccountID is the cloud account ID associated with the profile.   # noqa: E501

        :param account_id: The account_id of this RuntimeHostProfile.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def apps(self):
        """Gets the apps of this RuntimeHostProfile.  # noqa: E501

        Apps are the host's apps metadata.   # noqa: E501

        :return: The apps of this RuntimeHostProfile.  # noqa: E501
        :rtype: list[RuntimeApp]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this RuntimeHostProfile.

        Apps are the host's apps metadata.   # noqa: E501

        :param apps: The apps of this RuntimeHostProfile.  # noqa: E501
        :type apps: list[RuntimeApp]
        """

        self._apps = apps

    @property
    def collections(self):
        """Gets the collections of this RuntimeHostProfile.  # noqa: E501

        Collections is a list of collections to which this profile applies.   # noqa: E501

        :return: The collections of this RuntimeHostProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this RuntimeHostProfile.

        Collections is a list of collections to which this profile applies.   # noqa: E501

        :param collections: The collections of this RuntimeHostProfile.  # noqa: E501
        :type collections: list[str]
        """

        self._collections = collections

    @property
    def created(self):
        """Gets the created of this RuntimeHostProfile.  # noqa: E501

        Created is the profile creation time.   # noqa: E501

        :return: The created of this RuntimeHostProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RuntimeHostProfile.

        Created is the profile creation time.   # noqa: E501

        :param created: The created of this RuntimeHostProfile.  # noqa: E501
        :type created: datetime
        """

        self._created = created

    @property
    def geoip(self):
        """Gets the geoip of this RuntimeHostProfile.  # noqa: E501


        :return: The geoip of this RuntimeHostProfile.  # noqa: E501
        :rtype: RuntimeProfileNetworkGeoIP
        """
        return self._geoip

    @geoip.setter
    def geoip(self, geoip):
        """Sets the geoip of this RuntimeHostProfile.


        :param geoip: The geoip of this RuntimeHostProfile.  # noqa: E501
        :type geoip: RuntimeProfileNetworkGeoIP
        """

        self._geoip = geoip

    @property
    def hash(self):
        """Gets the hash of this RuntimeHostProfile.  # noqa: E501

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :return: The hash of this RuntimeHostProfile.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this RuntimeHostProfile.

        ProfileHash represents the profile hash It is allowed to contain up to uint32 numbers, and represented by int64 since mongodb does not support unsigned data types  # noqa: E501

        :param hash: The hash of this RuntimeHostProfile.  # noqa: E501
        :type hash: int
        """

        self._hash = hash

    @property
    def labels(self):
        """Gets the labels of this RuntimeHostProfile.  # noqa: E501

        Labels are the labels associated with the profile.   # noqa: E501

        :return: The labels of this RuntimeHostProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RuntimeHostProfile.

        Labels are the labels associated with the profile.   # noqa: E501

        :param labels: The labels of this RuntimeHostProfile.  # noqa: E501
        :type labels: list[str]
        """

        self._labels = labels

    @property
    def ssh_events(self):
        """Gets the ssh_events of this RuntimeHostProfile.  # noqa: E501

        SSHEvents represents a list SSH events occurred on the host.   # noqa: E501

        :return: The ssh_events of this RuntimeHostProfile.  # noqa: E501
        :rtype: list[RuntimeSSHEvent]
        """
        return self._ssh_events

    @ssh_events.setter
    def ssh_events(self, ssh_events):
        """Sets the ssh_events of this RuntimeHostProfile.

        SSHEvents represents a list SSH events occurred on the host.   # noqa: E501

        :param ssh_events: The ssh_events of this RuntimeHostProfile.  # noqa: E501
        :type ssh_events: list[RuntimeSSHEvent]
        """

        self._ssh_events = ssh_events

    @property
    def time(self):
        """Gets the time of this RuntimeHostProfile.  # noqa: E501

        Time is the last time when this profile was modified.   # noqa: E501

        :return: The time of this RuntimeHostProfile.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this RuntimeHostProfile.

        Time is the last time when this profile was modified.   # noqa: E501

        :param time: The time of this RuntimeHostProfile.  # noqa: E501
        :type time: datetime
        """

        self._time = time

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeHostProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeHostProfile):
            return True

        return self.to_dict() != other.to_dict()
