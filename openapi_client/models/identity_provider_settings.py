# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class IdentityProviderSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_url': 'str',
        'cert': 'str',
        'client_id': 'str',
        'client_secret': 'CommonSecret',
        'enabled': 'bool',
        'group_claim': 'str',
        'group_scope': 'str',
        'open_id_issues_url': 'str',
        'openshift_base_url': 'str',
        'provider_alias': 'str',
        'provider_name': 'IdentityProviderName',
        'token_url': 'str'
    }

    attribute_map = {
        'auth_url': 'authURL',
        'cert': 'cert',
        'client_id': 'clientID',
        'client_secret': 'clientSecret',
        'enabled': 'enabled',
        'group_claim': 'groupClaim',
        'group_scope': 'groupScope',
        'open_id_issues_url': 'openIDIssuesURL',
        'openshift_base_url': 'openshiftBaseURL',
        'provider_alias': 'providerAlias',
        'provider_name': 'providerName',
        'token_url': 'tokenURL'
    }

    def __init__(self, auth_url=None, cert=None, client_id=None, client_secret=None, enabled=None, group_claim=None, group_scope=None, open_id_issues_url=None, openshift_base_url=None, provider_alias=None, provider_name=None, token_url=None, local_vars_configuration=None):  # noqa: E501
        """IdentityProviderSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._auth_url = None
        self._cert = None
        self._client_id = None
        self._client_secret = None
        self._enabled = None
        self._group_claim = None
        self._group_scope = None
        self._open_id_issues_url = None
        self._openshift_base_url = None
        self._provider_alias = None
        self._provider_name = None
        self._token_url = None
        self.discriminator = None

        if auth_url is not None:
            self.auth_url = auth_url
        if cert is not None:
            self.cert = cert
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if enabled is not None:
            self.enabled = enabled
        if group_claim is not None:
            self.group_claim = group_claim
        if group_scope is not None:
            self.group_scope = group_scope
        if open_id_issues_url is not None:
            self.open_id_issues_url = open_id_issues_url
        if openshift_base_url is not None:
            self.openshift_base_url = openshift_base_url
        if provider_alias is not None:
            self.provider_alias = provider_alias
        if provider_name is not None:
            self.provider_name = provider_name
        if token_url is not None:
            self.token_url = token_url

    @property
    def auth_url(self):
        """Gets the auth_url of this IdentityProviderSettings.  # noqa: E501

        AuthURL specifies auth URL.   # noqa: E501

        :return: The auth_url of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this IdentityProviderSettings.

        AuthURL specifies auth URL.   # noqa: E501

        :param auth_url: The auth_url of this IdentityProviderSettings.  # noqa: E501
        :type auth_url: str
        """

        self._auth_url = auth_url

    @property
    def cert(self):
        """Gets the cert of this IdentityProviderSettings.  # noqa: E501

        Cert is idp certificate.   # noqa: E501

        :return: The cert of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this IdentityProviderSettings.

        Cert is idp certificate.   # noqa: E501

        :param cert: The cert of this IdentityProviderSettings.  # noqa: E501
        :type cert: str
        """

        self._cert = cert

    @property
    def client_id(self):
        """Gets the client_id of this IdentityProviderSettings.  # noqa: E501

        ClientID is the client identifier issued to the client during the registration process.   # noqa: E501

        :return: The client_id of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IdentityProviderSettings.

        ClientID is the client identifier issued to the client during the registration process.   # noqa: E501

        :param client_id: The client_id of this IdentityProviderSettings.  # noqa: E501
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this IdentityProviderSettings.  # noqa: E501


        :return: The client_secret of this IdentityProviderSettings.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this IdentityProviderSettings.


        :param client_secret: The client_secret of this IdentityProviderSettings.  # noqa: E501
        :type client_secret: CommonSecret
        """

        self._client_secret = client_secret

    @property
    def enabled(self):
        """Gets the enabled of this IdentityProviderSettings.  # noqa: E501

        Enabled indicates whether Auth settings are enabled.   # noqa: E501

        :return: The enabled of this IdentityProviderSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IdentityProviderSettings.

        Enabled indicates whether Auth settings are enabled.   # noqa: E501

        :param enabled: The enabled of this IdentityProviderSettings.  # noqa: E501
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def group_claim(self):
        """Gets the group_claim of this IdentityProviderSettings.  # noqa: E501

        GroupClaim is the name of the group claim property in user info response.   # noqa: E501

        :return: The group_claim of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_claim

    @group_claim.setter
    def group_claim(self, group_claim):
        """Sets the group_claim of this IdentityProviderSettings.

        GroupClaim is the name of the group claim property in user info response.   # noqa: E501

        :param group_claim: The group_claim of this IdentityProviderSettings.  # noqa: E501
        :type group_claim: str
        """

        self._group_claim = group_claim

    @property
    def group_scope(self):
        """Gets the group_scope of this IdentityProviderSettings.  # noqa: E501

        GroupScope specifies name of group scope.   # noqa: E501

        :return: The group_scope of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._group_scope

    @group_scope.setter
    def group_scope(self, group_scope):
        """Sets the group_scope of this IdentityProviderSettings.

        GroupScope specifies name of group scope.   # noqa: E501

        :param group_scope: The group_scope of this IdentityProviderSettings.  # noqa: E501
        :type group_scope: str
        """

        self._group_scope = group_scope

    @property
    def open_id_issues_url(self):
        """Gets the open_id_issues_url of this IdentityProviderSettings.  # noqa: E501

        OpenIDIssuesURL is the base URL for OpenID connect providers.   # noqa: E501

        :return: The open_id_issues_url of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._open_id_issues_url

    @open_id_issues_url.setter
    def open_id_issues_url(self, open_id_issues_url):
        """Sets the open_id_issues_url of this IdentityProviderSettings.

        OpenIDIssuesURL is the base URL for OpenID connect providers.   # noqa: E501

        :param open_id_issues_url: The open_id_issues_url of this IdentityProviderSettings.  # noqa: E501
        :type open_id_issues_url: str
        """

        self._open_id_issues_url = open_id_issues_url

    @property
    def openshift_base_url(self):
        """Gets the openshift_base_url of this IdentityProviderSettings.  # noqa: E501

        OpenshiftBaseURL is openshift base URL.   # noqa: E501

        :return: The openshift_base_url of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._openshift_base_url

    @openshift_base_url.setter
    def openshift_base_url(self, openshift_base_url):
        """Sets the openshift_base_url of this IdentityProviderSettings.

        OpenshiftBaseURL is openshift base URL.   # noqa: E501

        :param openshift_base_url: The openshift_base_url of this IdentityProviderSettings.  # noqa: E501
        :type openshift_base_url: str
        """

        self._openshift_base_url = openshift_base_url

    @property
    def provider_alias(self):
        """Gets the provider_alias of this IdentityProviderSettings.  # noqa: E501

        ProviderAlias is the provider alias used for display.   # noqa: E501

        :return: The provider_alias of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._provider_alias

    @provider_alias.setter
    def provider_alias(self, provider_alias):
        """Sets the provider_alias of this IdentityProviderSettings.

        ProviderAlias is the provider alias used for display.   # noqa: E501

        :param provider_alias: The provider_alias of this IdentityProviderSettings.  # noqa: E501
        :type provider_alias: str
        """

        self._provider_alias = provider_alias

    @property
    def provider_name(self):
        """Gets the provider_name of this IdentityProviderSettings.  # noqa: E501


        :return: The provider_name of this IdentityProviderSettings.  # noqa: E501
        :rtype: IdentityProviderName
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this IdentityProviderSettings.


        :param provider_name: The provider_name of this IdentityProviderSettings.  # noqa: E501
        :type provider_name: IdentityProviderName
        """

        self._provider_name = provider_name

    @property
    def token_url(self):
        """Gets the token_url of this IdentityProviderSettings.  # noqa: E501

        TokenURL specifies token URL.   # noqa: E501

        :return: The token_url of this IdentityProviderSettings.  # noqa: E501
        :rtype: str
        """
        return self._token_url

    @token_url.setter
    def token_url(self, token_url):
        """Sets the token_url of this IdentityProviderSettings.

        TokenURL specifies token URL.   # noqa: E501

        :param token_url: The token_url of this IdentityProviderSettings.  # noqa: E501
        :type token_url: str
        """

        self._token_url = token_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProviderSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityProviderSettings):
            return True

        return self.to_dict() != other.to_dict()
