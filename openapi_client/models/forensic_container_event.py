# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ForensicContainerEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_ports': 'bool',
        'attack': 'SharedRuntimeAttackType',
        'category': 'SharedIncidentCategory',
        'command': 'str',
        'container_id': 'str',
        'dst_ip': 'str',
        'dst_port': 'int',
        'dst_profile_id': 'str',
        'effect': 'str',
        'listening_start_time': 'datetime',
        'message': 'str',
        'network_collection_type': 'str',
        'outbound': 'bool',
        'path': 'str',
        'pid': 'int',
        'port': 'int',
        'ppid': 'int',
        'process': 'str',
        'src_ip': 'str',
        'src_profile_id': 'str',
        'static': 'bool',
        'timestamp': 'datetime',
        'type': 'ForensicContainerEventType',
        'user': 'str'
    }

    attribute_map = {
        'all_ports': 'allPorts',
        'attack': 'attack',
        'category': 'category',
        'command': 'command',
        'container_id': 'containerId',
        'dst_ip': 'dstIP',
        'dst_port': 'dstPort',
        'dst_profile_id': 'dstProfileID',
        'effect': 'effect',
        'listening_start_time': 'listeningStartTime',
        'message': 'message',
        'network_collection_type': 'networkCollectionType',
        'outbound': 'outbound',
        'path': 'path',
        'pid': 'pid',
        'port': 'port',
        'ppid': 'ppid',
        'process': 'process',
        'src_ip': 'srcIP',
        'src_profile_id': 'srcProfileID',
        'static': 'static',
        'timestamp': 'timestamp',
        'type': 'type',
        'user': 'user'
    }

    def __init__(self, all_ports=None, attack=None, category=None, command=None, container_id=None, dst_ip=None, dst_port=None, dst_profile_id=None, effect=None, listening_start_time=None, message=None, network_collection_type=None, outbound=None, path=None, pid=None, port=None, ppid=None, process=None, src_ip=None, src_profile_id=None, static=None, timestamp=None, type=None, user=None, local_vars_configuration=None):  # noqa: E501
        """ForensicContainerEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._all_ports = None
        self._attack = None
        self._category = None
        self._command = None
        self._container_id = None
        self._dst_ip = None
        self._dst_port = None
        self._dst_profile_id = None
        self._effect = None
        self._listening_start_time = None
        self._message = None
        self._network_collection_type = None
        self._outbound = None
        self._path = None
        self._pid = None
        self._port = None
        self._ppid = None
        self._process = None
        self._src_ip = None
        self._src_profile_id = None
        self._static = None
        self._timestamp = None
        self._type = None
        self._user = None
        self.discriminator = None

        if all_ports is not None:
            self.all_ports = all_ports
        if attack is not None:
            self.attack = attack
        if category is not None:
            self.category = category
        if command is not None:
            self.command = command
        if container_id is not None:
            self.container_id = container_id
        if dst_ip is not None:
            self.dst_ip = dst_ip
        if dst_port is not None:
            self.dst_port = dst_port
        if dst_profile_id is not None:
            self.dst_profile_id = dst_profile_id
        if effect is not None:
            self.effect = effect
        if listening_start_time is not None:
            self.listening_start_time = listening_start_time
        if message is not None:
            self.message = message
        if network_collection_type is not None:
            self.network_collection_type = network_collection_type
        if outbound is not None:
            self.outbound = outbound
        if path is not None:
            self.path = path
        if pid is not None:
            self.pid = pid
        if port is not None:
            self.port = port
        if ppid is not None:
            self.ppid = ppid
        if process is not None:
            self.process = process
        if src_ip is not None:
            self.src_ip = src_ip
        if src_profile_id is not None:
            self.src_profile_id = src_profile_id
        if static is not None:
            self.static = static
        if timestamp is not None:
            self.timestamp = timestamp
        if type is not None:
            self.type = type
        if user is not None:
            self.user = user

    @property
    def all_ports(self):
        """Gets the all_ports of this ForensicContainerEvent.  # noqa: E501

        AllPorts indicates all listening ports are allowed.   # noqa: E501

        :return: The all_ports of this ForensicContainerEvent.  # noqa: E501
        :rtype: bool
        """
        return self._all_ports

    @all_ports.setter
    def all_ports(self, all_ports):
        """Sets the all_ports of this ForensicContainerEvent.

        AllPorts indicates all listening ports are allowed.   # noqa: E501

        :param all_ports: The all_ports of this ForensicContainerEvent.  # noqa: E501
        :type all_ports: bool
        """

        self._all_ports = all_ports

    @property
    def attack(self):
        """Gets the attack of this ForensicContainerEvent.  # noqa: E501


        :return: The attack of this ForensicContainerEvent.  # noqa: E501
        :rtype: SharedRuntimeAttackType
        """
        return self._attack

    @attack.setter
    def attack(self, attack):
        """Sets the attack of this ForensicContainerEvent.


        :param attack: The attack of this ForensicContainerEvent.  # noqa: E501
        :type attack: SharedRuntimeAttackType
        """

        self._attack = attack

    @property
    def category(self):
        """Gets the category of this ForensicContainerEvent.  # noqa: E501


        :return: The category of this ForensicContainerEvent.  # noqa: E501
        :rtype: SharedIncidentCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ForensicContainerEvent.


        :param category: The category of this ForensicContainerEvent.  # noqa: E501
        :type category: SharedIncidentCategory
        """

        self._category = category

    @property
    def command(self):
        """Gets the command of this ForensicContainerEvent.  # noqa: E501

        Command is the event command.   # noqa: E501

        :return: The command of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ForensicContainerEvent.

        Command is the event command.   # noqa: E501

        :param command: The command of this ForensicContainerEvent.  # noqa: E501
        :type command: str
        """

        self._command = command

    @property
    def container_id(self):
        """Gets the container_id of this ForensicContainerEvent.  # noqa: E501

        ContainerID is the event container id.   # noqa: E501

        :return: The container_id of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this ForensicContainerEvent.

        ContainerID is the event container id.   # noqa: E501

        :param container_id: The container_id of this ForensicContainerEvent.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def dst_ip(self):
        """Gets the dst_ip of this ForensicContainerEvent.  # noqa: E501

        DstIP is the destination IP of the connection.   # noqa: E501

        :return: The dst_ip of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this ForensicContainerEvent.

        DstIP is the destination IP of the connection.   # noqa: E501

        :param dst_ip: The dst_ip of this ForensicContainerEvent.  # noqa: E501
        :type dst_ip: str
        """

        self._dst_ip = dst_ip

    @property
    def dst_port(self):
        """Gets the dst_port of this ForensicContainerEvent.  # noqa: E501

        DstPort is the destination port.   # noqa: E501

        :return: The dst_port of this ForensicContainerEvent.  # noqa: E501
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this ForensicContainerEvent.

        DstPort is the destination port.   # noqa: E501

        :param dst_port: The dst_port of this ForensicContainerEvent.  # noqa: E501
        :type dst_port: int
        """

        self._dst_port = dst_port

    @property
    def dst_profile_id(self):
        """Gets the dst_profile_id of this ForensicContainerEvent.  # noqa: E501

        DstProfileID is the profile ID of the connection destination.   # noqa: E501

        :return: The dst_profile_id of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._dst_profile_id

    @dst_profile_id.setter
    def dst_profile_id(self, dst_profile_id):
        """Sets the dst_profile_id of this ForensicContainerEvent.

        DstProfileID is the profile ID of the connection destination.   # noqa: E501

        :param dst_profile_id: The dst_profile_id of this ForensicContainerEvent.  # noqa: E501
        :type dst_profile_id: str
        """

        self._dst_profile_id = dst_profile_id

    @property
    def effect(self):
        """Gets the effect of this ForensicContainerEvent.  # noqa: E501

        Effect is the runtime audit effect.   # noqa: E501

        :return: The effect of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this ForensicContainerEvent.

        Effect is the runtime audit effect.   # noqa: E501

        :param effect: The effect of this ForensicContainerEvent.  # noqa: E501
        :type effect: str
        """

        self._effect = effect

    @property
    def listening_start_time(self):
        """Gets the listening_start_time of this ForensicContainerEvent.  # noqa: E501

        listeningStartTime is the port listening start time.   # noqa: E501

        :return: The listening_start_time of this ForensicContainerEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._listening_start_time

    @listening_start_time.setter
    def listening_start_time(self, listening_start_time):
        """Sets the listening_start_time of this ForensicContainerEvent.

        listeningStartTime is the port listening start time.   # noqa: E501

        :param listening_start_time: The listening_start_time of this ForensicContainerEvent.  # noqa: E501
        :type listening_start_time: datetime
        """

        self._listening_start_time = listening_start_time

    @property
    def message(self):
        """Gets the message of this ForensicContainerEvent.  # noqa: E501

        Message is the runtime audit message.   # noqa: E501

        :return: The message of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ForensicContainerEvent.

        Message is the runtime audit message.   # noqa: E501

        :param message: The message of this ForensicContainerEvent.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def network_collection_type(self):
        """Gets the network_collection_type of this ForensicContainerEvent.  # noqa: E501

        NetworkCollection describe the different types of collection of network events  # noqa: E501

        :return: The network_collection_type of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._network_collection_type

    @network_collection_type.setter
    def network_collection_type(self, network_collection_type):
        """Sets the network_collection_type of this ForensicContainerEvent.

        NetworkCollection describe the different types of collection of network events  # noqa: E501

        :param network_collection_type: The network_collection_type of this ForensicContainerEvent.  # noqa: E501
        :type network_collection_type: str
        """

        self._network_collection_type = network_collection_type

    @property
    def outbound(self):
        """Gets the outbound of this ForensicContainerEvent.  # noqa: E501

        Outbound indicates if the port is outbound.   # noqa: E501

        :return: The outbound of this ForensicContainerEvent.  # noqa: E501
        :rtype: bool
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound):
        """Sets the outbound of this ForensicContainerEvent.

        Outbound indicates if the port is outbound.   # noqa: E501

        :param outbound: The outbound of this ForensicContainerEvent.  # noqa: E501
        :type outbound: bool
        """

        self._outbound = outbound

    @property
    def path(self):
        """Gets the path of this ForensicContainerEvent.  # noqa: E501

        Path is the event path.   # noqa: E501

        :return: The path of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ForensicContainerEvent.

        Path is the event path.   # noqa: E501

        :param path: The path of this ForensicContainerEvent.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def pid(self):
        """Gets the pid of this ForensicContainerEvent.  # noqa: E501

        Pid is the event process id.   # noqa: E501

        :return: The pid of this ForensicContainerEvent.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ForensicContainerEvent.

        Pid is the event process id.   # noqa: E501

        :param pid: The pid of this ForensicContainerEvent.  # noqa: E501
        :type pid: int
        """

        self._pid = pid

    @property
    def port(self):
        """Gets the port of this ForensicContainerEvent.  # noqa: E501

        Port is the listening port.   # noqa: E501

        :return: The port of this ForensicContainerEvent.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ForensicContainerEvent.

        Port is the listening port.   # noqa: E501

        :param port: The port of this ForensicContainerEvent.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def ppid(self):
        """Gets the ppid of this ForensicContainerEvent.  # noqa: E501

        PPid is the event parent process id.   # noqa: E501

        :return: The ppid of this ForensicContainerEvent.  # noqa: E501
        :rtype: int
        """
        return self._ppid

    @ppid.setter
    def ppid(self, ppid):
        """Sets the ppid of this ForensicContainerEvent.

        PPid is the event parent process id.   # noqa: E501

        :param ppid: The ppid of this ForensicContainerEvent.  # noqa: E501
        :type ppid: int
        """

        self._ppid = ppid

    @property
    def process(self):
        """Gets the process of this ForensicContainerEvent.  # noqa: E501

        Process is the event process.   # noqa: E501

        :return: The process of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._process

    @process.setter
    def process(self, process):
        """Sets the process of this ForensicContainerEvent.

        Process is the event process.   # noqa: E501

        :param process: The process of this ForensicContainerEvent.  # noqa: E501
        :type process: str
        """

        self._process = process

    @property
    def src_ip(self):
        """Gets the src_ip of this ForensicContainerEvent.  # noqa: E501

        SrcIP is the source IP of the connection.   # noqa: E501

        :return: The src_ip of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this ForensicContainerEvent.

        SrcIP is the source IP of the connection.   # noqa: E501

        :param src_ip: The src_ip of this ForensicContainerEvent.  # noqa: E501
        :type src_ip: str
        """

        self._src_ip = src_ip

    @property
    def src_profile_id(self):
        """Gets the src_profile_id of this ForensicContainerEvent.  # noqa: E501

        SrcProfileID is the profile ID of the connection source.   # noqa: E501

        :return: The src_profile_id of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._src_profile_id

    @src_profile_id.setter
    def src_profile_id(self, src_profile_id):
        """Sets the src_profile_id of this ForensicContainerEvent.

        SrcProfileID is the profile ID of the connection source.   # noqa: E501

        :param src_profile_id: The src_profile_id of this ForensicContainerEvent.  # noqa: E501
        :type src_profile_id: str
        """

        self._src_profile_id = src_profile_id

    @property
    def static(self):
        """Gets the static of this ForensicContainerEvent.  # noqa: E501

        Static indicates the event was added to the profile without behavioral indication.   # noqa: E501

        :return: The static of this ForensicContainerEvent.  # noqa: E501
        :rtype: bool
        """
        return self._static

    @static.setter
    def static(self, static):
        """Sets the static of this ForensicContainerEvent.

        Static indicates the event was added to the profile without behavioral indication.   # noqa: E501

        :param static: The static of this ForensicContainerEvent.  # noqa: E501
        :type static: bool
        """

        self._static = static

    @property
    def timestamp(self):
        """Gets the timestamp of this ForensicContainerEvent.  # noqa: E501

        Timestamp is the event timestamp.   # noqa: E501

        :return: The timestamp of this ForensicContainerEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ForensicContainerEvent.

        Timestamp is the event timestamp.   # noqa: E501

        :param timestamp: The timestamp of this ForensicContainerEvent.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this ForensicContainerEvent.  # noqa: E501


        :return: The type of this ForensicContainerEvent.  # noqa: E501
        :rtype: ForensicContainerEventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ForensicContainerEvent.


        :param type: The type of this ForensicContainerEvent.  # noqa: E501
        :type type: ForensicContainerEventType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this ForensicContainerEvent.  # noqa: E501

        User is the event user.   # noqa: E501

        :return: The user of this ForensicContainerEvent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ForensicContainerEvent.

        User is the event user.   # noqa: E501

        :param user: The user of this ForensicContainerEvent.  # noqa: E501
        :type user: str
        """

        self._user = user

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForensicContainerEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForensicContainerEvent):
            return True

        return self.to_dict() != other.to_dict()
