# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class VulnApplication(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'known_vulnerabilities': 'int',
        'layer_time': 'int',
        'name': 'str',
        'path': 'str',
        'version': 'str'
    }

    attribute_map = {
        'known_vulnerabilities': 'knownVulnerabilities',
        'layer_time': 'layerTime',
        'name': 'name',
        'path': 'path',
        'version': 'version'
    }

    def __init__(self, known_vulnerabilities=None, layer_time=None, name=None, path=None, version=None, local_vars_configuration=None):  # noqa: E501
        """VulnApplication - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._known_vulnerabilities = None
        self._layer_time = None
        self._name = None
        self._path = None
        self._version = None
        self.discriminator = None

        if known_vulnerabilities is not None:
            self.known_vulnerabilities = known_vulnerabilities
        if layer_time is not None:
            self.layer_time = layer_time
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if version is not None:
            self.version = version

    @property
    def known_vulnerabilities(self):
        """Gets the known_vulnerabilities of this VulnApplication.  # noqa: E501

        Total number of vulnerabilities for this application.   # noqa: E501

        :return: The known_vulnerabilities of this VulnApplication.  # noqa: E501
        :rtype: int
        """
        return self._known_vulnerabilities

    @known_vulnerabilities.setter
    def known_vulnerabilities(self, known_vulnerabilities):
        """Sets the known_vulnerabilities of this VulnApplication.

        Total number of vulnerabilities for this application.   # noqa: E501

        :param known_vulnerabilities: The known_vulnerabilities of this VulnApplication.  # noqa: E501
        :type known_vulnerabilities: int
        """

        self._known_vulnerabilities = known_vulnerabilities

    @property
    def layer_time(self):
        """Gets the layer_time of this VulnApplication.  # noqa: E501

        Image layer to which the application belongs - layer creation time.   # noqa: E501

        :return: The layer_time of this VulnApplication.  # noqa: E501
        :rtype: int
        """
        return self._layer_time

    @layer_time.setter
    def layer_time(self, layer_time):
        """Sets the layer_time of this VulnApplication.

        Image layer to which the application belongs - layer creation time.   # noqa: E501

        :param layer_time: The layer_time of this VulnApplication.  # noqa: E501
        :type layer_time: int
        """

        self._layer_time = layer_time

    @property
    def name(self):
        """Gets the name of this VulnApplication.  # noqa: E501

        Name of the application.   # noqa: E501

        :return: The name of this VulnApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VulnApplication.

        Name of the application.   # noqa: E501

        :param name: The name of this VulnApplication.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this VulnApplication.  # noqa: E501

        Path of the detected application.   # noqa: E501

        :return: The path of this VulnApplication.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this VulnApplication.

        Path of the detected application.   # noqa: E501

        :param path: The path of this VulnApplication.  # noqa: E501
        :type path: str
        """

        self._path = path

    @property
    def version(self):
        """Gets the version of this VulnApplication.  # noqa: E501

        Version of the application.   # noqa: E501

        :return: The version of this VulnApplication.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VulnApplication.

        Version of the application.   # noqa: E501

        :param version: The version of this VulnApplication.  # noqa: E501
        :type version: str
        """

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnApplication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnApplication):
            return True

        return self.to_dict() != other.to_dict()
