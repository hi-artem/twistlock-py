# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class SharedKubernetesAuditSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credential_id': 'str',
        'deployment_type': 'SharedKubernetesDeploymentType',
        'last_polling_time': 'datetime',
        'project_ids': 'list[str]',
        'stackdriver_filter': 'str',
        'webhook_url_suffix': 'str'
    }

    attribute_map = {
        'credential_id': 'credentialID',
        'deployment_type': 'deploymentType',
        'last_polling_time': 'lastPollingTime',
        'project_ids': 'projectIDs',
        'stackdriver_filter': 'stackdriverFilter',
        'webhook_url_suffix': 'webhookUrlSuffix'
    }

    def __init__(self, credential_id=None, deployment_type=None, last_polling_time=None, project_ids=None, stackdriver_filter=None, webhook_url_suffix=None, local_vars_configuration=None):  # noqa: E501
        """SharedKubernetesAuditSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._credential_id = None
        self._deployment_type = None
        self._last_polling_time = None
        self._project_ids = None
        self._stackdriver_filter = None
        self._webhook_url_suffix = None
        self.discriminator = None

        if credential_id is not None:
            self.credential_id = credential_id
        if deployment_type is not None:
            self.deployment_type = deployment_type
        if last_polling_time is not None:
            self.last_polling_time = last_polling_time
        if project_ids is not None:
            self.project_ids = project_ids
        if stackdriver_filter is not None:
            self.stackdriver_filter = stackdriver_filter
        if webhook_url_suffix is not None:
            self.webhook_url_suffix = webhook_url_suffix

    @property
    def credential_id(self):
        """Gets the credential_id of this SharedKubernetesAuditSettings.  # noqa: E501

        CredentialID is the credential that is used to fetch k8s audit data from external resources (e.g., Stackdriver).   # noqa: E501

        :return: The credential_id of this SharedKubernetesAuditSettings.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SharedKubernetesAuditSettings.

        CredentialID is the credential that is used to fetch k8s audit data from external resources (e.g., Stackdriver).   # noqa: E501

        :param credential_id: The credential_id of this SharedKubernetesAuditSettings.  # noqa: E501
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def deployment_type(self):
        """Gets the deployment_type of this SharedKubernetesAuditSettings.  # noqa: E501


        :return: The deployment_type of this SharedKubernetesAuditSettings.  # noqa: E501
        :rtype: SharedKubernetesDeploymentType
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this SharedKubernetesAuditSettings.


        :param deployment_type: The deployment_type of this SharedKubernetesAuditSettings.  # noqa: E501
        :type deployment_type: SharedKubernetesDeploymentType
        """

        self._deployment_type = deployment_type

    @property
    def last_polling_time(self):
        """Gets the last_polling_time of this SharedKubernetesAuditSettings.  # noqa: E501

        LastPollingTime holds the last time the logs were polled from Stackdriver.   # noqa: E501

        :return: The last_polling_time of this SharedKubernetesAuditSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._last_polling_time

    @last_polling_time.setter
    def last_polling_time(self, last_polling_time):
        """Sets the last_polling_time of this SharedKubernetesAuditSettings.

        LastPollingTime holds the last time the logs were polled from Stackdriver.   # noqa: E501

        :param last_polling_time: The last_polling_time of this SharedKubernetesAuditSettings.  # noqa: E501
        :type last_polling_time: datetime
        """

        self._last_polling_time = last_polling_time

    @property
    def project_ids(self):
        """Gets the project_ids of this SharedKubernetesAuditSettings.  # noqa: E501

        ProjectIDs are the GKE project IDs used to query stackdriver log entries.   # noqa: E501

        :return: The project_ids of this SharedKubernetesAuditSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this SharedKubernetesAuditSettings.

        ProjectIDs are the GKE project IDs used to query stackdriver log entries.   # noqa: E501

        :param project_ids: The project_ids of this SharedKubernetesAuditSettings.  # noqa: E501
        :type project_ids: list[str]
        """

        self._project_ids = project_ids

    @property
    def stackdriver_filter(self):
        """Gets the stackdriver_filter of this SharedKubernetesAuditSettings.  # noqa: E501

        StackdriverFilter is the advanced filter used for Stackdriver querying.   # noqa: E501

        :return: The stackdriver_filter of this SharedKubernetesAuditSettings.  # noqa: E501
        :rtype: str
        """
        return self._stackdriver_filter

    @stackdriver_filter.setter
    def stackdriver_filter(self, stackdriver_filter):
        """Sets the stackdriver_filter of this SharedKubernetesAuditSettings.

        StackdriverFilter is the advanced filter used for Stackdriver querying.   # noqa: E501

        :param stackdriver_filter: The stackdriver_filter of this SharedKubernetesAuditSettings.  # noqa: E501
        :type stackdriver_filter: str
        """

        self._stackdriver_filter = stackdriver_filter

    @property
    def webhook_url_suffix(self):
        """Gets the webhook_url_suffix of this SharedKubernetesAuditSettings.  # noqa: E501

        WebhookSuffix is the relative path to the webhook http endpoint.   # noqa: E501

        :return: The webhook_url_suffix of this SharedKubernetesAuditSettings.  # noqa: E501
        :rtype: str
        """
        return self._webhook_url_suffix

    @webhook_url_suffix.setter
    def webhook_url_suffix(self, webhook_url_suffix):
        """Sets the webhook_url_suffix of this SharedKubernetesAuditSettings.

        WebhookSuffix is the relative path to the webhook http endpoint.   # noqa: E501

        :param webhook_url_suffix: The webhook_url_suffix of this SharedKubernetesAuditSettings.  # noqa: E501
        :type webhook_url_suffix: str
        """

        self._webhook_url_suffix = webhook_url_suffix

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharedKubernetesAuditSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SharedKubernetesAuditSettings):
            return True

        return self.to_dict() != other.to_dict()
