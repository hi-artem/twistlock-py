# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class TypesConsoleCertificateSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'check_revocation': 'bool',
        'console_ca_cert': 'str',
        'console_custom_cert': 'CommonSecret',
        'hpkp': 'TypesHPKPSettings'
    }

    attribute_map = {
        'check_revocation': 'checkRevocation',
        'console_ca_cert': 'consoleCaCert',
        'console_custom_cert': 'consoleCustomCert',
        'hpkp': 'hpkp'
    }

    def __init__(self, check_revocation=None, console_ca_cert=None, console_custom_cert=None, hpkp=None, local_vars_configuration=None):  # noqa: E501
        """TypesConsoleCertificateSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._check_revocation = None
        self._console_ca_cert = None
        self._console_custom_cert = None
        self._hpkp = None
        self.discriminator = None

        if check_revocation is not None:
            self.check_revocation = check_revocation
        if console_ca_cert is not None:
            self.console_ca_cert = console_ca_cert
        if console_custom_cert is not None:
            self.console_custom_cert = console_custom_cert
        if hpkp is not None:
            self.hpkp = hpkp

    @property
    def check_revocation(self):
        """Gets the check_revocation of this TypesConsoleCertificateSettings.  # noqa: E501

        CheckRevocation indicates whether cert revocation status is required.   # noqa: E501

        :return: The check_revocation of this TypesConsoleCertificateSettings.  # noqa: E501
        :rtype: bool
        """
        return self._check_revocation

    @check_revocation.setter
    def check_revocation(self, check_revocation):
        """Sets the check_revocation of this TypesConsoleCertificateSettings.

        CheckRevocation indicates whether cert revocation status is required.   # noqa: E501

        :param check_revocation: The check_revocation of this TypesConsoleCertificateSettings.  # noqa: E501
        :type check_revocation: bool
        """

        self._check_revocation = check_revocation

    @property
    def console_ca_cert(self):
        """Gets the console_ca_cert of this TypesConsoleCertificateSettings.  # noqa: E501

        ConsoleCACert is a custom CA certificate for the console.   # noqa: E501

        :return: The console_ca_cert of this TypesConsoleCertificateSettings.  # noqa: E501
        :rtype: str
        """
        return self._console_ca_cert

    @console_ca_cert.setter
    def console_ca_cert(self, console_ca_cert):
        """Sets the console_ca_cert of this TypesConsoleCertificateSettings.

        ConsoleCACert is a custom CA certificate for the console.   # noqa: E501

        :param console_ca_cert: The console_ca_cert of this TypesConsoleCertificateSettings.  # noqa: E501
        :type console_ca_cert: str
        """

        self._console_ca_cert = console_ca_cert

    @property
    def console_custom_cert(self):
        """Gets the console_custom_cert of this TypesConsoleCertificateSettings.  # noqa: E501


        :return: The console_custom_cert of this TypesConsoleCertificateSettings.  # noqa: E501
        :rtype: CommonSecret
        """
        return self._console_custom_cert

    @console_custom_cert.setter
    def console_custom_cert(self, console_custom_cert):
        """Sets the console_custom_cert of this TypesConsoleCertificateSettings.


        :param console_custom_cert: The console_custom_cert of this TypesConsoleCertificateSettings.  # noqa: E501
        :type console_custom_cert: CommonSecret
        """

        self._console_custom_cert = console_custom_cert

    @property
    def hpkp(self):
        """Gets the hpkp of this TypesConsoleCertificateSettings.  # noqa: E501


        :return: The hpkp of this TypesConsoleCertificateSettings.  # noqa: E501
        :rtype: TypesHPKPSettings
        """
        return self._hpkp

    @hpkp.setter
    def hpkp(self, hpkp):
        """Sets the hpkp of this TypesConsoleCertificateSettings.


        :param hpkp: The hpkp of this TypesConsoleCertificateSettings.  # noqa: E501
        :type hpkp: TypesHPKPSettings
        """

        self._hpkp = hpkp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypesConsoleCertificateSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypesConsoleCertificateSettings):
            return True

        return self.to_dict() != other.to_dict()
