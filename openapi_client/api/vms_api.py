# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VmsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_vms_download_get(self, **kwargs):  # noqa: E501
        """api_v1_vms_download_get  # noqa: E501

        DownloadVMs downloads the VM images data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_download_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_download_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_download_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_download_get  # noqa: E501

        DownloadVMs downloads the VM images data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_download_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'name',
            'region',
            'credential',
            'distro'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_download_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
            collection_formats['name'] = 'multi'  # noqa: E501
        if 'region' in local_var_params and local_var_params['region'] is not None:  # noqa: E501
            query_params.append(('region', local_var_params['region']))  # noqa: E501
            collection_formats['region'] = 'multi'  # noqa: E501
        if 'credential' in local_var_params and local_var_params['credential'] is not None:  # noqa: E501
            query_params.append(('credential', local_var_params['credential']))  # noqa: E501
            collection_formats['credential'] = 'multi'  # noqa: E501
        if 'distro' in local_var_params and local_var_params['distro'] is not None:  # noqa: E501
            query_params.append(('distro', local_var_params['distro']))  # noqa: E501
            collection_formats['distro'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/vms/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_vms_get(self, **kwargs):  # noqa: E501
        """api_v1_vms_get  # noqa: E501

        VMs returns images by the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[SharedImageScanResult]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_get  # noqa: E501

        VMs returns images by the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[SharedImageScanResult], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'name',
            'region',
            'credential',
            'distro'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
            collection_formats['name'] = 'multi'  # noqa: E501
        if 'region' in local_var_params and local_var_params['region'] is not None:  # noqa: E501
            query_params.append(('region', local_var_params['region']))  # noqa: E501
            collection_formats['region'] = 'multi'  # noqa: E501
        if 'credential' in local_var_params and local_var_params['credential'] is not None:  # noqa: E501
            query_params.append(('credential', local_var_params['credential']))  # noqa: E501
            collection_formats['credential'] = 'multi'  # noqa: E501
        if 'distro' in local_var_params and local_var_params['distro'] is not None:  # noqa: E501
            query_params.append(('distro', local_var_params['distro']))  # noqa: E501
            collection_formats['distro'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[SharedImageScanResult]",
        }

        return self.api_client.call_api(
            '/api/v1/vms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_vms_labels_get(self, **kwargs):  # noqa: E501
        """api_v1_vms_labels_get  # noqa: E501

        VMLabels returns VM labels according to the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_labels_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[str]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_labels_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_labels_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_labels_get  # noqa: E501

        VMLabels returns VM labels according to the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_labels_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'name',
            'region',
            'credential',
            'distro'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_labels_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
            collection_formats['name'] = 'multi'  # noqa: E501
        if 'region' in local_var_params and local_var_params['region'] is not None:  # noqa: E501
            query_params.append(('region', local_var_params['region']))  # noqa: E501
            collection_formats['region'] = 'multi'  # noqa: E501
        if 'credential' in local_var_params and local_var_params['credential'] is not None:  # noqa: E501
            query_params.append(('credential', local_var_params['credential']))  # noqa: E501
            collection_formats['credential'] = 'multi'  # noqa: E501
        if 'distro' in local_var_params and local_var_params['distro'] is not None:  # noqa: E501
            query_params.append(('distro', local_var_params['distro']))  # noqa: E501
            collection_formats['distro'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[str]",
        }

        return self.api_client.call_api(
            '/api/v1/vms/labels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_vms_names_get(self, **kwargs):  # noqa: E501
        """api_v1_vms_names_get  # noqa: E501

        ImageNames returns image names according to the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_names_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[str]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_names_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_names_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_names_get  # noqa: E501

        ImageNames returns image names according to the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_names_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: Filters results by ID of the VM. 
        :type id: list[str]
        :param name: Filters results by image name. 
        :type name: list[str]
        :param region: Filters results by region. 
        :type region: list[str]
        :param credential: Filters results by credential. 
        :type credential: list[str]
        :param distro: Filters results by OS distro. 
        :type distro: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'name',
            'region',
            'credential',
            'distro'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_names_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
            collection_formats['name'] = 'multi'  # noqa: E501
        if 'region' in local_var_params and local_var_params['region'] is not None:  # noqa: E501
            query_params.append(('region', local_var_params['region']))  # noqa: E501
            collection_formats['region'] = 'multi'  # noqa: E501
        if 'credential' in local_var_params and local_var_params['credential'] is not None:  # noqa: E501
            query_params.append(('credential', local_var_params['credential']))  # noqa: E501
            collection_formats['credential'] = 'multi'  # noqa: E501
        if 'distro' in local_var_params and local_var_params['distro'] is not None:  # noqa: E501
            query_params.append(('distro', local_var_params['distro']))  # noqa: E501
            collection_formats['distro'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[str]",
        }

        return self.api_client.call_api(
            '/api/v1/vms/names', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_vms_progress_get(self, **kwargs):  # noqa: E501
        """api_v1_vms_progress_get  # noqa: E501

        VMScanProgress returns the VM images scan progress   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_progress_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[SharedProgress]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_progress_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_progress_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_progress_get  # noqa: E501

        VMScanProgress returns the VM images scan progress   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_progress_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[SharedProgress], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_progress_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[SharedProgress]",
        }

        return self.api_client.call_api(
            '/api/v1/vms/progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_vms_scan_post(self, **kwargs):  # noqa: E501
        """api_v1_vms_scan_post  # noqa: E501

        ScanVMs sends a VM scan request   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_scan_post(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_scan_post_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_scan_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_scan_post  # noqa: E501

        ScanVMs sends a VM scan request   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_scan_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_scan_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/vms/scan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_vms_stop_post(self, **kwargs):  # noqa: E501
        """api_v1_vms_stop_post  # noqa: E501

        StopVMsScan stops the currently running VMs scan   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_stop_post(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_vms_stop_post_with_http_info(**kwargs)  # noqa: E501

    def api_v1_vms_stop_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_vms_stop_post  # noqa: E501

        StopVMsScan stops the currently running VMs scan   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_vms_stop_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_vms_stop_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/vms/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
