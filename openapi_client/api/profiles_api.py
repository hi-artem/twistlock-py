# coding: utf-8

"""
    Prisma Cloud Compute API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 21.04.439
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ProfilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_profiles_container_download_get(self, **kwargs):  # noqa: E501
        """api_v1_profiles_container_download_get  # noqa: E501

        DownloadContainerRuntimeProfiles downloads the container runtime security profiles according to the specified query   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_download_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_download_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_profiles_container_download_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_profiles_container_download_get  # noqa: E501

        DownloadContainerRuntimeProfiles downloads the container runtime security profiles according to the specified query   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_download_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'os',
            'state',
            'image_id',
            'image',
            'host_name',
            'namespace',
            'cluster'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_download_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'os' in local_var_params and local_var_params['os'] is not None:  # noqa: E501
            query_params.append(('os', local_var_params['os']))  # noqa: E501
            collection_formats['os'] = 'multi'  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
            collection_formats['state'] = 'multi'  # noqa: E501
        if 'image_id' in local_var_params and local_var_params['image_id'] is not None:  # noqa: E501
            query_params.append(('imageID', local_var_params['image_id']))  # noqa: E501
            collection_formats['imageID'] = 'multi'  # noqa: E501
        if 'image' in local_var_params and local_var_params['image'] is not None:  # noqa: E501
            query_params.append(('image', local_var_params['image']))  # noqa: E501
            collection_formats['image'] = 'multi'  # noqa: E501
        if 'host_name' in local_var_params and local_var_params['host_name'] is not None:  # noqa: E501
            query_params.append(('hostName', local_var_params['host_name']))  # noqa: E501
            collection_formats['hostName'] = 'multi'  # noqa: E501
        if 'namespace' in local_var_params and local_var_params['namespace'] is not None:  # noqa: E501
            query_params.append(('namespace', local_var_params['namespace']))  # noqa: E501
            collection_formats['namespace'] = 'multi'  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
            collection_formats['cluster'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/profiles/container/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_get(self, **kwargs):  # noqa: E501
        """api_v1_profiles_container_get  # noqa: E501

        ContainerRuntimeProfiles returns container runtime profiles by the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[SharedContainerRuntimeProfile]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_profiles_container_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_profiles_container_get  # noqa: E501

        ContainerRuntimeProfiles returns container runtime profiles by the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[SharedContainerRuntimeProfile], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'os',
            'state',
            'image_id',
            'image',
            'host_name',
            'namespace',
            'cluster'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'os' in local_var_params and local_var_params['os'] is not None:  # noqa: E501
            query_params.append(('os', local_var_params['os']))  # noqa: E501
            collection_formats['os'] = 'multi'  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
            collection_formats['state'] = 'multi'  # noqa: E501
        if 'image_id' in local_var_params and local_var_params['image_id'] is not None:  # noqa: E501
            query_params.append(('imageID', local_var_params['image_id']))  # noqa: E501
            collection_formats['imageID'] = 'multi'  # noqa: E501
        if 'image' in local_var_params and local_var_params['image'] is not None:  # noqa: E501
            query_params.append(('image', local_var_params['image']))  # noqa: E501
            collection_formats['image'] = 'multi'  # noqa: E501
        if 'host_name' in local_var_params and local_var_params['host_name'] is not None:  # noqa: E501
            query_params.append(('hostName', local_var_params['host_name']))  # noqa: E501
            collection_formats['hostName'] = 'multi'  # noqa: E501
        if 'namespace' in local_var_params and local_var_params['namespace'] is not None:  # noqa: E501
            query_params.append(('namespace', local_var_params['namespace']))  # noqa: E501
            collection_formats['namespace'] = 'multi'  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
            collection_formats['cluster'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[SharedContainerRuntimeProfile]",
        }

        return self.api_client.call_api(
            '/api/v1/profiles/container', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_id_forensic_bundle_get(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_forensic_bundle_get  # noqa: E501

        ContainerForensicBundle streams the forensic bundle archive   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_forensic_bundle_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_id_forensic_bundle_get_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_container_id_forensic_bundle_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_forensic_bundle_get  # noqa: E501

        ContainerForensicBundle streams the forensic bundle archive   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_forensic_bundle_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'collections',
            'account_ids',
            'event_time',
            'hostname',
            'limit',
            'format',
            'incident_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_id_forensic_bundle_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_container_id_forensic_bundle_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'event_time' in local_var_params and local_var_params['event_time'] is not None:  # noqa: E501
            query_params.append(('eventTime', local_var_params['event_time']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'incident_id' in local_var_params and local_var_params['incident_id'] is not None:  # noqa: E501
            query_params.append(('incidentID', local_var_params['incident_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/profiles/container/{id}/forensic/bundle', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_id_forensic_get(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_forensic_get  # noqa: E501

        ContainerForensic fetches the forensic data for a specific profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_forensic_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[ForensicContainerEvent]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_id_forensic_get_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_container_id_forensic_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_forensic_get  # noqa: E501

        ContainerForensic fetches the forensic data for a specific profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_forensic_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[ForensicContainerEvent], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'collections',
            'account_ids',
            'event_time',
            'hostname',
            'limit',
            'format',
            'incident_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_id_forensic_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_container_id_forensic_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'event_time' in local_var_params and local_var_params['event_time'] is not None:  # noqa: E501
            query_params.append(('eventTime', local_var_params['event_time']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'incident_id' in local_var_params and local_var_params['incident_id'] is not None:  # noqa: E501
            query_params.append(('incidentID', local_var_params['incident_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[ForensicContainerEvent]",
        }

        return self.api_client.call_api(
            '/api/v1/profiles/container/{id}/forensic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_id_hosts_get(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_hosts_get  # noqa: E501

        ContainerRuntimeProfileHosts returns all the hosts that are using the given profile ID Remark: We need to make sure the returned hostnames match the provided collection filter. We accomplish this by looking up the corresponding defenders and intersecting the results.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_hosts_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id2: IDs is the runtime profile id filter. 
        :type id2: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[str]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_id_hosts_get_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_container_id_hosts_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_hosts_get  # noqa: E501

        ContainerRuntimeProfileHosts returns all the hosts that are using the given profile ID Remark: We need to make sure the returned hostnames match the provided collection filter. We accomplish this by looking up the corresponding defenders and intersecting the results.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_hosts_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id2: IDs is the runtime profile id filter. 
        :type id2: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id2',
            'os',
            'state',
            'image_id',
            'image',
            'host_name',
            'namespace',
            'cluster'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_id_hosts_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_container_id_hosts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id2' in local_var_params and local_var_params['id2'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id2']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'os' in local_var_params and local_var_params['os'] is not None:  # noqa: E501
            query_params.append(('os', local_var_params['os']))  # noqa: E501
            collection_formats['os'] = 'multi'  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
            collection_formats['state'] = 'multi'  # noqa: E501
        if 'image_id' in local_var_params and local_var_params['image_id'] is not None:  # noqa: E501
            query_params.append(('imageID', local_var_params['image_id']))  # noqa: E501
            collection_formats['imageID'] = 'multi'  # noqa: E501
        if 'image' in local_var_params and local_var_params['image'] is not None:  # noqa: E501
            query_params.append(('image', local_var_params['image']))  # noqa: E501
            collection_formats['image'] = 'multi'  # noqa: E501
        if 'host_name' in local_var_params and local_var_params['host_name'] is not None:  # noqa: E501
            query_params.append(('hostName', local_var_params['host_name']))  # noqa: E501
            collection_formats['hostName'] = 'multi'  # noqa: E501
        if 'namespace' in local_var_params and local_var_params['namespace'] is not None:  # noqa: E501
            query_params.append(('namespace', local_var_params['namespace']))  # noqa: E501
            collection_formats['namespace'] = 'multi'  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
            collection_formats['cluster'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[str]",
        }

        return self.api_client.call_api(
            '/api/v1/profiles/container/{id}/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_id_learn_post(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_learn_post  # noqa: E501

        UpdateContainerRuntimeProfileState updates the container profile state. Update flow: 1. Verifies the state is of the manual learning flow (Manual Relearning, Manual learning, and Active) 2. Verifies behavioral learning is enabled 3. Verifies the flow is valid: From a Manual Learning/Relearning state, another Relearning can not be triggered 4. Updates the db 5. Updates the defender   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_learn_post(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param types_profile_state_update:
        :type types_profile_state_update: TypesProfileStateUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_id_learn_post_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_container_id_learn_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_learn_post  # noqa: E501

        UpdateContainerRuntimeProfileState updates the container profile state. Update flow: 1. Verifies the state is of the manual learning flow (Manual Relearning, Manual learning, and Active) 2. Verifies behavioral learning is enabled 3. Verifies the flow is valid: From a Manual Learning/Relearning state, another Relearning can not be triggered 4. Updates the db 5. Updates the defender   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_learn_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param types_profile_state_update:
        :type types_profile_state_update: TypesProfileStateUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'types_profile_state_update'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_id_learn_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_container_id_learn_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'types_profile_state_update' in local_var_params:
            body_params = local_var_params['types_profile_state_update']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/profiles/container/{id}/learn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_id_rule_get(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_rule_get  # noqa: E501

        ContainerRuntimeProfileRule returns the runtime rule associated with the given profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_rule_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RuntimeContainerPolicyRule
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_id_rule_get_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_container_id_rule_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_container_id_rule_get  # noqa: E501

        ContainerRuntimeProfileRule returns the runtime rule associated with the given profile   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_id_rule_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RuntimeContainerPolicyRule, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_id_rule_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_container_id_rule_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "RuntimeContainerPolicyRule",
        }

        return self.api_client.call_api(
            '/api/v1/profiles/container/{id}/rule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_container_learn_post(self, **kwargs):  # noqa: E501
        """api_v1_profiles_container_learn_post  # noqa: E501

        RelearnAllContainerRuntimeProfiles updates all container runtime profiles state to relearn by the following 2 steps: 1. Broadcast a request to all defenders to relearn all container runtime profiles 2. Update all container runtime profiles state to extended learning in DB   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_learn_post(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_container_learn_post_with_http_info(**kwargs)  # noqa: E501

    def api_v1_profiles_container_learn_post_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_profiles_container_learn_post  # noqa: E501

        RelearnAllContainerRuntimeProfiles updates all container runtime profiles state to relearn by the following 2 steps: 1. Broadcast a request to all defenders to relearn all container runtime profiles 2. Update all container runtime profiles state to extended learning in DB   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_container_learn_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_container_learn_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/profiles/container/learn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_host_download_get(self, **kwargs):  # noqa: E501
        """api_v1_profiles_host_download_get  # noqa: E501

        DownloadHostsRuntimeProfiles downloads the host runtime profiles according to the specified query   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_download_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_host_download_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_profiles_host_download_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_profiles_host_download_get  # noqa: E501

        DownloadHostsRuntimeProfiles downloads the host runtime profiles according to the specified query   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_download_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'os',
            'state',
            'image_id',
            'image',
            'host_name',
            'namespace',
            'cluster'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_host_download_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'os' in local_var_params and local_var_params['os'] is not None:  # noqa: E501
            query_params.append(('os', local_var_params['os']))  # noqa: E501
            collection_formats['os'] = 'multi'  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
            collection_formats['state'] = 'multi'  # noqa: E501
        if 'image_id' in local_var_params and local_var_params['image_id'] is not None:  # noqa: E501
            query_params.append(('imageID', local_var_params['image_id']))  # noqa: E501
            collection_formats['imageID'] = 'multi'  # noqa: E501
        if 'image' in local_var_params and local_var_params['image'] is not None:  # noqa: E501
            query_params.append(('image', local_var_params['image']))  # noqa: E501
            collection_formats['image'] = 'multi'  # noqa: E501
        if 'host_name' in local_var_params and local_var_params['host_name'] is not None:  # noqa: E501
            query_params.append(('hostName', local_var_params['host_name']))  # noqa: E501
            collection_formats['hostName'] = 'multi'  # noqa: E501
        if 'namespace' in local_var_params and local_var_params['namespace'] is not None:  # noqa: E501
            query_params.append(('namespace', local_var_params['namespace']))  # noqa: E501
            collection_formats['namespace'] = 'multi'  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
            collection_formats['cluster'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/profiles/host/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_host_get(self, **kwargs):  # noqa: E501
        """api_v1_profiles_host_get  # noqa: E501

        HostRuntimeProfiles returns host runtime profiles by the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_get(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[RuntimeHostProfile]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_host_get_with_http_info(**kwargs)  # noqa: E501

    def api_v1_profiles_host_get_with_http_info(self, **kwargs):  # noqa: E501
        """api_v1_profiles_host_get  # noqa: E501

        HostRuntimeProfiles returns host runtime profiles by the query specification   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param offset: Offset from the start of the list from which to retrieve documents. 
        :type offset: int
        :param limit: Number of documents to return. 
        :type limit: int
        :param search: Search term. 
        :type search: str
        :param sort: Key on which to sort. 
        :type sort: str
        :param reverse: Sort order. 
        :type reverse: bool
        :param collections: Scopes the query by collection. 
        :type collections: list[str]
        :param account_ids: Scopes the query by account ID. 
        :type account_ids: list[str]
        :param fields: List of fields to retrieve. 
        :type fields: list[str]
        :param id: IDs is the runtime profile id filter. 
        :type id: list[str]
        :param os: OS is the service runtime profile OS filter. 
        :type os: list[str]
        :param state: States is the runtime profile state filter. 
        :type state: list[str]
        :param image_id: ImageIDs is the runtime profile image id filter. 
        :type image_id: list[str]
        :param image: Images is the runtime profile image filter. 
        :type image: list[str]
        :param host_name: Hosts is the runtime profile hostname filter. 
        :type host_name: list[str]
        :param namespace: Namespaces is the runtime profile k8s namespace filter. 
        :type namespace: list[str]
        :param cluster: Clusters is the runtime profile k8s cluster filter. 
        :type cluster: list[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[RuntimeHostProfile], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'offset',
            'limit',
            'search',
            'sort',
            'reverse',
            'collections',
            'account_ids',
            'fields',
            'id',
            'os',
            'state',
            'image_id',
            'image',
            'host_name',
            'namespace',
            'cluster'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_host_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in local_var_params and local_var_params['offset'] is not None:  # noqa: E501
            query_params.append(('offset', local_var_params['offset']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'search' in local_var_params and local_var_params['search'] is not None:  # noqa: E501
            query_params.append(('search', local_var_params['search']))  # noqa: E501
        if 'sort' in local_var_params and local_var_params['sort'] is not None:  # noqa: E501
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'reverse' in local_var_params and local_var_params['reverse'] is not None:  # noqa: E501
            query_params.append(('reverse', local_var_params['reverse']))  # noqa: E501
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
            collection_formats['id'] = 'multi'  # noqa: E501
        if 'os' in local_var_params and local_var_params['os'] is not None:  # noqa: E501
            query_params.append(('os', local_var_params['os']))  # noqa: E501
            collection_formats['os'] = 'multi'  # noqa: E501
        if 'state' in local_var_params and local_var_params['state'] is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
            collection_formats['state'] = 'multi'  # noqa: E501
        if 'image_id' in local_var_params and local_var_params['image_id'] is not None:  # noqa: E501
            query_params.append(('imageID', local_var_params['image_id']))  # noqa: E501
            collection_formats['imageID'] = 'multi'  # noqa: E501
        if 'image' in local_var_params and local_var_params['image'] is not None:  # noqa: E501
            query_params.append(('image', local_var_params['image']))  # noqa: E501
            collection_formats['image'] = 'multi'  # noqa: E501
        if 'host_name' in local_var_params and local_var_params['host_name'] is not None:  # noqa: E501
            query_params.append(('hostName', local_var_params['host_name']))  # noqa: E501
            collection_formats['hostName'] = 'multi'  # noqa: E501
        if 'namespace' in local_var_params and local_var_params['namespace'] is not None:  # noqa: E501
            query_params.append(('namespace', local_var_params['namespace']))  # noqa: E501
            collection_formats['namespace'] = 'multi'  # noqa: E501
        if 'cluster' in local_var_params and local_var_params['cluster'] is not None:  # noqa: E501
            query_params.append(('cluster', local_var_params['cluster']))  # noqa: E501
            collection_formats['cluster'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[RuntimeHostProfile]",
        }

        return self.api_client.call_api(
            '/api/v1/profiles/host', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_host_id_forensic_download_get(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_host_id_forensic_download_get  # noqa: E501

        HostForensicDownload fetches the host forensic data for a specific hostname as CSV.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_id_forensic_download_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_host_id_forensic_download_get_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_host_id_forensic_download_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_host_id_forensic_download_get  # noqa: E501

        HostForensicDownload fetches the host forensic data for a specific hostname as CSV.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_id_forensic_download_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'collections',
            'account_ids',
            'event_time',
            'hostname',
            'limit',
            'format',
            'incident_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_host_id_forensic_download_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_host_id_forensic_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'event_time' in local_var_params and local_var_params['event_time'] is not None:  # noqa: E501
            query_params.append(('eventTime', local_var_params['event_time']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'incident_id' in local_var_params and local_var_params['incident_id'] is not None:  # noqa: E501
            query_params.append(('incidentID', local_var_params['incident_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/profiles/host/{id}/forensic/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def api_v1_profiles_host_id_forensic_get(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_host_id_forensic_get  # noqa: E501

        HostForensic fetches the host forensic data for a specific hostname.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_id_forensic_get(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[ForensicHostEvent]
        """
        kwargs['_return_http_data_only'] = True
        return self.api_v1_profiles_host_id_forensic_get_with_http_info(id, **kwargs)  # noqa: E501

    def api_v1_profiles_host_id_forensic_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """api_v1_profiles_host_id_forensic_get  # noqa: E501

        HostForensic fetches the host forensic data for a specific hostname.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_v1_profiles_host_id_forensic_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param collections: Collections are collections scoping the query. 
        :type collections: list[str]
        :param account_ids: AccountIDs are the account IDs scoping the query. 
        :type account_ids: list[str]
        :param event_time: EventTime is the forensic event pivot time in milliseconds (used to fetch events). 
        :type event_time: datetime
        :param hostname: Hostname is the hostname for which data should be fetched. 
        :type hostname: str
        :param limit: Limit is the number of events to return. 
        :type limit: int
        :param format: Format is the forensic data format. 
        :type format: str
        :param incident_id: IncidentID is the incident ID in case the request kind is an incident. 
        :type incident_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[ForensicHostEvent], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'collections',
            'account_ids',
            'event_time',
            'hostname',
            'limit',
            'format',
            'incident_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_profiles_host_id_forensic_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `api_v1_profiles_host_id_forensic_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'collections' in local_var_params and local_var_params['collections'] is not None:  # noqa: E501
            query_params.append(('collections', local_var_params['collections']))  # noqa: E501
            collection_formats['collections'] = 'multi'  # noqa: E501
        if 'account_ids' in local_var_params and local_var_params['account_ids'] is not None:  # noqa: E501
            query_params.append(('accountIDs', local_var_params['account_ids']))  # noqa: E501
            collection_formats['accountIDs'] = 'multi'  # noqa: E501
        if 'event_time' in local_var_params and local_var_params['event_time'] is not None:  # noqa: E501
            query_params.append(('eventTime', local_var_params['event_time']))  # noqa: E501
        if 'hostname' in local_var_params and local_var_params['hostname'] is not None:  # noqa: E501
            query_params.append(('hostname', local_var_params['hostname']))  # noqa: E501
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'incident_id' in local_var_params and local_var_params['incident_id'] is not None:  # noqa: E501
            query_params.append(('incidentID', local_var_params['incident_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[ForensicHostEvent]",
        }

        return self.api_client.call_api(
            '/api/v1/profiles/host/{id}/forensic', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
